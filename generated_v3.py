from __future__ import absolute_import, division, print_function, unicode_literals
from datatypes import *
import json
import logging
import re
import xml.etree.cElementTree as ET
from xml.etree.ElementTree import ParseError as ParseError
__all__ = ['is_xml',
           'xml2json',
           'ResourceContainer',
           'Account',
           'ActionDefinition',
           'Age',
           'AllergyIntolerance',
           'Annotation',
           'Appointment',
           'AppointmentResponse',
           'Attachment',
           'AuditEvent',
           'BackboneElement',
           'Basic',
           'Binary',
           'BodySite',
           'Bundle',
           'CarePlan',
           'CareTeam',
           'Claim',
           'ClaimResponse',
           'ClinicalImpression',
           'CodeSystem',
           'CodeableConcept',
           'Coding',
           'Communication',
           'CommunicationRequest',
           'CompartmentDefinition',
           'Composition',
           'ConceptMap',
           'Condition',
           'Conformance',
           'ContactPoint',
           'Contract',
           'Count',
           'Coverage',
           'DataElement',
           'DataRequirement',
           'DecisionSupportRule',
           'DecisionSupportServiceModule',
           'DetectedIssue',
           'Device',
           'DeviceComponent',
           'DeviceMetric',
           'DeviceUseRequest',
           'DeviceUseStatement',
           'DiagnosticOrder',
           'DiagnosticReport',
           'Distance',
           'DocumentManifest',
           'DocumentReference',
           'DomainResource',
           'Duration',
           'Element',
           'ElementDefinition',
           'EligibilityRequest',
           'EligibilityResponse',
           'Encounter',
           'EnrollmentRequest',
           'EnrollmentResponse',
           'EpisodeOfCare',
           'ExpansionProfile',
           'ExplanationOfBenefit',
           'Extension',
           'FamilyMemberHistory',
           'Flag',
           'Goal',
           'Group',
           'GuidanceResponse',
           'HealthcareService',
           'HumanName',
           'Identifier',
           'ImagingExcerpt',
           'ImagingObjectSelection',
           'ImagingStudy',
           'Immunization',
           'ImmunizationRecommendation',
           'ImplementationGuide',
           'Library',
           'Linkage',
           'List',
           'Location',
           'Measure',
           'MeasureReport',
           'Media',
           'Medication',
           'MedicationAdministration',
           'MedicationDispense',
           'MedicationOrder',
           'MedicationStatement',
           'MessageHeader',
           'Meta',
           'ModuleDefinition',
           'ModuleMetadata',
           'Money',
           'NamingSystem',
           'Narrative',
           'NutritionOrder',
           'Observation',
           'OperationDefinition',
           'OperationOutcome',
           'Order',
           'OrderResponse',
           'OrderSet',
           'Organization',
           'ParameterDefinition',
           'Parameters',
           'Patient',
           'PaymentNotice',
           'PaymentReconciliation',
           'Person',
           'Practitioner',
           'PractitionerRole',
           'Procedure',
           'ProcedureRequest',
           'ProcessRequest',
           'ProcessResponse',
           'Protocol',
           'Provenance',
           'Quantity',
           'Questionnaire',
           'QuestionnaireResponse',
           'Range',
           'Ratio',
           'Reference',
           'ReferralRequest',
           'RelatedPerson',
           'Resource',
           'RiskAssessment',
           'SampledData',
           'SampledDataDataType',
           'Schedule',
           'SearchParameter',
           'Sequence',
           'Signature',
           'SimpleQuantity',
           'Slot',
           'Specimen',
           'StructureDefinition',
           'StructureMap',
           'Subscription',
           'Substance',
           'SupplyDelivery',
           'SupplyRequest',
           'Task',
           'TestScript',
           'Timing',
           'TriggerDefinition',
           'ValueSet',
           'VisionPrescription',
           'code',
           'markdown',
           'oid',
           'uri',
           'uuid',
           'RESOURCES']
try:
    basestring
except NameError:
    basestring = str

def is_xml(text):
    if isinstance(text, (dict, list)):
        return False
    else:
        #try:
        #    ET.fromstring(text)
        #except ParseError:
        #    return False
#    
#    return True
        return True

def strip_tag(tag):
    '''
    Snippet of code from
    Copyright (C) 2010-2013, Hay Kranen
    see https://github.com/hay/xml2json for licence
    '''
    strip_ns_tag = tag
    split_array = tag.split('}')
    if len(split_array) > 1:
        strip_ns_tag = split_array[1]
        tag = strip_ns_tag
    return tag

def elem_to_internal(elem):
    '''
    Snippet of code from
    Copyright (C) 2010-2013, Hay Kranen
    see https://github.com/hay/xml2json for licence
    '''
    d = {}
    elem_tag = elem.tag
    for key, value in list(elem.attrib.items()):
        d = value

    # loop over subelements to merge them
    for subelem in elem:
        if strip_tag(subelem.tag) == "div":
            value = ET.tostring(subelem).decode('utf-8')
            value = re.sub("<html:", "<", value, flags=re.M)
            value = re.sub(r'xmlns:html', r'xmlns', value, flags=re.M)
        else:
            v = elem_to_internal(subelem)
            value = v[strip_tag(subelem.tag)]
    
        tag = subelem.tag
            
        try:
            # add to existing list for this tag
            d[strip_tag(tag)].append(value)
        except AttributeError:
            # turn existing entry into a list
            d[strip_tag(tag)] = [d[strip_tag(tag)], value]
        except KeyError:
            # add a new non-list entry
            d[strip_tag(tag)] = value
    return {strip_tag(elem_tag): d}

def xml2json(xml_text):
    '''
    Function xml2json
    
    This function converts an xml Resource in json representation
    
    xml_text -> xml text to be converted in json
    '''
    
    logging.info("Function xml2json: text {0}".format(xml_text))

    elem = ET.fromstring(xml_text)

    if hasattr(elem, 'getroot'):
        elem = elem.getroot()

    tmp_json = elem_to_internal(elem)
    json_obj = {}
    key_res = list(tmp_json.keys())[0]
    json_obj["resourceType"] = key_res
    for key in tmp_json[key_res].keys():
        json_obj[key] = tmp_json[key_res][key]
    return json_obj

class ResourceContainer(object):
    '''
    FHIR ResourceContainer
    '''

    def __new__(self, json):
        '''
        FHIR ResourceContainer __new__
        '''
        if json == None:
            return None
        else:
            return super(ResourceContainer, self).__new__(self)

    def __init__(self, json):
        '''
        FHIR ResourceContainer constructor
        '''
        logging.info("FHIR ResourceContainer: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json

    @property
    def json(self):
        '''
        Json Object representation
        '''
        return self.__json
        
    def __repr__(self):
        '''
        FHIR ResourceContainer string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

RESOURCES = ['Account',
             'AllergyIntolerance',
             'Appointment',
             'AppointmentResponse',
             'AuditEvent',
             'Basic',
             'Binary',
             'BodySite',
             'Bundle',
             'CarePlan',
             'CareTeam',
             'Claim',
             'ClaimResponse',
             'ClinicalImpression',
             'CodeSystem',
             'Communication',
             'CommunicationRequest',
             'CompartmentDefinition',
             'Composition',
             'ConceptMap',
             'Condition',
             'Conformance',
             'Contract',
             'Coverage',
             'DataElement',
             'DecisionSupportRule',
             'DecisionSupportServiceModule',
             'DetectedIssue',
             'Device',
             'DeviceComponent',
             'DeviceMetric',
             'DeviceUseRequest',
             'DeviceUseStatement',
             'DiagnosticOrder',
             'DiagnosticReport',
             'DocumentManifest',
             'DocumentReference',
             'DomainResource',
             'EligibilityRequest',
             'EligibilityResponse',
             'Encounter',
             'EnrollmentRequest',
             'EnrollmentResponse',
             'EpisodeOfCare',
             'ExpansionProfile',
             'ExplanationOfBenefit',
             'FamilyMemberHistory',
             'Flag',
             'Goal',
             'Group',
             'GuidanceResponse',
             'HealthcareService',
             'ImagingExcerpt',
             'ImagingObjectSelection',
             'ImagingStudy',
             'Immunization',
             'ImmunizationRecommendation',
             'ImplementationGuide',
             'Library',
             'Linkage',
             'List',
             'Location',
             'Measure',
             'MeasureReport',
             'Media',
             'Medication',
             'MedicationAdministration',
             'MedicationDispense',
             'MedicationOrder',
             'MedicationStatement',
             'MessageHeader',
             'ModuleDefinition',
             'NamingSystem',
             'NutritionOrder',
             'Observation',
             'OperationDefinition',
             'OperationOutcome',
             'Order',
             'OrderResponse',
             'OrderSet',
             'Organization',
             'Parameters',
             'Patient',
             'PaymentNotice',
             'PaymentReconciliation',
             'Person',
             'Practitioner',
             'PractitionerRole',
             'Procedure',
             'ProcedureRequest',
             'ProcessRequest',
             'ProcessResponse',
             'Protocol',
             'Provenance',
             'Questionnaire',
             'QuestionnaireResponse',
             'ReferralRequest',
             'RelatedPerson',
             'RiskAssessment',
             'Schedule',
             'SearchParameter',
             'Sequence',
             'Slot',
             'Specimen',
             'StructureDefinition',
             'StructureMap',
             'Subscription',
             'Substance',
             'SupplyDelivery',
             'SupplyRequest',
             'Task',
             'TestScript',
             'ValueSet',
             'VisionPrescription']

class Element(object):
    '''
    FHIR Element resource

     Base definition for all elements in a resource. If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions

    extension ->  May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.

    
    '''
    

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'extension':
                    list_to_add.append(Extension(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR Element __new__
        '''
        if json == None:
            return None
        else:
            return super(Element, self).__new__(self)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR Element constructor
        '''
        logging.info("FHIR Element: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        if 'extension' in self.__json:
            if isinstance(self.__json['extension'], list):
                self.extension = self.__add_list('extension')
            else:
                self.extension = Extension(self.__add('extension'))
        else:
            self.extension = None


        # Parent Resource Init
        super(Element, self).__init__()

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.extension:
            self.__json['extension'] = self.__get_list(self.extension)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR Element string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class Resource(object):
    '''
    FHIR Resource resource

     This is the base resource type for everything.

    id ->  The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
    meta ->  The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
    implicitRules ->  A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
    language ->  The base language in which the resource is written.
    
    # Search parameters
        Resource.search._content
        Resource.search._id
        Resource.search._lastUpdated
        Resource.search._profile
        Resource.search._query
        Resource.search._security
        Resource.search._tag
        Resource.search._text
    '''
    # search parameters
    par = [("_content", "string"),
           ("_id", "token"),
           ("_lastUpdated", "date"),
           ("_profile", "uri"),
           ("_query", "token"),
           ("_security", "token"),
           ("_tag", "token"),
           ("_text", "string")]

    search = Params(par, "Resource")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)        
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR Resource __new__
        '''
        if json == None:
            return None
        else:
            return super(Resource, self).__new__(self)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR Resource constructor
        '''

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        
        self.id = self.__add('id')
        self.meta = Meta(self.__add('meta'))
        self.implicitRules = self.__add('implicitRules')
        self.language = self.__add('language')


        # Parent Resource Init
        super(Resource, self).__init__()


    def __aux_json(self, jinput=None):
        if jinput:
            self.__json = jinput
        else:
            self.__json = {}
        if self.id:
            self.__json['id'] = self.id
        if self.meta:
            self.__json['meta'] = self.meta.json
        if self.implicitRules:
            self.__json['implicitRules'] = self.implicitRules
        if self.language:
            self.__json['language'] = self.language

        return self.__json

    def _add_json(self, jinput=None):
        '''
        FHIR DomainResource add to an existing json
        '''
        return self.__aux_json(jinput)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.id:
            self.__json['id'] = self.id
        if self.meta:
            self.__json['meta'] = self.meta.json
        if self.implicitRules:
            self.__json['implicitRules'] = self.implicitRules
        if self.language:
            self.__json['language'] = self.language


        return self.__json

    def __repr__(self):
        '''
        FHIR Resource string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class DomainResource(Resource):
    '''
    FHIR DomainResource resource

     A resource that includes narrative, extensions, and contained resources.

    text ->  A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
    contained ->  These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
    extension ->  May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
    modifierExtension ->  May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
    
    
    '''
    

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'contained':
                    list_to_add.append(ResourceContainer(obj))
                elif key == 'extension':
                    list_to_add.append(Extension(obj))
                elif key == 'modifierExtension':
                    list_to_add.append(Extension(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR DomainResource __new__
        '''
        if json == None:
            return None
        else:
            return super(DomainResource, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR DomainResource constructor
        '''

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        
        self.text = Narrative(self.__add('text'))
        if 'contained' in self.__json:
            if isinstance(self.__json['contained'], list):
                self.contained = self.__add_list('contained')
            else:
                self.contained = ResourceContainer(self.__add('contained'))
        else:
            self.contained = None
        if 'extension' in self.__json:
            if isinstance(self.__json['extension'], list):
                self.extension = self.__add_list('extension')
            else:
                self.extension = Extension(self.__add('extension'))
        else:
            self.extension = None
        if 'modifierExtension' in self.__json:
            if isinstance(self.__json['modifierExtension'], list):
                self.modifierExtension = self.__add_list('modifierExtension')
            else:
                self.modifierExtension = Extension(self.__add('modifierExtension'))
        else:
            self.modifierExtension = None


        # Parent Resource Init
        super(DomainResource, self).__init__(json)


    def __aux_json(self, jinput=None):
        if jinput:
            self.__json = jinput
        else:
            self.__json = {}
        if self.text:
            self.__json['text'] = self.text.json
        if self.contained:
            self.__json['contained'] = self.__get_list(self.contained)
        if self.extension:
            self.__json['extension'] = self.__get_list(self.extension)
        if self.modifierExtension:
            self.__json['modifierExtension'] = self.__get_list(self.modifierExtension)


        # Add Resource json attributes
        self.__json = super(DomainResource, self)._add_json(jinput = self.__json)

        return self.__json

    def _add_json(self, jinput=None):
        '''
        FHIR DomainResource add to an existing json
        '''
        return self.__aux_json(jinput)

    def __repr__(self):
        '''
        FHIR DomainResource string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class BackboneElement(Element):
    '''
    FHIR BackboneElement resource

     Base definition for all elements that are defined inside a resource - but not those in a data type. If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions

    modifierExtension ->  May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

    
    '''
    

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'modifierExtension':
                    list_to_add.append(Extension(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR BackboneElement __new__
        '''
        if json == None:
            return None
        else:
            return super(BackboneElement, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR BackboneElement constructor
        '''
        logging.info("FHIR BackboneElement: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        if 'modifierExtension' in self.__json:
            if isinstance(self.__json['modifierExtension'], list):
                self.modifierExtension = self.__add_list('modifierExtension')
            else:
                self.modifierExtension = Extension(self.__add('modifierExtension'))
        else:
            self.modifierExtension = None


        # Parent Resource Init
        super(BackboneElement, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.modifierExtension:
            self.__json['modifierExtension'] = self.__get_list(self.modifierExtension)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR BackboneElement string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class markdown(Element):
    '''
    FHIR markdown resource

     A string that may contain markdown syntax for optional processing by a mark down presentation engine Systems are not required to have markdown support, and there is considerable variation in markdown syntax, so the text should be readable without markdown processing. The preferred markdown syntax is described here: http://daringfireball.net/projects/markdown/syntax (and tests here: http://daringfireball.net/projects/downloads/MarkdownTest_1.0.zip) If the element is present, it must have either a @value, an @id referenced from the Narrative, or extensions

    value -> 

    
    '''
    

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR markdown __new__
        '''
        if json == None:
            return None
        else:
            return super(markdown, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR markdown constructor
        '''
        logging.info("FHIR markdown: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.value = self.__add('value')


        # Parent Resource Init
        super(markdown, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.value:
            self.__json['value'] = self.value


        return self.__json
        
    def __repr__(self):
        '''
        FHIR markdown string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class code(Element):
    '''
    FHIR code resource

     A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents If the element is present, it must have either a @value, an @id referenced from the Narrative, or extensions

    value -> 

    
    '''
    

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR code __new__
        '''
        if json == None:
            return None
        else:
            return super(code, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR code constructor
        '''
        logging.info("FHIR code: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.value = self.__add('value')


        # Parent Resource Init
        super(code, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.value:
            self.__json['value'] = self.value


        return self.__json
        
    def __repr__(self):
        '''
        FHIR code string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class uri(Element):
    '''
    FHIR uri resource

     String of characters used to identify a name or a resource see http://en.wikipedia.org/wiki/Uniform_resource_identifier If the element is present, it must have either a @value, an @id, or extensions

    value -> 

    
    '''
    

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR uri __new__
        '''
        if json == None:
            return None
        else:
            return super(uri, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR uri constructor
        '''
        logging.info("FHIR uri: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.value = self.__add('value')


        # Parent Resource Init
        super(uri, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.value:
            self.__json['value'] = self.value


        return self.__json
        
    def __repr__(self):
        '''
        FHIR uri string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class oid(Element):
    '''
    FHIR oid resource

     An oid represented as a URI RFC 3001. See also ISO/IEC 8824:1990  If the element is present, it must have either a @value, an @id referenced from the Narrative, or extensions

    value -> 

    
    '''
    

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR oid __new__
        '''
        if json == None:
            return None
        else:
            return super(oid, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR oid constructor
        '''
        logging.info("FHIR oid: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.value = self.__add('value')


        # Parent Resource Init
        super(oid, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.value:
            self.__json['value'] = self.value


        return self.__json
        
    def __repr__(self):
        '''
        FHIR oid string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class uuid(Element):
    '''
    FHIR uuid resource

     A UUID, represented as a URI See The Open Group, CDE 1.1 Remote Procedure Call specification, Appendix A. If the element is present, it must have either a @value, an @id referenced from the Narrative, or extensions

    value -> 

    
    '''
    

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR uuid __new__
        '''
        if json == None:
            return None
        else:
            return super(uuid, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR uuid constructor
        '''
        logging.info("FHIR uuid: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.value = self.__add('value')


        # Parent Resource Init
        super(uuid, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.value:
            self.__json['value'] = self.value


        return self.__json
        
    def __repr__(self):
        '''
        FHIR uuid string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class Extension(Element):
    '''
    FHIR Extension resource

     Optional Extensions Element - found in all resources. If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions

    url -> 
    valueBoolean ->  Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
    valueInteger ->  Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
    valueDecimal ->  Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
    valueBase64Binary ->  Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
    valueInstant ->  Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
    valueString ->  Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
    valueUri ->  Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
    valueDate ->  Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
    valueDateTime ->  Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
    valueTime ->  Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
    valueCode ->  Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
    valueOid ->  Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
    valueUuid ->  Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
    valueId ->  Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
    valueUnsignedInt ->  Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
    valuePositiveInt ->  Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
    valueMarkdown ->  Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
    valueAnnotation ->  Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
    valueAttachment ->  Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
    valueIdentifier ->  Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
    valueCodeableConcept ->  Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
    valueCoding ->  Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
    valueQuantity ->  Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
    valueRange ->  Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
    valuePeriod ->  Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
    valueRatio ->  Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
    valueReference ->  Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
    valueSampledData ->  Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
    valueSignature ->  Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
    valueHumanName ->  Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
    valueAddress ->  Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
    valueContactPoint ->  Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
    valueTiming ->  Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
    valueMeta ->  Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).

    
    '''
    

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR Extension __new__
        '''
        if json == None:
            return None
        else:
            return super(Extension, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR Extension constructor
        '''
        logging.info("FHIR Extension: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.url = self.__add('url')
        self.valueBoolean = Boolean(self.__add('valueBoolean'))
        self.valueInteger = self.__add('valueInteger')
        self.valueDecimal = self.__add('valueDecimal')
        self.valueBase64Binary = self.__add('valueBase64Binary')
        self.valueInstant = self.__add('valueInstant')
        self.valueString = self.__add('valueString')
        self.valueUri = self.__add('valueUri')
        self.valueDate = Date(self.__add('valueDate'))
        self.valueDateTime = DateTime(self.__add('valueDateTime'))
        self.valueTime = Time(self.__add('valueTime'))
        self.valueCode = self.__add('valueCode')
        self.valueOid = self.__add('valueOid')
        self.valueUuid = self.__add('valueUuid')
        self.valueId = self.__add('valueId')
        self.valueUnsignedInt = self.__add('valueUnsignedInt')
        self.valuePositiveInt = self.__add('valuePositiveInt')
        self.valueMarkdown = self.__add('valueMarkdown')
        self.valueAnnotation = Annotation(self.__add('valueAnnotation'))
        self.valueAttachment = Attachment(self.__add('valueAttachment'))
        self.valueIdentifier = Identifier(self.__add('valueIdentifier'))
        self.valueCodeableConcept = CodeableConcept(self.__add('valueCodeableConcept'))
        self.valueCoding = Coding(self.__add('valueCoding'))
        self.valueQuantity = Quantity(self.__add('valueQuantity'))
        self.valueRange = Range(self.__add('valueRange'))
        self.valuePeriod = Period(self.__add('valuePeriod'))
        self.valueRatio = Ratio(self.__add('valueRatio'))
        self.valueReference = Reference(self.__add('valueReference'))
        self.valueSampledData = SampledData(self.__add('valueSampledData'))
        self.valueSignature = Signature(self.__add('valueSignature'))
        self.valueHumanName = HumanName(self.__add('valueHumanName'))
        self.valueAddress = Address(self.__add('valueAddress'))
        self.valueContactPoint = ContactPoint(self.__add('valueContactPoint'))
        self.valueTiming = Timing(self.__add('valueTiming'))
        self.valueMeta = Meta(self.__add('valueMeta'))


        # Parent Resource Init
        super(Extension, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.url:
            self.__json['url'] = self.url
        if self.valueBoolean:
            self.__json['valueBoolean'] = self.valueBoolean.json
        if self.valueInteger:
            self.__json['valueInteger'] = self.valueInteger
        if self.valueDecimal:
            self.__json['valueDecimal'] = self.valueDecimal
        if self.valueBase64Binary:
            self.__json['valueBase64Binary'] = self.valueBase64Binary
        if self.valueInstant:
            self.__json['valueInstant'] = self.valueInstant
        if self.valueString:
            self.__json['valueString'] = self.valueString
        if self.valueUri:
            self.__json['valueUri'] = self.valueUri
        if self.valueDate:
            self.__json['valueDate'] = self.valueDate.json
        if self.valueDateTime:
            self.__json['valueDateTime'] = self.valueDateTime.json
        if self.valueTime:
            self.__json['valueTime'] = self.valueTime.json
        if self.valueCode:
            self.__json['valueCode'] = self.valueCode
        if self.valueOid:
            self.__json['valueOid'] = self.valueOid
        if self.valueUuid:
            self.__json['valueUuid'] = self.valueUuid
        if self.valueId:
            self.__json['valueId'] = self.valueId
        if self.valueUnsignedInt:
            self.__json['valueUnsignedInt'] = self.valueUnsignedInt
        if self.valuePositiveInt:
            self.__json['valuePositiveInt'] = self.valuePositiveInt
        if self.valueMarkdown:
            self.__json['valueMarkdown'] = self.valueMarkdown
        if self.valueAnnotation:
            self.__json['valueAnnotation'] = self.valueAnnotation.json
        if self.valueAttachment:
            self.__json['valueAttachment'] = self.valueAttachment.json
        if self.valueIdentifier:
            self.__json['valueIdentifier'] = self.valueIdentifier.json
        if self.valueCodeableConcept:
            self.__json['valueCodeableConcept'] = self.valueCodeableConcept.json
        if self.valueCoding:
            self.__json['valueCoding'] = self.valueCoding.json
        if self.valueQuantity:
            self.__json['valueQuantity'] = self.valueQuantity.json
        if self.valueRange:
            self.__json['valueRange'] = self.valueRange.json
        if self.valuePeriod:
            self.__json['valuePeriod'] = self.valuePeriod.json
        if self.valueRatio:
            self.__json['valueRatio'] = self.valueRatio.json
        if self.valueReference:
            self.__json['valueReference'] = self.valueReference.json
        if self.valueSampledData:
            self.__json['valueSampledData'] = self.valueSampledData.json
        if self.valueSignature:
            self.__json['valueSignature'] = self.valueSignature.json
        if self.valueHumanName:
            self.__json['valueHumanName'] = self.valueHumanName.json
        if self.valueAddress:
            self.__json['valueAddress'] = self.valueAddress.json
        if self.valueContactPoint:
            self.__json['valueContactPoint'] = self.valueContactPoint.json
        if self.valueTiming:
            self.__json['valueTiming'] = self.valueTiming.json
        if self.valueMeta:
            self.__json['valueMeta'] = self.valueMeta.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR Extension string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class Narrative(Element):
    '''
    FHIR Narrative resource

     A human-readable formatted text, including images. If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions

    status ->  The status of the narrative - whether it's entirely generated (from just the defined data or the extensions too), or whether a human authored it and it may contain additional data. 
    div ->  The actual narrative content, a stripped down version of XHTML.

    
    '''
    

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR Narrative __new__
        '''
        if json == None:
            return None
        else:
            return super(Narrative, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR Narrative constructor
        '''
        logging.info("FHIR Narrative: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.status = self.__add('status')
        self.div = self.__add('div')


        # Parent Resource Init
        super(Narrative, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.status:
            self.__json['status'] = self.status
        if self.div:
            self.__json['div'] = self.div


        return self.__json
        
    def __repr__(self):
        '''
        FHIR Narrative string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class Coding(Element):
    '''
    FHIR Coding resource

     A reference to a code defined by a terminology system. If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions

    system ->  The identification of the code system that defines the meaning of the symbol in the code.
    version ->  The version of the code system which was used when choosing this code. Note that a well-maintained code system does not need the version reported, because the meaning of codes is consistent across versions. However this cannot consistently be assured. and when the meaning is not guaranteed to be consistent, the version SHOULD be exchanged.
    code ->  A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).
    display ->  A representation of the meaning of the code in the system, following the rules of the system.
    userSelected ->  Indicates that this coding was chosen by a user directly - i.e. off a pick list of available items (codes or displays).

    
    '''
    

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR Coding __new__
        '''
        if json == None:
            return None
        else:
            return super(Coding, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR Coding constructor
        '''
        logging.info("FHIR Coding: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.system = self.__add('system')
        self.version = self.__add('version')
        self.code = self.__add('code')
        self.display = self.__add('display')
        self.userSelected = Boolean(self.__add('userSelected'))


        # Parent Resource Init
        super(Coding, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.system:
            self.__json['system'] = self.system
        if self.version:
            self.__json['version'] = self.version
        if self.code:
            self.__json['code'] = self.code
        if self.display:
            self.__json['display'] = self.display
        if self.userSelected:
            self.__json['userSelected'] = self.userSelected.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR Coding string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class Range(Element):
    '''
    FHIR Range resource

     A set of ordered Quantities defined by a low and high limit. If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions

    low ->  The low limit. The boundary is inclusive.
    high ->  The high limit. The boundary is inclusive.

    
    '''
    

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR Range __new__
        '''
        if json == None:
            return None
        else:
            return super(Range, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR Range constructor
        '''
        logging.info("FHIR Range: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.low = SimpleQuantity(self.__add('low'))
        self.high = SimpleQuantity(self.__add('high'))


        # Parent Resource Init
        super(Range, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.low:
            self.__json['low'] = self.low.json
        if self.high:
            self.__json['high'] = self.high.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR Range string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class Quantity(Element):
    '''
    FHIR Quantity resource

     A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies. If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions

    value ->  The value of the measured amount. The value includes an implicit precision in the presentation of the value.
    comparator ->  How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is "<" , then the real value is < stated value. 
    unit ->  A human-readable form of the unit.
    system ->  The identification of the system that provides the coded form of the unit.
    code ->  A computer processable form of the unit in some unit representation system.

    
    '''
    

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR Quantity __new__
        '''
        if json == None:
            return None
        else:
            return super(Quantity, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR Quantity constructor
        '''
        logging.info("FHIR Quantity: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.value = self.__add('value')
        self.comparator = self.__add('comparator')
        self.unit = self.__add('unit')
        self.system = self.__add('system')
        self.code = self.__add('code')


        # Parent Resource Init
        super(Quantity, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.value:
            self.__json['value'] = self.value
        if self.comparator:
            self.__json['comparator'] = self.comparator
        if self.unit:
            self.__json['unit'] = self.unit
        if self.system:
            self.__json['system'] = self.system
        if self.code:
            self.__json['code'] = self.code


        return self.__json
        
    def __repr__(self):
        '''
        FHIR Quantity string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class Attachment(Element):
    '''
    FHIR Attachment resource

     For referring to data content defined in other formats. If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions

    contentType ->  Identifies the type of the data in the attachment and allows a method to be chosen to interpret or render the data. Includes mime type parameters such as charset where appropriate.
    language ->  The human language of the content. The value can be any valid value according to BCP 47.
    data ->  The actual data of the attachment - a sequence of bytes. In XML, represented using base64.
    url ->  An alternative location where the data can be accessed.
    size ->  The number of bytes of data that make up this attachment.
    hash ->  The calculated hash of the data using SHA-1. Represented using base64.
    title ->  A label or set of text to display in place of the data.
    creation ->  The date that the attachment was first created.

    
    '''
    

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR Attachment __new__
        '''
        if json == None:
            return None
        else:
            return super(Attachment, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR Attachment constructor
        '''
        logging.info("FHIR Attachment: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.contentType = self.__add('contentType')
        self.language = self.__add('language')
        self.data = self.__add('data')
        self.url = self.__add('url')
        self.size = self.__add('size')
        self.hash = self.__add('hash')
        self.title = self.__add('title')
        self.creation = DateTime(self.__add('creation'))


        # Parent Resource Init
        super(Attachment, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.contentType:
            self.__json['contentType'] = self.contentType
        if self.language:
            self.__json['language'] = self.language
        if self.data:
            self.__json['data'] = self.data
        if self.url:
            self.__json['url'] = self.url
        if self.size:
            self.__json['size'] = self.size
        if self.hash:
            self.__json['hash'] = self.hash
        if self.title:
            self.__json['title'] = self.title
        if self.creation:
            self.__json['creation'] = self.creation.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR Attachment string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class Ratio(Element):
    '''
    FHIR Ratio resource

     A relationship of two Quantity values - expressed as a numerator and a denominator. If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions

    numerator ->  The value of the numerator.
    denominator ->  The value of the denominator.

    
    '''
    

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR Ratio __new__
        '''
        if json == None:
            return None
        else:
            return super(Ratio, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR Ratio constructor
        '''
        logging.info("FHIR Ratio: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.numerator = Quantity(self.__add('numerator'))
        self.denominator = Quantity(self.__add('denominator'))


        # Parent Resource Init
        super(Ratio, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.numerator:
            self.__json['numerator'] = self.numerator.json
        if self.denominator:
            self.__json['denominator'] = self.denominator.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR Ratio string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class Annotation(Element):
    '''
    FHIR Annotation resource

     A  text note which also  contains information about who made the statement and when. If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions

    time ->  Indicates when this particular annotation was made.
    text ->  The text of the annotation.
    authorReference ->  The individual responsible for making the annotation.
    authorString ->  The individual responsible for making the annotation.

    
    '''
    

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR Annotation __new__
        '''
        if json == None:
            return None
        else:
            return super(Annotation, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR Annotation constructor
        '''
        logging.info("FHIR Annotation: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.time = DateTime(self.__add('time'))
        self.text = self.__add('text')
        self.authorReference = Reference(self.__add('authorReference'))
        self.authorString = self.__add('authorString')


        # Parent Resource Init
        super(Annotation, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.time:
            self.__json['time'] = self.time.json
        if self.text:
            self.__json['text'] = self.text
        if self.authorReference:
            self.__json['authorReference'] = self.authorReference.json
        if self.authorString:
            self.__json['authorString'] = self.authorString


        return self.__json
        
    def __repr__(self):
        '''
        FHIR Annotation string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class SampledData(Element):
    '''
    FHIR SampledData resource

     A series of measurements taken by a device, with upper and lower limits. There may be more than one dimension in the data. If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions

    origin ->  The base quantity that a measured value of zero represents. In addition, this provides the units of the entire measurement series.
    period ->  The length of time between sampling times, measured in milliseconds.
    factor ->  A correction factor that is applied to the sampled data points before they are added to the origin.
    lowerLimit ->  The lower limit of detection of the measured points. This is needed if any of the data points have the value "L" (lower than detection limit).
    upperLimit ->  The upper limit of detection of the measured points. This is needed if any of the data points have the value "U" (higher than detection limit).
    dimensions ->  The number of sample points at each time point. If this value is greater than one, then the dimensions will be interlaced - all the sample points for a point in time will be recorded at once.
    data ->  A series of data points which are decimal values separated by a single space (character u20). The special values "E" (error), "L" (below detection limit) and "U" (above detection limit) can also be used in place of a decimal value.

    
    '''
    

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR SampledData __new__
        '''
        if json == None:
            return None
        else:
            return super(SampledData, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR SampledData constructor
        '''
        logging.info("FHIR SampledData: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.origin = SimpleQuantity(self.__add('origin'))
        self.period = self.__add('period')
        self.factor = self.__add('factor')
        self.lowerLimit = self.__add('lowerLimit')
        self.upperLimit = self.__add('upperLimit')
        self.dimensions = self.__add('dimensions')
        self.data = SampledDataDataType(self.__add('data'))


        # Parent Resource Init
        super(SampledData, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.origin:
            self.__json['origin'] = self.origin.json
        if self.period:
            self.__json['period'] = self.period
        if self.factor:
            self.__json['factor'] = self.factor
        if self.lowerLimit:
            self.__json['lowerLimit'] = self.lowerLimit
        if self.upperLimit:
            self.__json['upperLimit'] = self.upperLimit
        if self.dimensions:
            self.__json['dimensions'] = self.dimensions
        if self.data:
            self.__json['data'] = self.data.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR SampledData string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class SampledDataDataType(Element):
    '''
    FHIR SampledDataDataType resource

    

    value -> 

    
    '''
    

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR SampledDataDataType __new__
        '''
        if json == None:
            return None
        else:
            return super(SampledDataDataType, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR SampledDataDataType constructor
        '''
        logging.info("FHIR SampledDataDataType: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.value = self.__add('value')


        # Parent Resource Init
        super(SampledDataDataType, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.value:
            self.__json['value'] = self.value


        return self.__json
        
    def __repr__(self):
        '''
        FHIR SampledDataDataType string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class Reference(Element):
    '''
    FHIR Reference resource

     A reference from one resource to another. If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions

    reference ->  A reference to a location at which the other resource is found. The reference may be a relative reference, in which case it is relative to the service base URL, or an absolute URL that resolves to the location where the resource is found. The reference may be version specific or not. If the reference is not to a FHIR RESTful server, then it should be assumed to be version specific. Internal fragment references (start with '#') refer to contained resources.
    display ->  Plain text narrative that identifies the resource in addition to the resource reference.

    
    '''
    

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR Reference __new__
        '''
        if json == None:
            return None
        else:
            return super(Reference, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR Reference constructor
        '''
        logging.info("FHIR Reference: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.reference = self.__add('reference')
        self.display = self.__add('display')


        # Parent Resource Init
        super(Reference, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.reference:
            self.__json['reference'] = self.reference
        if self.display:
            self.__json['display'] = self.display


        return self.__json
        
    def __repr__(self):
        '''
        FHIR Reference string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class CodeableConcept(Element):
    '''
    FHIR CodeableConcept resource

     A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text. If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions

    coding ->  A reference to a code defined by a terminology system.
    text ->  A human language representation of the concept as seen/selected/uttered by the user who entered the data and/or which represents the intended meaning of the user.

    
    '''
    

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'coding':
                    list_to_add.append(Coding(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR CodeableConcept __new__
        '''
        if json == None:
            return None
        else:
            return super(CodeableConcept, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR CodeableConcept constructor
        '''
        logging.info("FHIR CodeableConcept: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        if 'coding' in self.__json:
            if isinstance(self.__json['coding'], list):
                self.coding = self.__add_list('coding')
            else:
                self.coding = Coding(self.__add('coding'))
        else:
            self.coding = None
        self.text = self.__add('text')


        # Parent Resource Init
        super(CodeableConcept, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.coding:
            self.__json['coding'] = self.__get_list(self.coding)
        if self.text:
            self.__json['text'] = self.text


        return self.__json
        
    def __repr__(self):
        '''
        FHIR CodeableConcept string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class Identifier(Element):
    '''
    FHIR Identifier resource

     A technical identifier - identifies some entity uniquely and unambiguously. If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions

    use ->  The purpose of this identifier. 
    type ->  A coded type for the identifier that can be used to determine which identifier to use for a specific purpose.
    system ->  Establishes the namespace in which set of possible id values is unique.
    value ->  The portion of the identifier typically relevant to the user and which is unique within the context of the system.
    period ->  Time period during which identifier is/was valid for use.
    assigner ->  Organization that issued/manages the identifier.

    
    '''
    

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR Identifier __new__
        '''
        if json == None:
            return None
        else:
            return super(Identifier, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR Identifier constructor
        '''
        logging.info("FHIR Identifier: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.use = self.__add('use')
        self.type = CodeableConcept(self.__add('type'))
        self.system = self.__add('system')
        self.value = self.__add('value')
        self.period = Period(self.__add('period'))
        self.assigner = Reference(self.__add('assigner'))


        # Parent Resource Init
        super(Identifier, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.use:
            self.__json['use'] = self.use
        if self.type:
            self.__json['type'] = self.type.json
        if self.system:
            self.__json['system'] = self.system
        if self.value:
            self.__json['value'] = self.value
        if self.period:
            self.__json['period'] = self.period.json
        if self.assigner:
            self.__json['assigner'] = self.assigner.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR Identifier string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class Signature(Element):
    '''
    FHIR Signature resource

     A digital signature along with supporting context. The signature may be electronic/cryptographic in nature, or a graphical image representing a hand-written signature, or a signature process. Different Signature approaches have different utilities. If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions

    type ->  An indication of the reason that the entity signed this document. This may be explicitly included as part of the signature information and can be used when determining accountability for various actions concerning the document.
    when ->  When the digital signature was signed.
    contentType ->  A mime type that indicates the technical format of the signature. Important mime types are application/signature+xml for X ML DigSig, application/jwt for JWT, and image/* for a graphical image of a signature, etc.
    blob ->  The base64 encoding of the Signature content. When signature is not recorded electronically this element would be empty.
    whoUri ->  A reference to an application-usable description of the person that signed the certificate (e.g. the signature used their private key).
    whoReference ->  A reference to an application-usable description of the person that signed the certificate (e.g. the signature used their private key).

    
    '''
    

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'type':
                    list_to_add.append(Coding(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR Signature __new__
        '''
        if json == None:
            return None
        else:
            return super(Signature, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR Signature constructor
        '''
        logging.info("FHIR Signature: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        if 'type' in self.__json:
            if isinstance(self.__json['type'], list):
                self.type = self.__add_list('type')
            else:
                self.type = Coding(self.__add('type'))
        else:
            self.type = None
        self.when = self.__add('when')
        self.contentType = self.__add('contentType')
        self.blob = self.__add('blob')
        self.whoUri = self.__add('whoUri')
        self.whoReference = Reference(self.__add('whoReference'))


        # Parent Resource Init
        super(Signature, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.type:
            self.__json['type'] = self.__get_list(self.type)
        if self.when:
            self.__json['when'] = self.when
        if self.contentType:
            self.__json['contentType'] = self.contentType
        if self.blob:
            self.__json['blob'] = self.blob
        if self.whoUri:
            self.__json['whoUri'] = self.whoUri
        if self.whoReference:
            self.__json['whoReference'] = self.whoReference.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR Signature string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class Age(object):
    '''
    FHIR Age resource

    


    
    '''
    

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR Age __new__
        '''
        if json == None:
            return None
        else:
            return super(Age, self).__new__(self)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR Age constructor
        '''
        logging.info("FHIR Age: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None


        # Parent Resource Init
        super(Age, self).__init__()

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType


        return self.__json
        
    def __repr__(self):
        '''
        FHIR Age string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class Count(object):
    '''
    FHIR Count resource

    


    
    '''
    

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR Count __new__
        '''
        if json == None:
            return None
        else:
            return super(Count, self).__new__(self)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR Count constructor
        '''
        logging.info("FHIR Count: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None


        # Parent Resource Init
        super(Count, self).__init__()

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType


        return self.__json
        
    def __repr__(self):
        '''
        FHIR Count string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class Money(object):
    '''
    FHIR Money resource

    


    
    '''
    

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR Money __new__
        '''
        if json == None:
            return None
        else:
            return super(Money, self).__new__(self)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR Money constructor
        '''
        logging.info("FHIR Money: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None


        # Parent Resource Init
        super(Money, self).__init__()

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType


        return self.__json
        
    def __repr__(self):
        '''
        FHIR Money string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class Distance(object):
    '''
    FHIR Distance resource

    


    
    '''
    

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR Distance __new__
        '''
        if json == None:
            return None
        else:
            return super(Distance, self).__new__(self)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR Distance constructor
        '''
        logging.info("FHIR Distance: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None


        # Parent Resource Init
        super(Distance, self).__init__()

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType


        return self.__json
        
    def __repr__(self):
        '''
        FHIR Distance string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class Duration(object):
    '''
    FHIR Duration resource

    


    
    '''
    

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR Duration __new__
        '''
        if json == None:
            return None
        else:
            return super(Duration, self).__new__(self)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR Duration constructor
        '''
        logging.info("FHIR Duration: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None


        # Parent Resource Init
        super(Duration, self).__init__()

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType


        return self.__json
        
    def __repr__(self):
        '''
        FHIR Duration string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class SimpleQuantity(object):
    '''
    FHIR SimpleQuantity resource

    


    
    '''
    

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR SimpleQuantity __new__
        '''
        if json == None:
            return None
        else:
            return super(SimpleQuantity, self).__new__(self)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR SimpleQuantity constructor
        '''
        logging.info("FHIR SimpleQuantity: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None


        # Parent Resource Init
        super(SimpleQuantity, self).__init__()

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType


        return self.__json
        
    def __repr__(self):
        '''
        FHIR SimpleQuantity string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class TriggerDefinition(Element):
    '''
    FHIR TriggerDefinition resource

     A description of a triggering event. If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions

    type ->  The type of triggering event. 
    eventName ->  The name of the event (if this is a named-event trigger).
    eventData ->  The triggering data of the event (if this is a data trigger).
    eventTimingTiming ->  The timing of the event (if this is a period trigger).
    eventTimingReference ->  The timing of the event (if this is a period trigger).
    eventTimingDate ->  The timing of the event (if this is a period trigger).
    eventTimingDateTime ->  The timing of the event (if this is a period trigger).

    
    '''
    

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR TriggerDefinition __new__
        '''
        if json == None:
            return None
        else:
            return super(TriggerDefinition, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR TriggerDefinition constructor
        '''
        logging.info("FHIR TriggerDefinition: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.type = self.__add('type')
        self.eventName = self.__add('eventName')
        self.eventData = DataRequirement(self.__add('eventData'))
        self.eventTimingTiming = Timing(self.__add('eventTimingTiming'))
        self.eventTimingReference = Reference(self.__add('eventTimingReference'))
        self.eventTimingDate = Date(self.__add('eventTimingDate'))
        self.eventTimingDateTime = DateTime(self.__add('eventTimingDateTime'))


        # Parent Resource Init
        super(TriggerDefinition, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.type:
            self.__json['type'] = self.type
        if self.eventName:
            self.__json['eventName'] = self.eventName
        if self.eventData:
            self.__json['eventData'] = self.eventData.json
        if self.eventTimingTiming:
            self.__json['eventTimingTiming'] = self.eventTimingTiming.json
        if self.eventTimingReference:
            self.__json['eventTimingReference'] = self.eventTimingReference.json
        if self.eventTimingDate:
            self.__json['eventTimingDate'] = self.eventTimingDate.json
        if self.eventTimingDateTime:
            self.__json['eventTimingDateTime'] = self.eventTimingDateTime.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR TriggerDefinition string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ElementDefinitionSlicingComponent(BackboneElement):
    '''
    FHIR ElementDefinitionSlicingComponent resource

     Indicates that the element is sliced into a set of alternative definitions (i.e. in a structure definition, there are multiple different constraints on a single element in the base resource). Slicing can be used in any resource that has cardinality ..* on the base resource, or any resource with a choice of types. The set of slices is any elements that come after this in the element sequence that have the same path, until a shorter path occurs (the shorter path terminates the set).

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ElementDefinitionSlicingComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ElementDefinitionSlicingComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ElementDefinitionSlicingComponent constructor
        '''
        logging.info("FHIR ElementDefinitionSlicingComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        if 'discriminator' in self.__json:
            if isinstance(self.__json['discriminator'], list):
                self.discriminator = self.__add_list('discriminator')
            else:
                self.discriminator = self.__add('discriminator')
        else:
            self.discriminator = None
        self.description = self.__add('description')
        self.ordered = Boolean(self.__add('ordered'))
        self.rules = self.__add('rules')



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.discriminator:
            self.__json['discriminator'] = self.__get_list(self.discriminator)
        if self.description:
            self.__json['description'] = self.description
        if self.ordered:
            self.__json['ordered'] = self.ordered.json
        if self.rules:
            self.__json['rules'] = self.rules


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ElementDefinitionSlicingComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ElementDefinitionBaseComponent(BackboneElement):
    '''
    FHIR ElementDefinitionBaseComponent resource

     Information about the base definition of the element, provided to make it unnecessary for tools to trace the deviation of the element through the derived and related profiles. This information is only provided where the element definition represents a constraint on another element definition, and must be present if there is a base element definition.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ElementDefinitionBaseComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ElementDefinitionBaseComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ElementDefinitionBaseComponent constructor
        '''
        logging.info("FHIR ElementDefinitionBaseComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.path = self.__add('path')
        self.min = self.__add('min')
        self.max = self.__add('max')



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.path:
            self.__json['path'] = self.path
        if self.min:
            self.__json['min'] = self.min
        if self.max:
            self.__json['max'] = self.max


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ElementDefinitionBaseComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ElementDefinitionTypeComponent(BackboneElement):
    '''
    FHIR ElementDefinitionTypeComponent resource

     The data type or resource that the value of this element is permitted to be.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ElementDefinitionTypeComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ElementDefinitionTypeComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ElementDefinitionTypeComponent constructor
        '''
        logging.info("FHIR ElementDefinitionTypeComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.code = self.__add('code')
        if 'profile' in self.__json:
            if isinstance(self.__json['profile'], list):
                self.profile = self.__add_list('profile')
            else:
                self.profile = self.__add('profile')
        else:
            self.profile = None
        if 'aggregation' in self.__json:
            if isinstance(self.__json['aggregation'], list):
                self.aggregation = self.__add_list('aggregation')
            else:
                self.aggregation = self.__add('aggregation')
        else:
            self.aggregation = None
        self.versioning = self.__add('versioning')



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.code:
            self.__json['code'] = self.code
        if self.profile:
            self.__json['profile'] = self.__get_list(self.profile)
        if self.aggregation:
            self.__json['aggregation'] = self.__get_list(self.aggregation)
        if self.versioning:
            self.__json['versioning'] = self.versioning


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ElementDefinitionTypeComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ElementDefinitionConstraintComponent(BackboneElement):
    '''
    FHIR ElementDefinitionConstraintComponent resource

     Formal constraints such as co-occurrence and other constraints that can be computationally evaluated within the context of the instance.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ElementDefinitionConstraintComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ElementDefinitionConstraintComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ElementDefinitionConstraintComponent constructor
        '''
        logging.info("FHIR ElementDefinitionConstraintComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.key = self.__add('key')
        self.requirements = self.__add('requirements')
        self.severity = self.__add('severity')
        self.human = self.__add('human')
        self.expression = self.__add('expression')
        self.xpath = self.__add('xpath')



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.key:
            self.__json['key'] = self.key
        if self.requirements:
            self.__json['requirements'] = self.requirements
        if self.severity:
            self.__json['severity'] = self.severity
        if self.human:
            self.__json['human'] = self.human
        if self.expression:
            self.__json['expression'] = self.expression
        if self.xpath:
            self.__json['xpath'] = self.xpath


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ElementDefinitionConstraintComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ElementDefinitionBindingComponent(BackboneElement):
    '''
    FHIR ElementDefinitionBindingComponent resource

     Binds to a value set if this element is coded (code, Coding, CodeableConcept).

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ElementDefinitionBindingComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ElementDefinitionBindingComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ElementDefinitionBindingComponent constructor
        '''
        logging.info("FHIR ElementDefinitionBindingComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.strength = self.__add('strength')
        self.description = self.__add('description')
        self.valueSetUri = self.__add('valueSetUri')
        self.valueSetReference = Reference(self.__add('valueSetReference'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.strength:
            self.__json['strength'] = self.strength
        if self.description:
            self.__json['description'] = self.description
        if self.valueSetUri:
            self.__json['valueSetUri'] = self.valueSetUri
        if self.valueSetReference:
            self.__json['valueSetReference'] = self.valueSetReference.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ElementDefinitionBindingComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ElementDefinitionMappingComponent(BackboneElement):
    '''
    FHIR ElementDefinitionMappingComponent resource

     Identifies a concept from an external specification that roughly corresponds to this element.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ElementDefinitionMappingComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ElementDefinitionMappingComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ElementDefinitionMappingComponent constructor
        '''
        logging.info("FHIR ElementDefinitionMappingComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.identity = self.__add('identity')
        self.language = self.__add('language')
        self.map = self.__add('map')



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identity:
            self.__json['identity'] = self.identity
        if self.language:
            self.__json['language'] = self.language
        if self.map:
            self.__json['map'] = self.map


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ElementDefinitionMappingComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ElementDefinition(Element):
    '''
    FHIR ElementDefinition resource

     Captures constraints on each element within the resource, profile, or extension. If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions

    path ->  The path identifies the element and is expressed as a "."-separated list of ancestor elements, beginning with the name of the resource or extension.
    representation ->  Codes that define how this element is represented in instances, when the deviation varies from the normal case. 
    name ->  The name of this element definition. This is a unique name referring to a specific set of constraints applied to this element, used to provide a name to different slices of the same element.
    label ->  The text to display beside the element indicating its meaning or to use to prompt for the element in a user display or form.
    code ->  A code that provides the meaning for the element according to a particular terminology.
    slicing ->  Indicates that the element is sliced into a set of alternative definitions (i.e. in a structure definition, there are multiple different constraints on a single element in the base resource). Slicing can be used in any resource that has cardinality ..* on the base resource, or any resource with a choice of types. The set of slices is any elements that come after this in the element sequence that have the same path, until a shorter path occurs (the shorter path terminates the set).
    short ->  A concise description of what this element means (e.g. for use in autogenerated summaries).
    definition ->  Provides a complete explanation of the meaning of the data element for human readability.  For the case of elements derived from existing elements (e.g. constraints), the definition SHALL be consistent with the base definition, but convey the meaning of the element in the particular context of use of the resource.
    comments ->  Explanatory notes and implementation guidance about the data element, including notes about how to use the data properly, exceptions to proper use, etc.
    requirements ->  This element is for traceability of why the element was created and why the constraints exist as they do. This may be used to point to source materials or specifications that drove the structure of this element.
    alias ->  Identifies additional names by which this element might also be known.
    min ->  The minimum number of times this element SHALL appear in the instance.
    max ->  The maximum number of times this element is permitted to appear in the instance.
    base ->  Information about the base definition of the element, provided to make it unnecessary for tools to trace the deviation of the element through the derived and related profiles. This information is only provided where the element definition represents a constraint on another element definition, and must be present if there is a base element definition.
    contentReference ->  Identifies the identity of an element defined elsewhere in the profile whose content rules should be applied to the current element.
    type ->  The data type or resource that the value of this element is permitted to be.
    meaningWhenMissing ->  The Implicit meaning that is to be understood when this element is missing (e.g. 'when this element is missing, the period is ongoing'.
    maxLength ->  Indicates the maximum length in characters that is permitted to be present in conformant instances and which is expected to be supported by conformant consumers that support the element.
    condition ->  A reference to an invariant that may make additional statements about the cardinality or value in the instance.
    constraint ->  Formal constraints such as co-occurrence and other constraints that can be computationally evaluated within the context of the instance.
    mustSupport ->  If true, implementations that produce or consume resources SHALL provide "support" for the element in some meaningful way.  If false, the element may be ignored and not supported.
    isModifier ->  If true, the value of this element affects the interpretation of the element or resource that contains it, and the value of the element cannot be ignored. Typically, this is used for status, negation and qualification codes. The effect of this is that the element cannot be ignored by systems: they SHALL either recognize the element and process it, and/or a pre-determination has been made that it is not relevant to their particular system.
    isSummary ->  Whether the element should be included if a client requests a search with the parameter _summary=true.
    binding ->  Binds to a value set if this element is coded (code, Coding, CodeableConcept).
    mapping ->  Identifies a concept from an external specification that roughly corresponds to this element.
    defaultValueBoolean ->  The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    defaultValueInteger ->  The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    defaultValueDecimal ->  The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    defaultValueBase64Binary ->  The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    defaultValueInstant ->  The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    defaultValueString ->  The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    defaultValueUri ->  The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    defaultValueDate ->  The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    defaultValueDateTime ->  The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    defaultValueTime ->  The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    defaultValueCode ->  The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    defaultValueOid ->  The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    defaultValueUuid ->  The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    defaultValueId ->  The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    defaultValueUnsignedInt ->  The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    defaultValuePositiveInt ->  The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    defaultValueMarkdown ->  The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    defaultValueAnnotation ->  The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    defaultValueAttachment ->  The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    defaultValueIdentifier ->  The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    defaultValueCodeableConcept ->  The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    defaultValueCoding ->  The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    defaultValueQuantity ->  The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    defaultValueRange ->  The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    defaultValuePeriod ->  The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    defaultValueRatio ->  The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    defaultValueReference ->  The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    defaultValueSampledData ->  The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    defaultValueSignature ->  The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    defaultValueHumanName ->  The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    defaultValueAddress ->  The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    defaultValueContactPoint ->  The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    defaultValueTiming ->  The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    defaultValueMeta ->  The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    fixedBoolean ->  Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    fixedInteger ->  Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    fixedDecimal ->  Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    fixedBase64Binary ->  Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    fixedInstant ->  Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    fixedString ->  Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    fixedUri ->  Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    fixedDate ->  Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    fixedDateTime ->  Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    fixedTime ->  Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    fixedCode ->  Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    fixedOid ->  Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    fixedUuid ->  Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    fixedId ->  Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    fixedUnsignedInt ->  Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    fixedPositiveInt ->  Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    fixedMarkdown ->  Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    fixedAnnotation ->  Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    fixedAttachment ->  Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    fixedIdentifier ->  Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    fixedCodeableConcept ->  Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    fixedCoding ->  Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    fixedQuantity ->  Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    fixedRange ->  Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    fixedPeriod ->  Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    fixedRatio ->  Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    fixedReference ->  Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    fixedSampledData ->  Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    fixedSignature ->  Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    fixedHumanName ->  Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    fixedAddress ->  Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    fixedContactPoint ->  Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    fixedTiming ->  Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    fixedMeta ->  Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    patternBoolean ->  Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
    patternInteger ->  Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
    patternDecimal ->  Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
    patternBase64Binary ->  Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
    patternInstant ->  Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
    patternString ->  Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
    patternUri ->  Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
    patternDate ->  Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
    patternDateTime ->  Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
    patternTime ->  Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
    patternCode ->  Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
    patternOid ->  Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
    patternUuid ->  Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
    patternId ->  Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
    patternUnsignedInt ->  Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
    patternPositiveInt ->  Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
    patternMarkdown ->  Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
    patternAnnotation ->  Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
    patternAttachment ->  Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
    patternIdentifier ->  Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
    patternCodeableConcept ->  Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
    patternCoding ->  Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
    patternQuantity ->  Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
    patternRange ->  Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
    patternPeriod ->  Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
    patternRatio ->  Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
    patternReference ->  Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
    patternSampledData ->  Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
    patternSignature ->  Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
    patternHumanName ->  Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
    patternAddress ->  Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
    patternContactPoint ->  Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
    patternTiming ->  Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
    patternMeta ->  Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
    exampleBoolean ->  A sample value for this element demonstrating the type of information that would typically be captured.
    exampleInteger ->  A sample value for this element demonstrating the type of information that would typically be captured.
    exampleDecimal ->  A sample value for this element demonstrating the type of information that would typically be captured.
    exampleBase64Binary ->  A sample value for this element demonstrating the type of information that would typically be captured.
    exampleInstant ->  A sample value for this element demonstrating the type of information that would typically be captured.
    exampleString ->  A sample value for this element demonstrating the type of information that would typically be captured.
    exampleUri ->  A sample value for this element demonstrating the type of information that would typically be captured.
    exampleDate ->  A sample value for this element demonstrating the type of information that would typically be captured.
    exampleDateTime ->  A sample value for this element demonstrating the type of information that would typically be captured.
    exampleTime ->  A sample value for this element demonstrating the type of information that would typically be captured.
    exampleCode ->  A sample value for this element demonstrating the type of information that would typically be captured.
    exampleOid ->  A sample value for this element demonstrating the type of information that would typically be captured.
    exampleUuid ->  A sample value for this element demonstrating the type of information that would typically be captured.
    exampleId ->  A sample value for this element demonstrating the type of information that would typically be captured.
    exampleUnsignedInt ->  A sample value for this element demonstrating the type of information that would typically be captured.
    examplePositiveInt ->  A sample value for this element demonstrating the type of information that would typically be captured.
    exampleMarkdown ->  A sample value for this element demonstrating the type of information that would typically be captured.
    exampleAnnotation ->  A sample value for this element demonstrating the type of information that would typically be captured.
    exampleAttachment ->  A sample value for this element demonstrating the type of information that would typically be captured.
    exampleIdentifier ->  A sample value for this element demonstrating the type of information that would typically be captured.
    exampleCodeableConcept ->  A sample value for this element demonstrating the type of information that would typically be captured.
    exampleCoding ->  A sample value for this element demonstrating the type of information that would typically be captured.
    exampleQuantity ->  A sample value for this element demonstrating the type of information that would typically be captured.
    exampleRange ->  A sample value for this element demonstrating the type of information that would typically be captured.
    examplePeriod ->  A sample value for this element demonstrating the type of information that would typically be captured.
    exampleRatio ->  A sample value for this element demonstrating the type of information that would typically be captured.
    exampleReference ->  A sample value for this element demonstrating the type of information that would typically be captured.
    exampleSampledData ->  A sample value for this element demonstrating the type of information that would typically be captured.
    exampleSignature ->  A sample value for this element demonstrating the type of information that would typically be captured.
    exampleHumanName ->  A sample value for this element demonstrating the type of information that would typically be captured.
    exampleAddress ->  A sample value for this element demonstrating the type of information that would typically be captured.
    exampleContactPoint ->  A sample value for this element demonstrating the type of information that would typically be captured.
    exampleTiming ->  A sample value for this element demonstrating the type of information that would typically be captured.
    exampleMeta ->  A sample value for this element demonstrating the type of information that would typically be captured.
    minValueBoolean ->  The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    minValueInteger ->  The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    minValueDecimal ->  The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    minValueBase64Binary ->  The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    minValueInstant ->  The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    minValueString ->  The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    minValueUri ->  The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    minValueDate ->  The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    minValueDateTime ->  The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    minValueTime ->  The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    minValueCode ->  The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    minValueOid ->  The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    minValueUuid ->  The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    minValueId ->  The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    minValueUnsignedInt ->  The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    minValuePositiveInt ->  The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    minValueMarkdown ->  The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    minValueAnnotation ->  The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    minValueAttachment ->  The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    minValueIdentifier ->  The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    minValueCodeableConcept ->  The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    minValueCoding ->  The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    minValueQuantity ->  The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    minValueRange ->  The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    minValuePeriod ->  The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    minValueRatio ->  The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    minValueReference ->  The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    minValueSampledData ->  The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    minValueSignature ->  The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    minValueHumanName ->  The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    minValueAddress ->  The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    minValueContactPoint ->  The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    minValueTiming ->  The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    minValueMeta ->  The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    maxValueBoolean ->  The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    maxValueInteger ->  The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    maxValueDecimal ->  The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    maxValueBase64Binary ->  The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    maxValueInstant ->  The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    maxValueString ->  The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    maxValueUri ->  The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    maxValueDate ->  The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    maxValueDateTime ->  The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    maxValueTime ->  The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    maxValueCode ->  The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    maxValueOid ->  The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    maxValueUuid ->  The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    maxValueId ->  The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    maxValueUnsignedInt ->  The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    maxValuePositiveInt ->  The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    maxValueMarkdown ->  The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    maxValueAnnotation ->  The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    maxValueAttachment ->  The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    maxValueIdentifier ->  The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    maxValueCodeableConcept ->  The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    maxValueCoding ->  The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    maxValueQuantity ->  The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    maxValueRange ->  The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    maxValuePeriod ->  The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    maxValueRatio ->  The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    maxValueReference ->  The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    maxValueSampledData ->  The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    maxValueSignature ->  The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    maxValueHumanName ->  The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    maxValueAddress ->  The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    maxValueContactPoint ->  The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    maxValueTiming ->  The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    maxValueMeta ->  The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.

    
    '''
    

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'code':
                    list_to_add.append(Coding(obj))
                elif key == 'type':
                    list_to_add.append(ElementDefinitionTypeComponent(obj))
                elif key == 'constraint':
                    list_to_add.append(ElementDefinitionConstraintComponent(obj))
                elif key == 'mapping':
                    list_to_add.append(ElementDefinitionMappingComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ElementDefinition __new__
        '''
        if json == None:
            return None
        else:
            return super(ElementDefinition, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ElementDefinition constructor
        '''
        logging.info("FHIR ElementDefinition: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.path = self.__add('path')
        if 'representation' in self.__json:
            if isinstance(self.__json['representation'], list):
                self.representation = self.__add_list('representation')
            else:
                self.representation = self.__add('representation')
        else:
            self.representation = None
        self.name = self.__add('name')
        self.label = self.__add('label')
        if 'code' in self.__json:
            if isinstance(self.__json['code'], list):
                self.code = self.__add_list('code')
            else:
                self.code = Coding(self.__add('code'))
        else:
            self.code = None
        self.slicing = ElementDefinitionSlicingComponent(self.__add('slicing'))
        self.short = self.__add('short')
        self.definition = self.__add('definition')
        self.comments = self.__add('comments')
        self.requirements = self.__add('requirements')
        if 'alias' in self.__json:
            if isinstance(self.__json['alias'], list):
                self.alias = self.__add_list('alias')
            else:
                self.alias = self.__add('alias')
        else:
            self.alias = None
        self.min = self.__add('min')
        self.max = self.__add('max')
        self.base = ElementDefinitionBaseComponent(self.__add('base'))
        self.contentReference = self.__add('contentReference')
        if 'type' in self.__json:
            if isinstance(self.__json['type'], list):
                self.type = self.__add_list('type')
            else:
                self.type = ElementDefinitionTypeComponent(self.__add('type'))
        else:
            self.type = None
        self.meaningWhenMissing = self.__add('meaningWhenMissing')
        self.maxLength = self.__add('maxLength')
        if 'condition' in self.__json:
            if isinstance(self.__json['condition'], list):
                self.condition = self.__add_list('condition')
            else:
                self.condition = self.__add('condition')
        else:
            self.condition = None
        if 'constraint' in self.__json:
            if isinstance(self.__json['constraint'], list):
                self.constraint = self.__add_list('constraint')
            else:
                self.constraint = ElementDefinitionConstraintComponent(self.__add('constraint'))
        else:
            self.constraint = None
        self.mustSupport = Boolean(self.__add('mustSupport'))
        self.isModifier = Boolean(self.__add('isModifier'))
        self.isSummary = Boolean(self.__add('isSummary'))
        self.binding = ElementDefinitionBindingComponent(self.__add('binding'))
        if 'mapping' in self.__json:
            if isinstance(self.__json['mapping'], list):
                self.mapping = self.__add_list('mapping')
            else:
                self.mapping = ElementDefinitionMappingComponent(self.__add('mapping'))
        else:
            self.mapping = None
        self.defaultValueBoolean = Boolean(self.__add('defaultValueBoolean'))
        self.defaultValueInteger = self.__add('defaultValueInteger')
        self.defaultValueDecimal = self.__add('defaultValueDecimal')
        self.defaultValueBase64Binary = self.__add('defaultValueBase64Binary')
        self.defaultValueInstant = self.__add('defaultValueInstant')
        self.defaultValueString = self.__add('defaultValueString')
        self.defaultValueUri = self.__add('defaultValueUri')
        self.defaultValueDate = Date(self.__add('defaultValueDate'))
        self.defaultValueDateTime = DateTime(self.__add('defaultValueDateTime'))
        self.defaultValueTime = Time(self.__add('defaultValueTime'))
        self.defaultValueCode = self.__add('defaultValueCode')
        self.defaultValueOid = self.__add('defaultValueOid')
        self.defaultValueUuid = self.__add('defaultValueUuid')
        self.defaultValueId = self.__add('defaultValueId')
        self.defaultValueUnsignedInt = self.__add('defaultValueUnsignedInt')
        self.defaultValuePositiveInt = self.__add('defaultValuePositiveInt')
        self.defaultValueMarkdown = self.__add('defaultValueMarkdown')
        self.defaultValueAnnotation = Annotation(self.__add('defaultValueAnnotation'))
        self.defaultValueAttachment = Attachment(self.__add('defaultValueAttachment'))
        self.defaultValueIdentifier = Identifier(self.__add('defaultValueIdentifier'))
        self.defaultValueCodeableConcept = CodeableConcept(self.__add('defaultValueCodeableConcept'))
        self.defaultValueCoding = Coding(self.__add('defaultValueCoding'))
        self.defaultValueQuantity = Quantity(self.__add('defaultValueQuantity'))
        self.defaultValueRange = Range(self.__add('defaultValueRange'))
        self.defaultValuePeriod = Period(self.__add('defaultValuePeriod'))
        self.defaultValueRatio = Ratio(self.__add('defaultValueRatio'))
        self.defaultValueReference = Reference(self.__add('defaultValueReference'))
        self.defaultValueSampledData = SampledData(self.__add('defaultValueSampledData'))
        self.defaultValueSignature = Signature(self.__add('defaultValueSignature'))
        self.defaultValueHumanName = HumanName(self.__add('defaultValueHumanName'))
        self.defaultValueAddress = Address(self.__add('defaultValueAddress'))
        self.defaultValueContactPoint = ContactPoint(self.__add('defaultValueContactPoint'))
        self.defaultValueTiming = Timing(self.__add('defaultValueTiming'))
        self.defaultValueMeta = Meta(self.__add('defaultValueMeta'))
        self.fixedBoolean = Boolean(self.__add('fixedBoolean'))
        self.fixedInteger = self.__add('fixedInteger')
        self.fixedDecimal = self.__add('fixedDecimal')
        self.fixedBase64Binary = self.__add('fixedBase64Binary')
        self.fixedInstant = self.__add('fixedInstant')
        self.fixedString = self.__add('fixedString')
        self.fixedUri = self.__add('fixedUri')
        self.fixedDate = Date(self.__add('fixedDate'))
        self.fixedDateTime = DateTime(self.__add('fixedDateTime'))
        self.fixedTime = Time(self.__add('fixedTime'))
        self.fixedCode = self.__add('fixedCode')
        self.fixedOid = self.__add('fixedOid')
        self.fixedUuid = self.__add('fixedUuid')
        self.fixedId = self.__add('fixedId')
        self.fixedUnsignedInt = self.__add('fixedUnsignedInt')
        self.fixedPositiveInt = self.__add('fixedPositiveInt')
        self.fixedMarkdown = self.__add('fixedMarkdown')
        self.fixedAnnotation = Annotation(self.__add('fixedAnnotation'))
        self.fixedAttachment = Attachment(self.__add('fixedAttachment'))
        self.fixedIdentifier = Identifier(self.__add('fixedIdentifier'))
        self.fixedCodeableConcept = CodeableConcept(self.__add('fixedCodeableConcept'))
        self.fixedCoding = Coding(self.__add('fixedCoding'))
        self.fixedQuantity = Quantity(self.__add('fixedQuantity'))
        self.fixedRange = Range(self.__add('fixedRange'))
        self.fixedPeriod = Period(self.__add('fixedPeriod'))
        self.fixedRatio = Ratio(self.__add('fixedRatio'))
        self.fixedReference = Reference(self.__add('fixedReference'))
        self.fixedSampledData = SampledData(self.__add('fixedSampledData'))
        self.fixedSignature = Signature(self.__add('fixedSignature'))
        self.fixedHumanName = HumanName(self.__add('fixedHumanName'))
        self.fixedAddress = Address(self.__add('fixedAddress'))
        self.fixedContactPoint = ContactPoint(self.__add('fixedContactPoint'))
        self.fixedTiming = Timing(self.__add('fixedTiming'))
        self.fixedMeta = Meta(self.__add('fixedMeta'))
        self.patternBoolean = Boolean(self.__add('patternBoolean'))
        self.patternInteger = self.__add('patternInteger')
        self.patternDecimal = self.__add('patternDecimal')
        self.patternBase64Binary = self.__add('patternBase64Binary')
        self.patternInstant = self.__add('patternInstant')
        self.patternString = self.__add('patternString')
        self.patternUri = self.__add('patternUri')
        self.patternDate = Date(self.__add('patternDate'))
        self.patternDateTime = DateTime(self.__add('patternDateTime'))
        self.patternTime = Time(self.__add('patternTime'))
        self.patternCode = self.__add('patternCode')
        self.patternOid = self.__add('patternOid')
        self.patternUuid = self.__add('patternUuid')
        self.patternId = self.__add('patternId')
        self.patternUnsignedInt = self.__add('patternUnsignedInt')
        self.patternPositiveInt = self.__add('patternPositiveInt')
        self.patternMarkdown = self.__add('patternMarkdown')
        self.patternAnnotation = Annotation(self.__add('patternAnnotation'))
        self.patternAttachment = Attachment(self.__add('patternAttachment'))
        self.patternIdentifier = Identifier(self.__add('patternIdentifier'))
        self.patternCodeableConcept = CodeableConcept(self.__add('patternCodeableConcept'))
        self.patternCoding = Coding(self.__add('patternCoding'))
        self.patternQuantity = Quantity(self.__add('patternQuantity'))
        self.patternRange = Range(self.__add('patternRange'))
        self.patternPeriod = Period(self.__add('patternPeriod'))
        self.patternRatio = Ratio(self.__add('patternRatio'))
        self.patternReference = Reference(self.__add('patternReference'))
        self.patternSampledData = SampledData(self.__add('patternSampledData'))
        self.patternSignature = Signature(self.__add('patternSignature'))
        self.patternHumanName = HumanName(self.__add('patternHumanName'))
        self.patternAddress = Address(self.__add('patternAddress'))
        self.patternContactPoint = ContactPoint(self.__add('patternContactPoint'))
        self.patternTiming = Timing(self.__add('patternTiming'))
        self.patternMeta = Meta(self.__add('patternMeta'))
        self.exampleBoolean = Boolean(self.__add('exampleBoolean'))
        self.exampleInteger = self.__add('exampleInteger')
        self.exampleDecimal = self.__add('exampleDecimal')
        self.exampleBase64Binary = self.__add('exampleBase64Binary')
        self.exampleInstant = self.__add('exampleInstant')
        self.exampleString = self.__add('exampleString')
        self.exampleUri = self.__add('exampleUri')
        self.exampleDate = Date(self.__add('exampleDate'))
        self.exampleDateTime = DateTime(self.__add('exampleDateTime'))
        self.exampleTime = Time(self.__add('exampleTime'))
        self.exampleCode = self.__add('exampleCode')
        self.exampleOid = self.__add('exampleOid')
        self.exampleUuid = self.__add('exampleUuid')
        self.exampleId = self.__add('exampleId')
        self.exampleUnsignedInt = self.__add('exampleUnsignedInt')
        self.examplePositiveInt = self.__add('examplePositiveInt')
        self.exampleMarkdown = self.__add('exampleMarkdown')
        self.exampleAnnotation = Annotation(self.__add('exampleAnnotation'))
        self.exampleAttachment = Attachment(self.__add('exampleAttachment'))
        self.exampleIdentifier = Identifier(self.__add('exampleIdentifier'))
        self.exampleCodeableConcept = CodeableConcept(self.__add('exampleCodeableConcept'))
        self.exampleCoding = Coding(self.__add('exampleCoding'))
        self.exampleQuantity = Quantity(self.__add('exampleQuantity'))
        self.exampleRange = Range(self.__add('exampleRange'))
        self.examplePeriod = Period(self.__add('examplePeriod'))
        self.exampleRatio = Ratio(self.__add('exampleRatio'))
        self.exampleReference = Reference(self.__add('exampleReference'))
        self.exampleSampledData = SampledData(self.__add('exampleSampledData'))
        self.exampleSignature = Signature(self.__add('exampleSignature'))
        self.exampleHumanName = HumanName(self.__add('exampleHumanName'))
        self.exampleAddress = Address(self.__add('exampleAddress'))
        self.exampleContactPoint = ContactPoint(self.__add('exampleContactPoint'))
        self.exampleTiming = Timing(self.__add('exampleTiming'))
        self.exampleMeta = Meta(self.__add('exampleMeta'))
        self.minValueBoolean = Boolean(self.__add('minValueBoolean'))
        self.minValueInteger = self.__add('minValueInteger')
        self.minValueDecimal = self.__add('minValueDecimal')
        self.minValueBase64Binary = self.__add('minValueBase64Binary')
        self.minValueInstant = self.__add('minValueInstant')
        self.minValueString = self.__add('minValueString')
        self.minValueUri = self.__add('minValueUri')
        self.minValueDate = Date(self.__add('minValueDate'))
        self.minValueDateTime = DateTime(self.__add('minValueDateTime'))
        self.minValueTime = Time(self.__add('minValueTime'))
        self.minValueCode = self.__add('minValueCode')
        self.minValueOid = self.__add('minValueOid')
        self.minValueUuid = self.__add('minValueUuid')
        self.minValueId = self.__add('minValueId')
        self.minValueUnsignedInt = self.__add('minValueUnsignedInt')
        self.minValuePositiveInt = self.__add('minValuePositiveInt')
        self.minValueMarkdown = self.__add('minValueMarkdown')
        self.minValueAnnotation = Annotation(self.__add('minValueAnnotation'))
        self.minValueAttachment = Attachment(self.__add('minValueAttachment'))
        self.minValueIdentifier = Identifier(self.__add('minValueIdentifier'))
        self.minValueCodeableConcept = CodeableConcept(self.__add('minValueCodeableConcept'))
        self.minValueCoding = Coding(self.__add('minValueCoding'))
        self.minValueQuantity = Quantity(self.__add('minValueQuantity'))
        self.minValueRange = Range(self.__add('minValueRange'))
        self.minValuePeriod = Period(self.__add('minValuePeriod'))
        self.minValueRatio = Ratio(self.__add('minValueRatio'))
        self.minValueReference = Reference(self.__add('minValueReference'))
        self.minValueSampledData = SampledData(self.__add('minValueSampledData'))
        self.minValueSignature = Signature(self.__add('minValueSignature'))
        self.minValueHumanName = HumanName(self.__add('minValueHumanName'))
        self.minValueAddress = Address(self.__add('minValueAddress'))
        self.minValueContactPoint = ContactPoint(self.__add('minValueContactPoint'))
        self.minValueTiming = Timing(self.__add('minValueTiming'))
        self.minValueMeta = Meta(self.__add('minValueMeta'))
        self.maxValueBoolean = Boolean(self.__add('maxValueBoolean'))
        self.maxValueInteger = self.__add('maxValueInteger')
        self.maxValueDecimal = self.__add('maxValueDecimal')
        self.maxValueBase64Binary = self.__add('maxValueBase64Binary')
        self.maxValueInstant = self.__add('maxValueInstant')
        self.maxValueString = self.__add('maxValueString')
        self.maxValueUri = self.__add('maxValueUri')
        self.maxValueDate = Date(self.__add('maxValueDate'))
        self.maxValueDateTime = DateTime(self.__add('maxValueDateTime'))
        self.maxValueTime = Time(self.__add('maxValueTime'))
        self.maxValueCode = self.__add('maxValueCode')
        self.maxValueOid = self.__add('maxValueOid')
        self.maxValueUuid = self.__add('maxValueUuid')
        self.maxValueId = self.__add('maxValueId')
        self.maxValueUnsignedInt = self.__add('maxValueUnsignedInt')
        self.maxValuePositiveInt = self.__add('maxValuePositiveInt')
        self.maxValueMarkdown = self.__add('maxValueMarkdown')
        self.maxValueAnnotation = Annotation(self.__add('maxValueAnnotation'))
        self.maxValueAttachment = Attachment(self.__add('maxValueAttachment'))
        self.maxValueIdentifier = Identifier(self.__add('maxValueIdentifier'))
        self.maxValueCodeableConcept = CodeableConcept(self.__add('maxValueCodeableConcept'))
        self.maxValueCoding = Coding(self.__add('maxValueCoding'))
        self.maxValueQuantity = Quantity(self.__add('maxValueQuantity'))
        self.maxValueRange = Range(self.__add('maxValueRange'))
        self.maxValuePeriod = Period(self.__add('maxValuePeriod'))
        self.maxValueRatio = Ratio(self.__add('maxValueRatio'))
        self.maxValueReference = Reference(self.__add('maxValueReference'))
        self.maxValueSampledData = SampledData(self.__add('maxValueSampledData'))
        self.maxValueSignature = Signature(self.__add('maxValueSignature'))
        self.maxValueHumanName = HumanName(self.__add('maxValueHumanName'))
        self.maxValueAddress = Address(self.__add('maxValueAddress'))
        self.maxValueContactPoint = ContactPoint(self.__add('maxValueContactPoint'))
        self.maxValueTiming = Timing(self.__add('maxValueTiming'))
        self.maxValueMeta = Meta(self.__add('maxValueMeta'))


        # Parent Resource Init
        super(ElementDefinition, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.path:
            self.__json['path'] = self.path
        if self.representation:
            self.__json['representation'] = self.__get_list(self.representation)
        if self.name:
            self.__json['name'] = self.name
        if self.label:
            self.__json['label'] = self.label
        if self.code:
            self.__json['code'] = self.__get_list(self.code)
        if self.slicing:
            self.__json['slicing'] = self.slicing.json
        if self.short:
            self.__json['short'] = self.short
        if self.definition:
            self.__json['definition'] = self.definition
        if self.comments:
            self.__json['comments'] = self.comments
        if self.requirements:
            self.__json['requirements'] = self.requirements
        if self.alias:
            self.__json['alias'] = self.__get_list(self.alias)
        if self.min:
            self.__json['min'] = self.min
        if self.max:
            self.__json['max'] = self.max
        if self.base:
            self.__json['base'] = self.base.json
        if self.contentReference:
            self.__json['contentReference'] = self.contentReference
        if self.type:
            self.__json['type'] = self.__get_list(self.type)
        if self.meaningWhenMissing:
            self.__json['meaningWhenMissing'] = self.meaningWhenMissing
        if self.maxLength:
            self.__json['maxLength'] = self.maxLength
        if self.condition:
            self.__json['condition'] = self.__get_list(self.condition)
        if self.constraint:
            self.__json['constraint'] = self.__get_list(self.constraint)
        if self.mustSupport:
            self.__json['mustSupport'] = self.mustSupport.json
        if self.isModifier:
            self.__json['isModifier'] = self.isModifier.json
        if self.isSummary:
            self.__json['isSummary'] = self.isSummary.json
        if self.binding:
            self.__json['binding'] = self.binding.json
        if self.mapping:
            self.__json['mapping'] = self.__get_list(self.mapping)
        if self.defaultValueBoolean:
            self.__json['defaultValueBoolean'] = self.defaultValueBoolean.json
        if self.defaultValueInteger:
            self.__json['defaultValueInteger'] = self.defaultValueInteger
        if self.defaultValueDecimal:
            self.__json['defaultValueDecimal'] = self.defaultValueDecimal
        if self.defaultValueBase64Binary:
            self.__json['defaultValueBase64Binary'] = self.defaultValueBase64Binary
        if self.defaultValueInstant:
            self.__json['defaultValueInstant'] = self.defaultValueInstant
        if self.defaultValueString:
            self.__json['defaultValueString'] = self.defaultValueString
        if self.defaultValueUri:
            self.__json['defaultValueUri'] = self.defaultValueUri
        if self.defaultValueDate:
            self.__json['defaultValueDate'] = self.defaultValueDate.json
        if self.defaultValueDateTime:
            self.__json['defaultValueDateTime'] = self.defaultValueDateTime.json
        if self.defaultValueTime:
            self.__json['defaultValueTime'] = self.defaultValueTime.json
        if self.defaultValueCode:
            self.__json['defaultValueCode'] = self.defaultValueCode
        if self.defaultValueOid:
            self.__json['defaultValueOid'] = self.defaultValueOid
        if self.defaultValueUuid:
            self.__json['defaultValueUuid'] = self.defaultValueUuid
        if self.defaultValueId:
            self.__json['defaultValueId'] = self.defaultValueId
        if self.defaultValueUnsignedInt:
            self.__json['defaultValueUnsignedInt'] = self.defaultValueUnsignedInt
        if self.defaultValuePositiveInt:
            self.__json['defaultValuePositiveInt'] = self.defaultValuePositiveInt
        if self.defaultValueMarkdown:
            self.__json['defaultValueMarkdown'] = self.defaultValueMarkdown
        if self.defaultValueAnnotation:
            self.__json['defaultValueAnnotation'] = self.defaultValueAnnotation.json
        if self.defaultValueAttachment:
            self.__json['defaultValueAttachment'] = self.defaultValueAttachment.json
        if self.defaultValueIdentifier:
            self.__json['defaultValueIdentifier'] = self.defaultValueIdentifier.json
        if self.defaultValueCodeableConcept:
            self.__json['defaultValueCodeableConcept'] = self.defaultValueCodeableConcept.json
        if self.defaultValueCoding:
            self.__json['defaultValueCoding'] = self.defaultValueCoding.json
        if self.defaultValueQuantity:
            self.__json['defaultValueQuantity'] = self.defaultValueQuantity.json
        if self.defaultValueRange:
            self.__json['defaultValueRange'] = self.defaultValueRange.json
        if self.defaultValuePeriod:
            self.__json['defaultValuePeriod'] = self.defaultValuePeriod.json
        if self.defaultValueRatio:
            self.__json['defaultValueRatio'] = self.defaultValueRatio.json
        if self.defaultValueReference:
            self.__json['defaultValueReference'] = self.defaultValueReference.json
        if self.defaultValueSampledData:
            self.__json['defaultValueSampledData'] = self.defaultValueSampledData.json
        if self.defaultValueSignature:
            self.__json['defaultValueSignature'] = self.defaultValueSignature.json
        if self.defaultValueHumanName:
            self.__json['defaultValueHumanName'] = self.defaultValueHumanName.json
        if self.defaultValueAddress:
            self.__json['defaultValueAddress'] = self.defaultValueAddress.json
        if self.defaultValueContactPoint:
            self.__json['defaultValueContactPoint'] = self.defaultValueContactPoint.json
        if self.defaultValueTiming:
            self.__json['defaultValueTiming'] = self.defaultValueTiming.json
        if self.defaultValueMeta:
            self.__json['defaultValueMeta'] = self.defaultValueMeta.json
        if self.fixedBoolean:
            self.__json['fixedBoolean'] = self.fixedBoolean.json
        if self.fixedInteger:
            self.__json['fixedInteger'] = self.fixedInteger
        if self.fixedDecimal:
            self.__json['fixedDecimal'] = self.fixedDecimal
        if self.fixedBase64Binary:
            self.__json['fixedBase64Binary'] = self.fixedBase64Binary
        if self.fixedInstant:
            self.__json['fixedInstant'] = self.fixedInstant
        if self.fixedString:
            self.__json['fixedString'] = self.fixedString
        if self.fixedUri:
            self.__json['fixedUri'] = self.fixedUri
        if self.fixedDate:
            self.__json['fixedDate'] = self.fixedDate.json
        if self.fixedDateTime:
            self.__json['fixedDateTime'] = self.fixedDateTime.json
        if self.fixedTime:
            self.__json['fixedTime'] = self.fixedTime.json
        if self.fixedCode:
            self.__json['fixedCode'] = self.fixedCode
        if self.fixedOid:
            self.__json['fixedOid'] = self.fixedOid
        if self.fixedUuid:
            self.__json['fixedUuid'] = self.fixedUuid
        if self.fixedId:
            self.__json['fixedId'] = self.fixedId
        if self.fixedUnsignedInt:
            self.__json['fixedUnsignedInt'] = self.fixedUnsignedInt
        if self.fixedPositiveInt:
            self.__json['fixedPositiveInt'] = self.fixedPositiveInt
        if self.fixedMarkdown:
            self.__json['fixedMarkdown'] = self.fixedMarkdown
        if self.fixedAnnotation:
            self.__json['fixedAnnotation'] = self.fixedAnnotation.json
        if self.fixedAttachment:
            self.__json['fixedAttachment'] = self.fixedAttachment.json
        if self.fixedIdentifier:
            self.__json['fixedIdentifier'] = self.fixedIdentifier.json
        if self.fixedCodeableConcept:
            self.__json['fixedCodeableConcept'] = self.fixedCodeableConcept.json
        if self.fixedCoding:
            self.__json['fixedCoding'] = self.fixedCoding.json
        if self.fixedQuantity:
            self.__json['fixedQuantity'] = self.fixedQuantity.json
        if self.fixedRange:
            self.__json['fixedRange'] = self.fixedRange.json
        if self.fixedPeriod:
            self.__json['fixedPeriod'] = self.fixedPeriod.json
        if self.fixedRatio:
            self.__json['fixedRatio'] = self.fixedRatio.json
        if self.fixedReference:
            self.__json['fixedReference'] = self.fixedReference.json
        if self.fixedSampledData:
            self.__json['fixedSampledData'] = self.fixedSampledData.json
        if self.fixedSignature:
            self.__json['fixedSignature'] = self.fixedSignature.json
        if self.fixedHumanName:
            self.__json['fixedHumanName'] = self.fixedHumanName.json
        if self.fixedAddress:
            self.__json['fixedAddress'] = self.fixedAddress.json
        if self.fixedContactPoint:
            self.__json['fixedContactPoint'] = self.fixedContactPoint.json
        if self.fixedTiming:
            self.__json['fixedTiming'] = self.fixedTiming.json
        if self.fixedMeta:
            self.__json['fixedMeta'] = self.fixedMeta.json
        if self.patternBoolean:
            self.__json['patternBoolean'] = self.patternBoolean.json
        if self.patternInteger:
            self.__json['patternInteger'] = self.patternInteger
        if self.patternDecimal:
            self.__json['patternDecimal'] = self.patternDecimal
        if self.patternBase64Binary:
            self.__json['patternBase64Binary'] = self.patternBase64Binary
        if self.patternInstant:
            self.__json['patternInstant'] = self.patternInstant
        if self.patternString:
            self.__json['patternString'] = self.patternString
        if self.patternUri:
            self.__json['patternUri'] = self.patternUri
        if self.patternDate:
            self.__json['patternDate'] = self.patternDate.json
        if self.patternDateTime:
            self.__json['patternDateTime'] = self.patternDateTime.json
        if self.patternTime:
            self.__json['patternTime'] = self.patternTime.json
        if self.patternCode:
            self.__json['patternCode'] = self.patternCode
        if self.patternOid:
            self.__json['patternOid'] = self.patternOid
        if self.patternUuid:
            self.__json['patternUuid'] = self.patternUuid
        if self.patternId:
            self.__json['patternId'] = self.patternId
        if self.patternUnsignedInt:
            self.__json['patternUnsignedInt'] = self.patternUnsignedInt
        if self.patternPositiveInt:
            self.__json['patternPositiveInt'] = self.patternPositiveInt
        if self.patternMarkdown:
            self.__json['patternMarkdown'] = self.patternMarkdown
        if self.patternAnnotation:
            self.__json['patternAnnotation'] = self.patternAnnotation.json
        if self.patternAttachment:
            self.__json['patternAttachment'] = self.patternAttachment.json
        if self.patternIdentifier:
            self.__json['patternIdentifier'] = self.patternIdentifier.json
        if self.patternCodeableConcept:
            self.__json['patternCodeableConcept'] = self.patternCodeableConcept.json
        if self.patternCoding:
            self.__json['patternCoding'] = self.patternCoding.json
        if self.patternQuantity:
            self.__json['patternQuantity'] = self.patternQuantity.json
        if self.patternRange:
            self.__json['patternRange'] = self.patternRange.json
        if self.patternPeriod:
            self.__json['patternPeriod'] = self.patternPeriod.json
        if self.patternRatio:
            self.__json['patternRatio'] = self.patternRatio.json
        if self.patternReference:
            self.__json['patternReference'] = self.patternReference.json
        if self.patternSampledData:
            self.__json['patternSampledData'] = self.patternSampledData.json
        if self.patternSignature:
            self.__json['patternSignature'] = self.patternSignature.json
        if self.patternHumanName:
            self.__json['patternHumanName'] = self.patternHumanName.json
        if self.patternAddress:
            self.__json['patternAddress'] = self.patternAddress.json
        if self.patternContactPoint:
            self.__json['patternContactPoint'] = self.patternContactPoint.json
        if self.patternTiming:
            self.__json['patternTiming'] = self.patternTiming.json
        if self.patternMeta:
            self.__json['patternMeta'] = self.patternMeta.json
        if self.exampleBoolean:
            self.__json['exampleBoolean'] = self.exampleBoolean.json
        if self.exampleInteger:
            self.__json['exampleInteger'] = self.exampleInteger
        if self.exampleDecimal:
            self.__json['exampleDecimal'] = self.exampleDecimal
        if self.exampleBase64Binary:
            self.__json['exampleBase64Binary'] = self.exampleBase64Binary
        if self.exampleInstant:
            self.__json['exampleInstant'] = self.exampleInstant
        if self.exampleString:
            self.__json['exampleString'] = self.exampleString
        if self.exampleUri:
            self.__json['exampleUri'] = self.exampleUri
        if self.exampleDate:
            self.__json['exampleDate'] = self.exampleDate.json
        if self.exampleDateTime:
            self.__json['exampleDateTime'] = self.exampleDateTime.json
        if self.exampleTime:
            self.__json['exampleTime'] = self.exampleTime.json
        if self.exampleCode:
            self.__json['exampleCode'] = self.exampleCode
        if self.exampleOid:
            self.__json['exampleOid'] = self.exampleOid
        if self.exampleUuid:
            self.__json['exampleUuid'] = self.exampleUuid
        if self.exampleId:
            self.__json['exampleId'] = self.exampleId
        if self.exampleUnsignedInt:
            self.__json['exampleUnsignedInt'] = self.exampleUnsignedInt
        if self.examplePositiveInt:
            self.__json['examplePositiveInt'] = self.examplePositiveInt
        if self.exampleMarkdown:
            self.__json['exampleMarkdown'] = self.exampleMarkdown
        if self.exampleAnnotation:
            self.__json['exampleAnnotation'] = self.exampleAnnotation.json
        if self.exampleAttachment:
            self.__json['exampleAttachment'] = self.exampleAttachment.json
        if self.exampleIdentifier:
            self.__json['exampleIdentifier'] = self.exampleIdentifier.json
        if self.exampleCodeableConcept:
            self.__json['exampleCodeableConcept'] = self.exampleCodeableConcept.json
        if self.exampleCoding:
            self.__json['exampleCoding'] = self.exampleCoding.json
        if self.exampleQuantity:
            self.__json['exampleQuantity'] = self.exampleQuantity.json
        if self.exampleRange:
            self.__json['exampleRange'] = self.exampleRange.json
        if self.examplePeriod:
            self.__json['examplePeriod'] = self.examplePeriod.json
        if self.exampleRatio:
            self.__json['exampleRatio'] = self.exampleRatio.json
        if self.exampleReference:
            self.__json['exampleReference'] = self.exampleReference.json
        if self.exampleSampledData:
            self.__json['exampleSampledData'] = self.exampleSampledData.json
        if self.exampleSignature:
            self.__json['exampleSignature'] = self.exampleSignature.json
        if self.exampleHumanName:
            self.__json['exampleHumanName'] = self.exampleHumanName.json
        if self.exampleAddress:
            self.__json['exampleAddress'] = self.exampleAddress.json
        if self.exampleContactPoint:
            self.__json['exampleContactPoint'] = self.exampleContactPoint.json
        if self.exampleTiming:
            self.__json['exampleTiming'] = self.exampleTiming.json
        if self.exampleMeta:
            self.__json['exampleMeta'] = self.exampleMeta.json
        if self.minValueBoolean:
            self.__json['minValueBoolean'] = self.minValueBoolean.json
        if self.minValueInteger:
            self.__json['minValueInteger'] = self.minValueInteger
        if self.minValueDecimal:
            self.__json['minValueDecimal'] = self.minValueDecimal
        if self.minValueBase64Binary:
            self.__json['minValueBase64Binary'] = self.minValueBase64Binary
        if self.minValueInstant:
            self.__json['minValueInstant'] = self.minValueInstant
        if self.minValueString:
            self.__json['minValueString'] = self.minValueString
        if self.minValueUri:
            self.__json['minValueUri'] = self.minValueUri
        if self.minValueDate:
            self.__json['minValueDate'] = self.minValueDate.json
        if self.minValueDateTime:
            self.__json['minValueDateTime'] = self.minValueDateTime.json
        if self.minValueTime:
            self.__json['minValueTime'] = self.minValueTime.json
        if self.minValueCode:
            self.__json['minValueCode'] = self.minValueCode
        if self.minValueOid:
            self.__json['minValueOid'] = self.minValueOid
        if self.minValueUuid:
            self.__json['minValueUuid'] = self.minValueUuid
        if self.minValueId:
            self.__json['minValueId'] = self.minValueId
        if self.minValueUnsignedInt:
            self.__json['minValueUnsignedInt'] = self.minValueUnsignedInt
        if self.minValuePositiveInt:
            self.__json['minValuePositiveInt'] = self.minValuePositiveInt
        if self.minValueMarkdown:
            self.__json['minValueMarkdown'] = self.minValueMarkdown
        if self.minValueAnnotation:
            self.__json['minValueAnnotation'] = self.minValueAnnotation.json
        if self.minValueAttachment:
            self.__json['minValueAttachment'] = self.minValueAttachment.json
        if self.minValueIdentifier:
            self.__json['minValueIdentifier'] = self.minValueIdentifier.json
        if self.minValueCodeableConcept:
            self.__json['minValueCodeableConcept'] = self.minValueCodeableConcept.json
        if self.minValueCoding:
            self.__json['minValueCoding'] = self.minValueCoding.json
        if self.minValueQuantity:
            self.__json['minValueQuantity'] = self.minValueQuantity.json
        if self.minValueRange:
            self.__json['minValueRange'] = self.minValueRange.json
        if self.minValuePeriod:
            self.__json['minValuePeriod'] = self.minValuePeriod.json
        if self.minValueRatio:
            self.__json['minValueRatio'] = self.minValueRatio.json
        if self.minValueReference:
            self.__json['minValueReference'] = self.minValueReference.json
        if self.minValueSampledData:
            self.__json['minValueSampledData'] = self.minValueSampledData.json
        if self.minValueSignature:
            self.__json['minValueSignature'] = self.minValueSignature.json
        if self.minValueHumanName:
            self.__json['minValueHumanName'] = self.minValueHumanName.json
        if self.minValueAddress:
            self.__json['minValueAddress'] = self.minValueAddress.json
        if self.minValueContactPoint:
            self.__json['minValueContactPoint'] = self.minValueContactPoint.json
        if self.minValueTiming:
            self.__json['minValueTiming'] = self.minValueTiming.json
        if self.minValueMeta:
            self.__json['minValueMeta'] = self.minValueMeta.json
        if self.maxValueBoolean:
            self.__json['maxValueBoolean'] = self.maxValueBoolean.json
        if self.maxValueInteger:
            self.__json['maxValueInteger'] = self.maxValueInteger
        if self.maxValueDecimal:
            self.__json['maxValueDecimal'] = self.maxValueDecimal
        if self.maxValueBase64Binary:
            self.__json['maxValueBase64Binary'] = self.maxValueBase64Binary
        if self.maxValueInstant:
            self.__json['maxValueInstant'] = self.maxValueInstant
        if self.maxValueString:
            self.__json['maxValueString'] = self.maxValueString
        if self.maxValueUri:
            self.__json['maxValueUri'] = self.maxValueUri
        if self.maxValueDate:
            self.__json['maxValueDate'] = self.maxValueDate.json
        if self.maxValueDateTime:
            self.__json['maxValueDateTime'] = self.maxValueDateTime.json
        if self.maxValueTime:
            self.__json['maxValueTime'] = self.maxValueTime.json
        if self.maxValueCode:
            self.__json['maxValueCode'] = self.maxValueCode
        if self.maxValueOid:
            self.__json['maxValueOid'] = self.maxValueOid
        if self.maxValueUuid:
            self.__json['maxValueUuid'] = self.maxValueUuid
        if self.maxValueId:
            self.__json['maxValueId'] = self.maxValueId
        if self.maxValueUnsignedInt:
            self.__json['maxValueUnsignedInt'] = self.maxValueUnsignedInt
        if self.maxValuePositiveInt:
            self.__json['maxValuePositiveInt'] = self.maxValuePositiveInt
        if self.maxValueMarkdown:
            self.__json['maxValueMarkdown'] = self.maxValueMarkdown
        if self.maxValueAnnotation:
            self.__json['maxValueAnnotation'] = self.maxValueAnnotation.json
        if self.maxValueAttachment:
            self.__json['maxValueAttachment'] = self.maxValueAttachment.json
        if self.maxValueIdentifier:
            self.__json['maxValueIdentifier'] = self.maxValueIdentifier.json
        if self.maxValueCodeableConcept:
            self.__json['maxValueCodeableConcept'] = self.maxValueCodeableConcept.json
        if self.maxValueCoding:
            self.__json['maxValueCoding'] = self.maxValueCoding.json
        if self.maxValueQuantity:
            self.__json['maxValueQuantity'] = self.maxValueQuantity.json
        if self.maxValueRange:
            self.__json['maxValueRange'] = self.maxValueRange.json
        if self.maxValuePeriod:
            self.__json['maxValuePeriod'] = self.maxValuePeriod.json
        if self.maxValueRatio:
            self.__json['maxValueRatio'] = self.maxValueRatio.json
        if self.maxValueReference:
            self.__json['maxValueReference'] = self.maxValueReference.json
        if self.maxValueSampledData:
            self.__json['maxValueSampledData'] = self.maxValueSampledData.json
        if self.maxValueSignature:
            self.__json['maxValueSignature'] = self.maxValueSignature.json
        if self.maxValueHumanName:
            self.__json['maxValueHumanName'] = self.maxValueHumanName.json
        if self.maxValueAddress:
            self.__json['maxValueAddress'] = self.maxValueAddress.json
        if self.maxValueContactPoint:
            self.__json['maxValueContactPoint'] = self.maxValueContactPoint.json
        if self.maxValueTiming:
            self.__json['maxValueTiming'] = self.maxValueTiming.json
        if self.maxValueMeta:
            self.__json['maxValueMeta'] = self.maxValueMeta.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ElementDefinition string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class TimingRepeatComponent(BackboneElement):
    '''
    FHIR TimingRepeatComponent resource

     A set of rules that describe when the event should occur.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR TimingRepeatComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(TimingRepeatComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR TimingRepeatComponent constructor
        '''
        logging.info("FHIR TimingRepeatComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.count = self.__add('count')
        self.countMax = self.__add('countMax')
        self.duration = self.__add('duration')
        self.durationMax = self.__add('durationMax')
        self.durationUnit = self.__add('durationUnit')
        self.frequency = self.__add('frequency')
        self.frequencyMax = self.__add('frequencyMax')
        self.period = self.__add('period')
        self.periodMax = self.__add('periodMax')
        self.periodUnit = self.__add('periodUnit')
        self.when = self.__add('when')
        self.offset = self.__add('offset')
        self.boundsQuantity = Duration(self.__add('boundsQuantity'))
        self.boundsRange = Range(self.__add('boundsRange'))
        self.boundsPeriod = Period(self.__add('boundsPeriod'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.count:
            self.__json['count'] = self.count
        if self.countMax:
            self.__json['countMax'] = self.countMax
        if self.duration:
            self.__json['duration'] = self.duration
        if self.durationMax:
            self.__json['durationMax'] = self.durationMax
        if self.durationUnit:
            self.__json['durationUnit'] = self.durationUnit
        if self.frequency:
            self.__json['frequency'] = self.frequency
        if self.frequencyMax:
            self.__json['frequencyMax'] = self.frequencyMax
        if self.period:
            self.__json['period'] = self.period
        if self.periodMax:
            self.__json['periodMax'] = self.periodMax
        if self.periodUnit:
            self.__json['periodUnit'] = self.periodUnit
        if self.when:
            self.__json['when'] = self.when
        if self.offset:
            self.__json['offset'] = self.offset
        if self.boundsQuantity:
            self.__json['boundsQuantity'] = self.boundsQuantity.json
        if self.boundsRange:
            self.__json['boundsRange'] = self.boundsRange.json
        if self.boundsPeriod:
            self.__json['boundsPeriod'] = self.boundsPeriod.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR TimingRepeatComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class Timing(Element):
    '''
    FHIR Timing resource

     Specifies an event that may occur multiple times. Timing schedules are used to record when things are expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds. If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions

    event ->  Identifies specific times when the event occurs.
    repeat ->  A set of rules that describe when the event should occur.
    code ->  A code for the timing pattern. Some codes such as BID are ubiquitous, but many institutions define their own additional codes. If a code is provided, the code is understood to be a complete statement of whatever is specified in the structured timing data, and either the code or the data may be used to interpret the Timing.

    
    '''
    

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'event':
                    list_to_add.append(DateTime(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR Timing __new__
        '''
        if json == None:
            return None
        else:
            return super(Timing, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR Timing constructor
        '''
        logging.info("FHIR Timing: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        if 'event' in self.__json:
            if isinstance(self.__json['event'], list):
                self.event = self.__add_list('event')
            else:
                self.event = DateTime(self.__add('event'))
        else:
            self.event = None
        self.repeat = TimingRepeatComponent(self.__add('repeat'))
        self.code = CodeableConcept(self.__add('code'))


        # Parent Resource Init
        super(Timing, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.event:
            self.__json['event'] = self.__get_list(self.event)
        if self.repeat:
            self.__json['repeat'] = self.repeat.json
        if self.code:
            self.__json['code'] = self.code.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR Timing string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ModuleMetadataCoverageComponent(BackboneElement):
    '''
    FHIR ModuleMetadataCoverageComponent resource

     Specifies various attributes of the patient population for whom and/or environment of care in which, the knowledge module is applicable.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ModuleMetadataCoverageComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ModuleMetadataCoverageComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ModuleMetadataCoverageComponent constructor
        '''
        logging.info("FHIR ModuleMetadataCoverageComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.focus = Coding(self.__add('focus'))
        self.value = CodeableConcept(self.__add('value'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.focus:
            self.__json['focus'] = self.focus.json
        if self.value:
            self.__json['value'] = self.value.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ModuleMetadataCoverageComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ModuleMetadataContact1Component(BackboneElement):
    '''
    FHIR ModuleMetadataContact1Component resource

     Contacts to assist a user in finding and communicating with the contributor.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ModuleMetadataContact1Component __new__
        '''
        if json == None:
            return None
        else:
            return super(ModuleMetadataContact1Component, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ModuleMetadataContact1Component constructor
        '''
        logging.info("FHIR ModuleMetadataContact1Component: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ModuleMetadataContact1Component string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ModuleMetadataContributorComponent(BackboneElement):
    '''
    FHIR ModuleMetadataContributorComponent resource

     A contributor to the content of the module, including authors, editors, reviewers, and endorsers.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'contact':
                    list_to_add.append(ModuleMetadataContact1Component(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ModuleMetadataContributorComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ModuleMetadataContributorComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ModuleMetadataContributorComponent constructor
        '''
        logging.info("FHIR ModuleMetadataContributorComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.type = self.__add('type')
        self.name = self.__add('name')
        if 'contact' in self.__json:
            if isinstance(self.__json['contact'], list):
                self.contact = self.__add_list('contact')
            else:
                self.contact = ModuleMetadataContact1Component(self.__add('contact'))
        else:
            self.contact = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.type:
            self.__json['type'] = self.type
        if self.name:
            self.__json['name'] = self.name
        if self.contact:
            self.__json['contact'] = self.__get_list(self.contact)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ModuleMetadataContributorComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ModuleMetadataContactComponent(BackboneElement):
    '''
    FHIR ModuleMetadataContactComponent resource

     Contacts to assist a user in finding and communicating with the publisher.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'telecom':
                    list_to_add.append(ContactPoint(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ModuleMetadataContactComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ModuleMetadataContactComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ModuleMetadataContactComponent constructor
        '''
        logging.info("FHIR ModuleMetadataContactComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.name = self.__add('name')
        if 'telecom' in self.__json:
            if isinstance(self.__json['telecom'], list):
                self.telecom = self.__add_list('telecom')
            else:
                self.telecom = ContactPoint(self.__add('telecom'))
        else:
            self.telecom = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.name:
            self.__json['name'] = self.name
        if self.telecom:
            self.__json['telecom'] = self.__get_list(self.telecom)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ModuleMetadataContactComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ModuleMetadataRelatedResourceComponent(BackboneElement):
    '''
    FHIR ModuleMetadataRelatedResourceComponent resource

     Related resources such as additional documentation, justification, or bibliographic references.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ModuleMetadataRelatedResourceComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ModuleMetadataRelatedResourceComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ModuleMetadataRelatedResourceComponent constructor
        '''
        logging.info("FHIR ModuleMetadataRelatedResourceComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.type = self.__add('type')
        self.document = Attachment(self.__add('document'))
        self.resource = Reference(self.__add('resource'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.type:
            self.__json['type'] = self.type
        if self.document:
            self.__json['document'] = self.document.json
        if self.resource:
            self.__json['resource'] = self.resource.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ModuleMetadataRelatedResourceComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ModuleMetadata(Element):
    '''
    FHIR ModuleMetadata resource

     The ModuleMetadata structure defines the common metadata elements used by quality improvement artifacts. This information includes descriptive and topical metadata to enable repository searches, as well as governance and evidentiary support information. If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions

    url ->  An absolute URL that is used to identify this module when it is referenced. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this module definition is (or will be) published.
    identifier ->  A logical identifier for the module such as the CMS or NQF identifiers for a measure artifact.
    version ->  The version of the module, if any. To provide a version consistent with the Decision Support Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge modules, refer to the Decision Support Service specification. Note that the version is required for non-experimental published artifact.
    name ->  A machine-friendly name for the module. This name should be usable as an identifier for the module by machine processing applications such as code generation.
    title ->  A short, descriptive, user-friendly title for the module.
    type ->  Identifies the type of knowledge module, such as a rule, library, documentation template, or measure. 
    status ->  The status of the module. 
    experimental ->  Determines whether the module was developed for testing purposes (or education/evaluation/marketing), and is not intended to be used in production environments.
    description ->  A free text natural language description of the module from the consumer's perspective.
    purpose ->  A brief description of the purpose of the module.
    usage ->  A detailed description of how the module is used from a clinical perspective.
    publicationDate ->  The date on which the module was published.
    lastReviewDate ->  The date on which the module content was last reviewed.
    effectivePeriod ->  The period during which the module content is effective.
    coverage ->  Specifies various attributes of the patient population for whom and/or environment of care in which, the knowledge module is applicable.
    topic ->  Clinical topics related to the content of the module.
    contributor ->  A contributor to the content of the module, including authors, editors, reviewers, and endorsers.
    publisher ->  The name of the individual or organization that published the module (also known as the steward for the module). This information is required for non-experimental published artifacts.
    contact ->  Contacts to assist a user in finding and communicating with the publisher.
    copyright ->  A copyright statement relating to the module and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the module.
    relatedResource ->  Related resources such as additional documentation, justification, or bibliographic references.

    
    '''
    

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'identifier':
                    list_to_add.append(Identifier(obj))
                elif key == 'coverage':
                    list_to_add.append(ModuleMetadataCoverageComponent(obj))
                elif key == 'topic':
                    list_to_add.append(CodeableConcept(obj))
                elif key == 'contributor':
                    list_to_add.append(ModuleMetadataContributorComponent(obj))
                elif key == 'contact':
                    list_to_add.append(ModuleMetadataContactComponent(obj))
                elif key == 'relatedResource':
                    list_to_add.append(ModuleMetadataRelatedResourceComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ModuleMetadata __new__
        '''
        if json == None:
            return None
        else:
            return super(ModuleMetadata, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ModuleMetadata constructor
        '''
        logging.info("FHIR ModuleMetadata: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.url = self.__add('url')
        if 'identifier' in self.__json:
            if isinstance(self.__json['identifier'], list):
                self.identifier = self.__add_list('identifier')
            else:
                self.identifier = Identifier(self.__add('identifier'))
        else:
            self.identifier = None
        self.version = self.__add('version')
        self.name = self.__add('name')
        self.title = self.__add('title')
        self.type = self.__add('type')
        self.status = self.__add('status')
        self.experimental = Boolean(self.__add('experimental'))
        self.description = self.__add('description')
        self.purpose = self.__add('purpose')
        self.usage = self.__add('usage')
        self.publicationDate = Date(self.__add('publicationDate'))
        self.lastReviewDate = Date(self.__add('lastReviewDate'))
        self.effectivePeriod = Period(self.__add('effectivePeriod'))
        if 'coverage' in self.__json:
            if isinstance(self.__json['coverage'], list):
                self.coverage = self.__add_list('coverage')
            else:
                self.coverage = ModuleMetadataCoverageComponent(self.__add('coverage'))
        else:
            self.coverage = None
        if 'topic' in self.__json:
            if isinstance(self.__json['topic'], list):
                self.topic = self.__add_list('topic')
            else:
                self.topic = CodeableConcept(self.__add('topic'))
        else:
            self.topic = None
        if 'contributor' in self.__json:
            if isinstance(self.__json['contributor'], list):
                self.contributor = self.__add_list('contributor')
            else:
                self.contributor = ModuleMetadataContributorComponent(self.__add('contributor'))
        else:
            self.contributor = None
        self.publisher = self.__add('publisher')
        if 'contact' in self.__json:
            if isinstance(self.__json['contact'], list):
                self.contact = self.__add_list('contact')
            else:
                self.contact = ModuleMetadataContactComponent(self.__add('contact'))
        else:
            self.contact = None
        self.copyright = self.__add('copyright')
        if 'relatedResource' in self.__json:
            if isinstance(self.__json['relatedResource'], list):
                self.relatedResource = self.__add_list('relatedResource')
            else:
                self.relatedResource = ModuleMetadataRelatedResourceComponent(self.__add('relatedResource'))
        else:
            self.relatedResource = None


        # Parent Resource Init
        super(ModuleMetadata, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.url:
            self.__json['url'] = self.url
        if self.identifier:
            self.__json['identifier'] = self.__get_list(self.identifier)
        if self.version:
            self.__json['version'] = self.version
        if self.name:
            self.__json['name'] = self.name
        if self.title:
            self.__json['title'] = self.title
        if self.type:
            self.__json['type'] = self.type
        if self.status:
            self.__json['status'] = self.status
        if self.experimental:
            self.__json['experimental'] = self.experimental.json
        if self.description:
            self.__json['description'] = self.description
        if self.purpose:
            self.__json['purpose'] = self.purpose
        if self.usage:
            self.__json['usage'] = self.usage
        if self.publicationDate:
            self.__json['publicationDate'] = self.publicationDate.json
        if self.lastReviewDate:
            self.__json['lastReviewDate'] = self.lastReviewDate.json
        if self.effectivePeriod:
            self.__json['effectivePeriod'] = self.effectivePeriod.json
        if self.coverage:
            self.__json['coverage'] = self.__get_list(self.coverage)
        if self.topic:
            self.__json['topic'] = self.__get_list(self.topic)
        if self.contributor:
            self.__json['contributor'] = self.__get_list(self.contributor)
        if self.publisher:
            self.__json['publisher'] = self.publisher
        if self.contact:
            self.__json['contact'] = self.__get_list(self.contact)
        if self.copyright:
            self.__json['copyright'] = self.copyright
        if self.relatedResource:
            self.__json['relatedResource'] = self.__get_list(self.relatedResource)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ModuleMetadata string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ActionDefinitionRelatedActionComponent(BackboneElement):
    '''
    FHIR ActionDefinitionRelatedActionComponent resource

     A relationship to another action such as "before" or "30-60 minutes after start of".

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ActionDefinitionRelatedActionComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ActionDefinitionRelatedActionComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ActionDefinitionRelatedActionComponent constructor
        '''
        logging.info("FHIR ActionDefinitionRelatedActionComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.actionIdentifier = Identifier(self.__add('actionIdentifier'))
        self.relationship = self.__add('relationship')
        self.anchor = self.__add('anchor')
        self.offsetQuantity = Duration(self.__add('offsetQuantity'))
        self.offsetRange = Range(self.__add('offsetRange'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.actionIdentifier:
            self.__json['actionIdentifier'] = self.actionIdentifier.json
        if self.relationship:
            self.__json['relationship'] = self.relationship
        if self.anchor:
            self.__json['anchor'] = self.anchor
        if self.offsetQuantity:
            self.__json['offsetQuantity'] = self.offsetQuantity.json
        if self.offsetRange:
            self.__json['offsetRange'] = self.offsetRange.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ActionDefinitionRelatedActionComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ActionDefinitionBehaviorComponent(BackboneElement):
    '''
    FHIR ActionDefinitionBehaviorComponent resource

     A behavior associated with the action. Behaviors define how the action is to be presented and/or executed within the receiving environment.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ActionDefinitionBehaviorComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ActionDefinitionBehaviorComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ActionDefinitionBehaviorComponent constructor
        '''
        logging.info("FHIR ActionDefinitionBehaviorComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.type = Coding(self.__add('type'))
        self.value = Coding(self.__add('value'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.type:
            self.__json['type'] = self.type.json
        if self.value:
            self.__json['value'] = self.value.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ActionDefinitionBehaviorComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ActionDefinitionCustomizationComponent(BackboneElement):
    '''
    FHIR ActionDefinitionCustomizationComponent resource

     Customizations that should be applied to the statically defined resource. For example, if the dosage of a medication must be computed based on the patient's weight, a customization would be used to specify an expression that calculated the weight, and the path on the resource that would contain the result.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ActionDefinitionCustomizationComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ActionDefinitionCustomizationComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ActionDefinitionCustomizationComponent constructor
        '''
        logging.info("FHIR ActionDefinitionCustomizationComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.path = self.__add('path')
        self.expression = self.__add('expression')



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.path:
            self.__json['path'] = self.path
        if self.expression:
            self.__json['expression'] = self.expression


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ActionDefinitionCustomizationComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ActionDefinition(Element):
    '''
    FHIR ActionDefinition resource

     The definition of an action to be performed. Some aspects of the definition are specified statically, and some aspects can be specified dynamically by referencing logic defined in a library. If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions

    actionIdentifier ->  A unique identifier for the action. The identifier SHALL be unique within the container in which it appears, and MAY be universally unique.
    label ->  A user-visible label for the action.
    title ->  The title of the action displayed to a user.
    description ->  A short description of the action used to provide a summary to display to the user.
    textEquivalent ->  A text equivalent of the action to be performed. This provides a human-interpretable description of the action when the definition is consumed by a system that may not be capable of interpreting it dynamically.
    concept ->  The concept represented by this action or its sub-actions.
    supportingEvidence ->  The evidence grade and the sources of evidence for this action.
    documentation ->  Didactic or other informational resources associated with the action that can be provided to the CDS recipient. Information resources can include inline text commentary and links to web resources.
    relatedAction ->  A relationship to another action such as "before" or "30-60 minutes after start of".
    participantType ->  The type of participant in the action. 
    type ->  The type of action to perform (create, update, remove). 
    behavior ->  A behavior associated with the action. Behaviors define how the action is to be presented and/or executed within the receiving environment.
    resource ->  The resource that is the target of the action (e.g. CommunicationRequest). The resource described here defines any aspects of the action that can be specified statically (i.e. are known at the time of definition).
    customization ->  Customizations that should be applied to the statically defined resource. For example, if the dosage of a medication must be computed based on the patient's weight, a customization would be used to specify an expression that calculated the weight, and the path on the resource that would contain the result.
    action ->  Sub actions that are contained within the action. The behavior of this action determines the functionality of the sub-actions. For example, a selection behavior of at-most-one indicates that of the sub-actions, at most one may be chosen as part of realizing the action definition.

    
    '''
    

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'concept':
                    list_to_add.append(CodeableConcept(obj))
                elif key == 'supportingEvidence':
                    list_to_add.append(Attachment(obj))
                elif key == 'documentation':
                    list_to_add.append(Attachment(obj))
                elif key == 'behavior':
                    list_to_add.append(ActionDefinitionBehaviorComponent(obj))
                elif key == 'customization':
                    list_to_add.append(ActionDefinitionCustomizationComponent(obj))
                elif key == 'action':
                    list_to_add.append(ActionDefinition(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ActionDefinition __new__
        '''
        if json == None:
            return None
        else:
            return super(ActionDefinition, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ActionDefinition constructor
        '''
        logging.info("FHIR ActionDefinition: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.actionIdentifier = Identifier(self.__add('actionIdentifier'))
        self.label = self.__add('label')
        self.title = self.__add('title')
        self.description = self.__add('description')
        self.textEquivalent = self.__add('textEquivalent')
        if 'concept' in self.__json:
            if isinstance(self.__json['concept'], list):
                self.concept = self.__add_list('concept')
            else:
                self.concept = CodeableConcept(self.__add('concept'))
        else:
            self.concept = None
        if 'supportingEvidence' in self.__json:
            if isinstance(self.__json['supportingEvidence'], list):
                self.supportingEvidence = self.__add_list('supportingEvidence')
            else:
                self.supportingEvidence = Attachment(self.__add('supportingEvidence'))
        else:
            self.supportingEvidence = None
        if 'documentation' in self.__json:
            if isinstance(self.__json['documentation'], list):
                self.documentation = self.__add_list('documentation')
            else:
                self.documentation = Attachment(self.__add('documentation'))
        else:
            self.documentation = None
        self.relatedAction = ActionDefinitionRelatedActionComponent(self.__add('relatedAction'))
        if 'participantType' in self.__json:
            if isinstance(self.__json['participantType'], list):
                self.participantType = self.__add_list('participantType')
            else:
                self.participantType = self.__add('participantType')
        else:
            self.participantType = None
        self.type = self.__add('type')
        if 'behavior' in self.__json:
            if isinstance(self.__json['behavior'], list):
                self.behavior = self.__add_list('behavior')
            else:
                self.behavior = ActionDefinitionBehaviorComponent(self.__add('behavior'))
        else:
            self.behavior = None
        self.resource = Reference(self.__add('resource'))
        if 'customization' in self.__json:
            if isinstance(self.__json['customization'], list):
                self.customization = self.__add_list('customization')
            else:
                self.customization = ActionDefinitionCustomizationComponent(self.__add('customization'))
        else:
            self.customization = None
        if 'action' in self.__json:
            if isinstance(self.__json['action'], list):
                self.action = self.__add_list('action')
            else:
                self.action = ActionDefinition(self.__add('action'))
        else:
            self.action = None


        # Parent Resource Init
        super(ActionDefinition, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.actionIdentifier:
            self.__json['actionIdentifier'] = self.actionIdentifier.json
        if self.label:
            self.__json['label'] = self.label
        if self.title:
            self.__json['title'] = self.title
        if self.description:
            self.__json['description'] = self.description
        if self.textEquivalent:
            self.__json['textEquivalent'] = self.textEquivalent
        if self.concept:
            self.__json['concept'] = self.__get_list(self.concept)
        if self.supportingEvidence:
            self.__json['supportingEvidence'] = self.__get_list(self.supportingEvidence)
        if self.documentation:
            self.__json['documentation'] = self.__get_list(self.documentation)
        if self.relatedAction:
            self.__json['relatedAction'] = self.relatedAction.json
        if self.participantType:
            self.__json['participantType'] = self.__get_list(self.participantType)
        if self.type:
            self.__json['type'] = self.type
        if self.behavior:
            self.__json['behavior'] = self.__get_list(self.behavior)
        if self.resource:
            self.__json['resource'] = self.resource.json
        if self.customization:
            self.__json['customization'] = self.__get_list(self.customization)
        if self.action:
            self.__json['action'] = self.__get_list(self.action)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ActionDefinition string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class HumanName(Element):
    '''
    FHIR HumanName resource

     A human's name with the ability to identify parts and usage. If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions

    use ->  Identifies the purpose for this name. 
    text ->  A full text representation of the name.
    family ->  The part of a name that links to the genealogy. In some cultures (e.g. Eritrea) the family name of a son is the first name of his father.
    given ->  Given name.
    prefix ->  Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the start of the name.
    suffix ->  Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the end of the name.
    period ->  Indicates the period of time when this name was valid for the named person.

    
    '''
    

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR HumanName __new__
        '''
        if json == None:
            return None
        else:
            return super(HumanName, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR HumanName constructor
        '''
        logging.info("FHIR HumanName: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.use = self.__add('use')
        self.text = self.__add('text')
        if 'family' in self.__json:
            if isinstance(self.__json['family'], list):
                self.family = self.__add_list('family')
            else:
                self.family = self.__add('family')
        else:
            self.family = None
        if 'given' in self.__json:
            if isinstance(self.__json['given'], list):
                self.given = self.__add_list('given')
            else:
                self.given = self.__add('given')
        else:
            self.given = None
        if 'prefix' in self.__json:
            if isinstance(self.__json['prefix'], list):
                self.prefix = self.__add_list('prefix')
            else:
                self.prefix = self.__add('prefix')
        else:
            self.prefix = None
        if 'suffix' in self.__json:
            if isinstance(self.__json['suffix'], list):
                self.suffix = self.__add_list('suffix')
            else:
                self.suffix = self.__add('suffix')
        else:
            self.suffix = None
        self.period = Period(self.__add('period'))


        # Parent Resource Init
        super(HumanName, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.use:
            self.__json['use'] = self.use
        if self.text:
            self.__json['text'] = self.text
        if self.family:
            self.__json['family'] = self.__get_list(self.family)
        if self.given:
            self.__json['given'] = self.__get_list(self.given)
        if self.prefix:
            self.__json['prefix'] = self.__get_list(self.prefix)
        if self.suffix:
            self.__json['suffix'] = self.__get_list(self.suffix)
        if self.period:
            self.__json['period'] = self.period.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR HumanName string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class DataRequirementCodeFilterComponent(BackboneElement):
    '''
    FHIR DataRequirementCodeFilterComponent resource

     Code filters specify additional constraints on the data, specifying the value set of interest for a particular element of the data.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'valueCoding':
                    list_to_add.append(Coding(obj))
                elif key == 'valueCodeableConcept':
                    list_to_add.append(CodeableConcept(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR DataRequirementCodeFilterComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(DataRequirementCodeFilterComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR DataRequirementCodeFilterComponent constructor
        '''
        logging.info("FHIR DataRequirementCodeFilterComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.path = self.__add('path')
        if 'valueCode' in self.__json:
            if isinstance(self.__json['valueCode'], list):
                self.valueCode = self.__add_list('valueCode')
            else:
                self.valueCode = self.__add('valueCode')
        else:
            self.valueCode = None
        if 'valueCoding' in self.__json:
            if isinstance(self.__json['valueCoding'], list):
                self.valueCoding = self.__add_list('valueCoding')
            else:
                self.valueCoding = Coding(self.__add('valueCoding'))
        else:
            self.valueCoding = None
        if 'valueCodeableConcept' in self.__json:
            if isinstance(self.__json['valueCodeableConcept'], list):
                self.valueCodeableConcept = self.__add_list('valueCodeableConcept')
            else:
                self.valueCodeableConcept = CodeableConcept(self.__add('valueCodeableConcept'))
        else:
            self.valueCodeableConcept = None
        self.valueSetString = self.__add('valueSetString')
        self.valueSetReference = Reference(self.__add('valueSetReference'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.path:
            self.__json['path'] = self.path
        if self.valueCode:
            self.__json['valueCode'] = self.__get_list(self.valueCode)
        if self.valueCoding:
            self.__json['valueCoding'] = self.__get_list(self.valueCoding)
        if self.valueCodeableConcept:
            self.__json['valueCodeableConcept'] = self.__get_list(self.valueCodeableConcept)
        if self.valueSetString:
            self.__json['valueSetString'] = self.valueSetString
        if self.valueSetReference:
            self.__json['valueSetReference'] = self.valueSetReference.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR DataRequirementCodeFilterComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class DataRequirementDateFilterComponent(BackboneElement):
    '''
    FHIR DataRequirementDateFilterComponent resource

     Date filters specify additional constraints on the data in terms of the applicable date range for specific elements.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR DataRequirementDateFilterComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(DataRequirementDateFilterComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR DataRequirementDateFilterComponent constructor
        '''
        logging.info("FHIR DataRequirementDateFilterComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.path = self.__add('path')
        self.valueDateTime = DateTime(self.__add('valueDateTime'))
        self.valuePeriod = Period(self.__add('valuePeriod'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.path:
            self.__json['path'] = self.path
        if self.valueDateTime:
            self.__json['valueDateTime'] = self.valueDateTime.json
        if self.valuePeriod:
            self.__json['valuePeriod'] = self.valuePeriod.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR DataRequirementDateFilterComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class DataRequirement(Element):
    '''
    FHIR DataRequirement resource

     Describes a required data item for evaluation in terms of the type of data, and optional code- or date-based filters of the data. If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions

    type ->  The type of the required data, specified as the type name of a resource. For profiles, this value is set to the type of the base resource of the profile.
    profile ->  The profile of the required data, specified as the uri of the profile definition.
    mustSupport ->  Indicates that specific elements of the type are referenced by the knowledge module and must be supported by the consumer in order to obtain an effective evaluation. This does not mean that a value is required for this element, only that the consuming system must understand the element and be able to provide values for it if they are available.
    codeFilter ->  Code filters specify additional constraints on the data, specifying the value set of interest for a particular element of the data.
    dateFilter ->  Date filters specify additional constraints on the data in terms of the applicable date range for specific elements.

    
    '''
    

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'codeFilter':
                    list_to_add.append(DataRequirementCodeFilterComponent(obj))
                elif key == 'dateFilter':
                    list_to_add.append(DataRequirementDateFilterComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR DataRequirement __new__
        '''
        if json == None:
            return None
        else:
            return super(DataRequirement, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR DataRequirement constructor
        '''
        logging.info("FHIR DataRequirement: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.type = self.__add('type')
        self.profile = Reference(self.__add('profile'))
        if 'mustSupport' in self.__json:
            if isinstance(self.__json['mustSupport'], list):
                self.mustSupport = self.__add_list('mustSupport')
            else:
                self.mustSupport = self.__add('mustSupport')
        else:
            self.mustSupport = None
        if 'codeFilter' in self.__json:
            if isinstance(self.__json['codeFilter'], list):
                self.codeFilter = self.__add_list('codeFilter')
            else:
                self.codeFilter = DataRequirementCodeFilterComponent(self.__add('codeFilter'))
        else:
            self.codeFilter = None
        if 'dateFilter' in self.__json:
            if isinstance(self.__json['dateFilter'], list):
                self.dateFilter = self.__add_list('dateFilter')
            else:
                self.dateFilter = DataRequirementDateFilterComponent(self.__add('dateFilter'))
        else:
            self.dateFilter = None


        # Parent Resource Init
        super(DataRequirement, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.type:
            self.__json['type'] = self.type
        if self.profile:
            self.__json['profile'] = self.profile.json
        if self.mustSupport:
            self.__json['mustSupport'] = self.__get_list(self.mustSupport)
        if self.codeFilter:
            self.__json['codeFilter'] = self.__get_list(self.codeFilter)
        if self.dateFilter:
            self.__json['dateFilter'] = self.__get_list(self.dateFilter)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR DataRequirement string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class Meta(Element):
    '''
    FHIR Meta resource

     The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource. If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions

    versionId ->  The version specific identifier, as it appears in the version portion of the URL. This values changes when the resource is created, updated, or deleted.
    lastUpdated ->  When the resource last changed - e.g. when the version changed.
    profile ->  A list of profiles [[[StructureDefinition]]]s that this resource claims to conform to. The URL is a reference to [[[StructureDefinition.url]]].
    security ->  Security labels applied to this resource. These tags connect specific resources to the overall security policy and infrastructure.
    tag ->  Tags applied to this resource. Tags are intended to be used to identify and relate resources to process and workflow, and applications are not required to consider the tags when interpreting the meaning of a resource.

    
    '''
    

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'security':
                    list_to_add.append(Coding(obj))
                elif key == 'tag':
                    list_to_add.append(Coding(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR Meta __new__
        '''
        if json == None:
            return None
        else:
            return super(Meta, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR Meta constructor
        '''
        logging.info("FHIR Meta: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.versionId = self.__add('versionId')
        self.lastUpdated = self.__add('lastUpdated')
        if 'profile' in self.__json:
            if isinstance(self.__json['profile'], list):
                self.profile = self.__add_list('profile')
            else:
                self.profile = self.__add('profile')
        else:
            self.profile = None
        if 'security' in self.__json:
            if isinstance(self.__json['security'], list):
                self.security = self.__add_list('security')
            else:
                self.security = Coding(self.__add('security'))
        else:
            self.security = None
        if 'tag' in self.__json:
            if isinstance(self.__json['tag'], list):
                self.tag = self.__add_list('tag')
            else:
                self.tag = Coding(self.__add('tag'))
        else:
            self.tag = None


        # Parent Resource Init
        super(Meta, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.versionId:
            self.__json['versionId'] = self.versionId
        if self.lastUpdated:
            self.__json['lastUpdated'] = self.lastUpdated
        if self.profile:
            self.__json['profile'] = self.__get_list(self.profile)
        if self.security:
            self.__json['security'] = self.__get_list(self.security)
        if self.tag:
            self.__json['tag'] = self.__get_list(self.tag)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR Meta string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ParameterDefinition(Element):
    '''
    FHIR ParameterDefinition resource

     The parameters to the module. This collection specifies both the input and output parameters. Input parameters are provided by the caller as part of the $evaluate operation. Output parameters are included in the GuidanceResponse. If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions

    name ->  The name of the parameter.
    use ->  Whether the parameter is input or output for the module.
    min ->  The minimum number of times this parameter SHALL appear in the request or response.
    max ->  The maximum number of times this element is permitted to appear in the request or response.
    documentation ->  A brief discussion of what the parameter is for and how it is used by the module.
    type ->  The type of the parameter.
    profile ->  If specified, this indicates a profile that the input data must conform to, or that the output data will conform to.

    
    '''
    

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ParameterDefinition __new__
        '''
        if json == None:
            return None
        else:
            return super(ParameterDefinition, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ParameterDefinition constructor
        '''
        logging.info("FHIR ParameterDefinition: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.name = self.__add('name')
        self.use = self.__add('use')
        self.min = self.__add('min')
        self.max = self.__add('max')
        self.documentation = self.__add('documentation')
        self.type = self.__add('type')
        self.profile = Reference(self.__add('profile'))


        # Parent Resource Init
        super(ParameterDefinition, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.name:
            self.__json['name'] = self.name
        if self.use:
            self.__json['use'] = self.use
        if self.min:
            self.__json['min'] = self.min
        if self.max:
            self.__json['max'] = self.max
        if self.documentation:
            self.__json['documentation'] = self.documentation
        if self.type:
            self.__json['type'] = self.type
        if self.profile:
            self.__json['profile'] = self.profile.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ParameterDefinition string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ContactPoint(Element):
    '''
    FHIR ContactPoint resource

     Details for all kinds of technology mediated contact points for a person or organization, including telephone, email, etc. If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions

    system ->  Telecommunications form for contact point - what communications system is required to make use of the contact. 
    value ->  The actual contact point details, in a form that is meaningful to the designated communication system (i.e. phone number or email address).
    use ->  Identifies the purpose for the contact point. 
    rank ->  Specifies a preferred order in which to use a set of contacts. Contacts are ranked with lower values coming before higher values.
    period ->  Time period when the contact point was/is in use.

    
    '''
    

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ContactPoint __new__
        '''
        if json == None:
            return None
        else:
            return super(ContactPoint, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ContactPoint constructor
        '''
        logging.info("FHIR ContactPoint: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.system = self.__add('system')
        self.value = self.__add('value')
        self.use = self.__add('use')
        self.rank = self.__add('rank')
        self.period = Period(self.__add('period'))


        # Parent Resource Init
        super(ContactPoint, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.system:
            self.__json['system'] = self.system
        if self.value:
            self.__json['value'] = self.value
        if self.use:
            self.__json['use'] = self.use
        if self.rank:
            self.__json['rank'] = self.rank
        if self.period:
            self.__json['period'] = self.period.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ContactPoint string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class Account(DomainResource):
    '''
    FHIR Account resource

     A financial tool for tracking value accrued for a particular purpose.  In the healthcare field, used to track charges for a patient, cost centres, etc. If the element is present, it must have either a @value, an @id, or extensions

    identifier ->  Unique identifier used to reference the account.  May or may not be intended for human use (e.g. credit card number).
    name ->  Name used for the account when displaying it to humans in reports, etc.
    type ->  Categorizes the account for reporting and searching purposes.
    status ->  Indicates whether the account is presently used/useable or not. 
    activePeriod ->  Indicates the period of time over which the account is allowed.
    currency ->  Identifies the currency to which transactions must be converted when crediting or debiting the account.
    balance ->  Represents the sum of all credits less all debits associated with the account.  Might be positive, zero or negative.
    coveragePeriod ->  Identifies the period of time the account applies to; e.g. accounts created per fiscal year, quarter, etc.
    subject ->  Identifies the patient, device, practitioner, location or other object the account is associated with.
    owner ->  Indicates the organization, department, etc. with responsibility for the account.
    description ->  Provides additional information about what the account tracks and how it is used.

    # Search parameters
        Account.search.balance
        Account.search.identifier
        Account.search.name
        Account.search.owner
        Account.search.patient
        Account.search.period
        Account.search.status
        Account.search.subject
        Account.search.type
    '''
    # search parameters
    par = [("balance", "quantity"),
           ("identifier", "token"),
           ("name", "string"),
           ("owner", "reference"),
           ("patient", "reference"),
           ("period", "date"),
           ("status", "token"),
           ("subject", "reference"),
           ("type", "token")]

    search = Params(par, "Account")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'identifier':
                    list_to_add.append(Identifier(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR Account __new__
        '''
        if json == None:
            return None
        else:
            return super(Account, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR Account constructor
        '''
        logging.info("FHIR Account: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "Account"
        if 'identifier' in self.__json:
            if isinstance(self.__json['identifier'], list):
                self.identifier = self.__add_list('identifier')
            else:
                self.identifier = Identifier(self.__add('identifier'))
        else:
            self.identifier = None
        self.name = self.__add('name')
        self.type = CodeableConcept(self.__add('type'))
        self.status = self.__add('status')
        self.activePeriod = Period(self.__add('activePeriod'))
        self.currency = Coding(self.__add('currency'))
        self.balance = Money(self.__add('balance'))
        self.coveragePeriod = Period(self.__add('coveragePeriod'))
        self.subject = Reference(self.__add('subject'))
        self.owner = Reference(self.__add('owner'))
        self.description = self.__add('description')


        # Parent Resource Init
        super(Account, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identifier:
            self.__json['identifier'] = self.__get_list(self.identifier)
        if self.name:
            self.__json['name'] = self.name
        if self.type:
            self.__json['type'] = self.type.json
        if self.status:
            self.__json['status'] = self.status
        if self.activePeriod:
            self.__json['activePeriod'] = self.activePeriod.json
        if self.currency:
            self.__json['currency'] = self.currency.json
        if self.balance:
            self.__json['balance'] = self.balance.json
        if self.coveragePeriod:
            self.__json['coveragePeriod'] = self.coveragePeriod.json
        if self.subject:
            self.__json['subject'] = self.subject.json
        if self.owner:
            self.__json['owner'] = self.owner.json
        if self.description:
            self.__json['description'] = self.description

        # Add json attributes
        self.__json = super(Account, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR Account string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class AllergyIntoleranceReactionComponent(BackboneElement):
    '''
    FHIR AllergyIntoleranceReactionComponent resource

     Details about each adverse reaction event linked to exposure to the identified Substance.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'manifestation':
                    list_to_add.append(CodeableConcept(obj))
                elif key == 'note':
                    list_to_add.append(Annotation(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR AllergyIntoleranceReactionComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(AllergyIntoleranceReactionComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR AllergyIntoleranceReactionComponent constructor
        '''
        logging.info("FHIR AllergyIntoleranceReactionComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.substance = CodeableConcept(self.__add('substance'))
        self.certainty = self.__add('certainty')
        if 'manifestation' in self.__json:
            if isinstance(self.__json['manifestation'], list):
                self.manifestation = self.__add_list('manifestation')
            else:
                self.manifestation = CodeableConcept(self.__add('manifestation'))
        else:
            self.manifestation = None
        self.description = self.__add('description')
        self.onset = DateTime(self.__add('onset'))
        self.severity = self.__add('severity')
        self.exposureRoute = CodeableConcept(self.__add('exposureRoute'))
        if 'note' in self.__json:
            if isinstance(self.__json['note'], list):
                self.note = self.__add_list('note')
            else:
                self.note = Annotation(self.__add('note'))
        else:
            self.note = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.substance:
            self.__json['substance'] = self.substance.json
        if self.certainty:
            self.__json['certainty'] = self.certainty
        if self.manifestation:
            self.__json['manifestation'] = self.__get_list(self.manifestation)
        if self.description:
            self.__json['description'] = self.description
        if self.onset:
            self.__json['onset'] = self.onset.json
        if self.severity:
            self.__json['severity'] = self.severity
        if self.exposureRoute:
            self.__json['exposureRoute'] = self.exposureRoute.json
        if self.note:
            self.__json['note'] = self.__get_list(self.note)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR AllergyIntoleranceReactionComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class AllergyIntolerance(DomainResource):
    '''
    FHIR AllergyIntolerance resource

     Risk of harmful or undesirable, physiological response which is unique to an individual and associated with exposure to a substance. If the element is present, it must have either a @value, an @id, or extensions

    identifier ->  This records identifiers associated with this allergy/intolerance concern that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).
    status ->  Assertion about certainty associated with the propensity, or potential risk, of a reaction to the identified Substance. 
    type ->  Identification of the underlying physiological mechanism for the reaction risk. 
    category ->  Category of the identified Substance. 
    criticality ->  Estimate of the potential clinical harm, or seriousness, of the reaction to the identified Substance. 
    substance ->  Identification of a substance, or a class of substances, that is considered to be responsible for the adverse reaction risk.
    patient ->  The patient who has the allergy or intolerance.
    recordedDate ->  Date when the sensitivity was recorded.
    recorder ->  Individual who recorded the record and takes responsibility for its content.
    reporter ->  The source of the information about the allergy that is recorded.
    onset ->  Record of the date and/or time of the onset of the Allergy or Intolerance.
    lastOccurence ->  Represents the date and/or time of the last known occurrence of a reaction event.
    note ->  Additional narrative about the propensity for the Adverse Reaction, not captured in other fields.
    reaction ->  Details about each adverse reaction event linked to exposure to the identified Substance.

    # Search parameters
        AllergyIntolerance.search.category
        AllergyIntolerance.search.criticality
        AllergyIntolerance.search.date
        AllergyIntolerance.search.identifier
        AllergyIntolerance.search.last-date
        AllergyIntolerance.search.manifestation
        AllergyIntolerance.search.onset
        AllergyIntolerance.search.patient
        AllergyIntolerance.search.recorder
        AllergyIntolerance.search.reporter
        AllergyIntolerance.search.route
        AllergyIntolerance.search.severity
        AllergyIntolerance.search.status
        AllergyIntolerance.search.substance
        AllergyIntolerance.search.type
    '''
    # search parameters
    par = [("category", "token"),
           ("criticality", "token"),
           ("date", "date"),
           ("identifier", "token"),
           ("last-date", "date"),
           ("manifestation", "token"),
           ("onset", "date"),
           ("patient", "reference"),
           ("recorder", "reference"),
           ("reporter", "reference"),
           ("route", "token"),
           ("severity", "token"),
           ("status", "token"),
           ("substance", "token"),
           ("type", "token")]

    search = Params(par, "AllergyIntolerance")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'identifier':
                    list_to_add.append(Identifier(obj))
                elif key == 'note':
                    list_to_add.append(Annotation(obj))
                elif key == 'reaction':
                    list_to_add.append(AllergyIntoleranceReactionComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR AllergyIntolerance __new__
        '''
        if json == None:
            return None
        else:
            return super(AllergyIntolerance, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR AllergyIntolerance constructor
        '''
        logging.info("FHIR AllergyIntolerance: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "AllergyIntolerance"
        if 'identifier' in self.__json:
            if isinstance(self.__json['identifier'], list):
                self.identifier = self.__add_list('identifier')
            else:
                self.identifier = Identifier(self.__add('identifier'))
        else:
            self.identifier = None
        self.status = self.__add('status')
        self.type = self.__add('type')
        self.category = self.__add('category')
        self.criticality = self.__add('criticality')
        self.substance = CodeableConcept(self.__add('substance'))
        self.patient = Reference(self.__add('patient'))
        self.recordedDate = DateTime(self.__add('recordedDate'))
        self.recorder = Reference(self.__add('recorder'))
        self.reporter = Reference(self.__add('reporter'))
        self.onset = DateTime(self.__add('onset'))
        self.lastOccurence = DateTime(self.__add('lastOccurence'))
        if 'note' in self.__json:
            if isinstance(self.__json['note'], list):
                self.note = self.__add_list('note')
            else:
                self.note = Annotation(self.__add('note'))
        else:
            self.note = None
        if 'reaction' in self.__json:
            if isinstance(self.__json['reaction'], list):
                self.reaction = self.__add_list('reaction')
            else:
                self.reaction = AllergyIntoleranceReactionComponent(self.__add('reaction'))
        else:
            self.reaction = None


        # Parent Resource Init
        super(AllergyIntolerance, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identifier:
            self.__json['identifier'] = self.__get_list(self.identifier)
        if self.status:
            self.__json['status'] = self.status
        if self.type:
            self.__json['type'] = self.type
        if self.category:
            self.__json['category'] = self.category
        if self.criticality:
            self.__json['criticality'] = self.criticality
        if self.substance:
            self.__json['substance'] = self.substance.json
        if self.patient:
            self.__json['patient'] = self.patient.json
        if self.recordedDate:
            self.__json['recordedDate'] = self.recordedDate.json
        if self.recorder:
            self.__json['recorder'] = self.recorder.json
        if self.reporter:
            self.__json['reporter'] = self.reporter.json
        if self.onset:
            self.__json['onset'] = self.onset.json
        if self.lastOccurence:
            self.__json['lastOccurence'] = self.lastOccurence.json
        if self.note:
            self.__json['note'] = self.__get_list(self.note)
        if self.reaction:
            self.__json['reaction'] = self.__get_list(self.reaction)

        # Add json attributes
        self.__json = super(AllergyIntolerance, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR AllergyIntolerance string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class AppointmentParticipantComponent(BackboneElement):
    '''
    FHIR AppointmentParticipantComponent resource

     List of participants involved in the appointment.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'type':
                    list_to_add.append(CodeableConcept(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR AppointmentParticipantComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(AppointmentParticipantComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR AppointmentParticipantComponent constructor
        '''
        logging.info("FHIR AppointmentParticipantComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        if 'type' in self.__json:
            if isinstance(self.__json['type'], list):
                self.type = self.__add_list('type')
            else:
                self.type = CodeableConcept(self.__add('type'))
        else:
            self.type = None
        self.actor = Reference(self.__add('actor'))
        self.required = self.__add('required')
        self.status = self.__add('status')



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.type:
            self.__json['type'] = self.__get_list(self.type)
        if self.actor:
            self.__json['actor'] = self.actor.json
        if self.required:
            self.__json['required'] = self.required
        if self.status:
            self.__json['status'] = self.status


        return self.__json
        
    def __repr__(self):
        '''
        FHIR AppointmentParticipantComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class Appointment(DomainResource):
    '''
    FHIR Appointment resource

     A booking of a healthcare event among patient(s), practitioner(s), related person(s) and/or device(s) for a specific date/time. This may result in one or more Encounter(s). If the element is present, it must have either a @value, an @id, or extensions

    identifier ->  This records identifiers associated with this appointment concern that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).
    status ->  The overall status of the Appointment. Each of the participants has their own participation status which indicates their involvement in the process, however this status indicates the shared status. 
    serviceCategory ->  A broad categorisation of the service that is to be performed during this appointment.
    serviceType ->  The specific service that is to be performed during this appointment.
    specialty ->  The specialty of a practitioner that would be required to perform the service requested in this appointment.
    appointmentType ->  The style of appointment or patient that has been booked in the slot (not service type).
    reason ->  The reason that this appointment is being scheduled. This is more clinical than administrative.
    priority ->  The priority of the appointment. Can be used to make informed decisions if needing to re-prioritize appointments. (The iCal Standard specifies 0 as undefined, 1 as highest, 9 as lowest priority).
    description ->  The brief description of the appointment as would be shown on a subject line in a meeting request, or appointment list. Detailed or expanded information should be put in the comment field.
    start ->  Date/Time that the appointment is to take place.
    end ->  Date/Time that the appointment is to conclude.
    minutesDuration ->  Number of minutes that the appointment is to take. This can be less than the duration between the start and end times (where actual time of appointment is only an estimate or is a planned appointment request).
    slot ->  The slot that this appointment is filling. If provided then the schedule will not be provided as slots are not recursive, and the start/end values MUST be the same as from the slot.
    created ->  The date that this appointment was initially created. This could be different to the meta.lastModified value on the initial entry, as this could have been before the resource was created on the FHIR server, and should remain unchanged over the lifespan of the appointment.
    comment ->  Additional comments about the appointment.
    participant ->  List of participants involved in the appointment.

    # Search parameters
        Appointment.search.actor
        Appointment.search.date
        Appointment.search.identifier
        Appointment.search.location
        Appointment.search.part-status
        Appointment.search.patient
        Appointment.search.practitioner
        Appointment.search.status
    '''
    # search parameters
    par = [("actor", "reference"),
           ("date", "date"),
           ("identifier", "token"),
           ("location", "reference"),
           ("part-status", "token"),
           ("patient", "reference"),
           ("practitioner", "reference"),
           ("status", "token")]

    search = Params(par, "Appointment")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'identifier':
                    list_to_add.append(Identifier(obj))
                elif key == 'serviceType':
                    list_to_add.append(CodeableConcept(obj))
                elif key == 'specialty':
                    list_to_add.append(CodeableConcept(obj))
                elif key == 'slot':
                    list_to_add.append(Reference(obj))
                elif key == 'participant':
                    list_to_add.append(AppointmentParticipantComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR Appointment __new__
        '''
        if json == None:
            return None
        else:
            return super(Appointment, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR Appointment constructor
        '''
        logging.info("FHIR Appointment: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "Appointment"
        if 'identifier' in self.__json:
            if isinstance(self.__json['identifier'], list):
                self.identifier = self.__add_list('identifier')
            else:
                self.identifier = Identifier(self.__add('identifier'))
        else:
            self.identifier = None
        self.status = self.__add('status')
        self.serviceCategory = CodeableConcept(self.__add('serviceCategory'))
        if 'serviceType' in self.__json:
            if isinstance(self.__json['serviceType'], list):
                self.serviceType = self.__add_list('serviceType')
            else:
                self.serviceType = CodeableConcept(self.__add('serviceType'))
        else:
            self.serviceType = None
        if 'specialty' in self.__json:
            if isinstance(self.__json['specialty'], list):
                self.specialty = self.__add_list('specialty')
            else:
                self.specialty = CodeableConcept(self.__add('specialty'))
        else:
            self.specialty = None
        self.appointmentType = CodeableConcept(self.__add('appointmentType'))
        self.reason = CodeableConcept(self.__add('reason'))
        self.priority = self.__add('priority')
        self.description = self.__add('description')
        self.start = self.__add('start')
        self.end = self.__add('end')
        self.minutesDuration = self.__add('minutesDuration')
        if 'slot' in self.__json:
            if isinstance(self.__json['slot'], list):
                self.slot = self.__add_list('slot')
            else:
                self.slot = Reference(self.__add('slot'))
        else:
            self.slot = None
        self.created = DateTime(self.__add('created'))
        self.comment = self.__add('comment')
        if 'participant' in self.__json:
            if isinstance(self.__json['participant'], list):
                self.participant = self.__add_list('participant')
            else:
                self.participant = AppointmentParticipantComponent(self.__add('participant'))
        else:
            self.participant = None


        # Parent Resource Init
        super(Appointment, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identifier:
            self.__json['identifier'] = self.__get_list(self.identifier)
        if self.status:
            self.__json['status'] = self.status
        if self.serviceCategory:
            self.__json['serviceCategory'] = self.serviceCategory.json
        if self.serviceType:
            self.__json['serviceType'] = self.__get_list(self.serviceType)
        if self.specialty:
            self.__json['specialty'] = self.__get_list(self.specialty)
        if self.appointmentType:
            self.__json['appointmentType'] = self.appointmentType.json
        if self.reason:
            self.__json['reason'] = self.reason.json
        if self.priority:
            self.__json['priority'] = self.priority
        if self.description:
            self.__json['description'] = self.description
        if self.start:
            self.__json['start'] = self.start
        if self.end:
            self.__json['end'] = self.end
        if self.minutesDuration:
            self.__json['minutesDuration'] = self.minutesDuration
        if self.slot:
            self.__json['slot'] = self.__get_list(self.slot)
        if self.created:
            self.__json['created'] = self.created.json
        if self.comment:
            self.__json['comment'] = self.comment
        if self.participant:
            self.__json['participant'] = self.__get_list(self.participant)

        # Add json attributes
        self.__json = super(Appointment, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR Appointment string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class AppointmentResponse(DomainResource):
    '''
    FHIR AppointmentResponse resource

     A reply to an appointment request for a patient and/or practitioner(s), such as a confirmation or rejection. If the element is present, it must have either a @value, an @id, or extensions

    identifier ->  This records identifiers associated with this appointment response concern that are defined by business processes and/ or used to refer to it when a direct URL reference to the resource itself is not appropriate.
    appointment ->  Appointment that this response is replying to.
    start ->  Date/Time that the appointment is to take place, or requested new start time.
    end ->  This may be either the same as the appointment request to confirm the details of the appointment, or alternately a new time to request a re-negotiation of the end time.
    participantType ->  Role of participant in the appointment.
    actor ->  A Person, Location/HealthcareService or Device that is participating in the appointment.
    participantStatus ->  Participation status of the participant. When the status is declined or tentative if the start/end times are different to the appointment, then these times should be interpreted as a requested time change. When the status is accepted, the times can either be the time of the appointment (as a confirmation of the time) or can be empty.
    comment ->  Additional comments about the appointment.

    # Search parameters
        AppointmentResponse.search.actor
        AppointmentResponse.search.appointment
        AppointmentResponse.search.identifier
        AppointmentResponse.search.location
        AppointmentResponse.search.part-status
        AppointmentResponse.search.patient
        AppointmentResponse.search.practitioner
    '''
    # search parameters
    par = [("actor", "reference"),
           ("appointment", "reference"),
           ("identifier", "token"),
           ("location", "reference"),
           ("part-status", "token"),
           ("patient", "reference"),
           ("practitioner", "reference")]

    search = Params(par, "AppointmentResponse")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'identifier':
                    list_to_add.append(Identifier(obj))
                elif key == 'participantType':
                    list_to_add.append(CodeableConcept(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR AppointmentResponse __new__
        '''
        if json == None:
            return None
        else:
            return super(AppointmentResponse, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR AppointmentResponse constructor
        '''
        logging.info("FHIR AppointmentResponse: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "AppointmentResponse"
        if 'identifier' in self.__json:
            if isinstance(self.__json['identifier'], list):
                self.identifier = self.__add_list('identifier')
            else:
                self.identifier = Identifier(self.__add('identifier'))
        else:
            self.identifier = None
        self.appointment = Reference(self.__add('appointment'))
        self.start = self.__add('start')
        self.end = self.__add('end')
        if 'participantType' in self.__json:
            if isinstance(self.__json['participantType'], list):
                self.participantType = self.__add_list('participantType')
            else:
                self.participantType = CodeableConcept(self.__add('participantType'))
        else:
            self.participantType = None
        self.actor = Reference(self.__add('actor'))
        self.participantStatus = self.__add('participantStatus')
        self.comment = self.__add('comment')


        # Parent Resource Init
        super(AppointmentResponse, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identifier:
            self.__json['identifier'] = self.__get_list(self.identifier)
        if self.appointment:
            self.__json['appointment'] = self.appointment.json
        if self.start:
            self.__json['start'] = self.start
        if self.end:
            self.__json['end'] = self.end
        if self.participantType:
            self.__json['participantType'] = self.__get_list(self.participantType)
        if self.actor:
            self.__json['actor'] = self.actor.json
        if self.participantStatus:
            self.__json['participantStatus'] = self.participantStatus
        if self.comment:
            self.__json['comment'] = self.comment

        # Add json attributes
        self.__json = super(AppointmentResponse, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR AppointmentResponse string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class AuditEventNetworkComponent(BackboneElement):
    '''
    FHIR AuditEventNetworkComponent resource

     Logical network location for application activity, if the activity has a network location.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR AuditEventNetworkComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(AuditEventNetworkComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR AuditEventNetworkComponent constructor
        '''
        logging.info("FHIR AuditEventNetworkComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.address = self.__add('address')
        self.type = self.__add('type')



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.address:
            self.__json['address'] = self.address
        if self.type:
            self.__json['type'] = self.type


        return self.__json
        
    def __repr__(self):
        '''
        FHIR AuditEventNetworkComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class AuditEventAgentComponent(BackboneElement):
    '''
    FHIR AuditEventAgentComponent resource

     An actor taking an active role in the event or activity that is logged.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'role':
                    list_to_add.append(CodeableConcept(obj))
                elif key == 'purposeOfUse':
                    list_to_add.append(Coding(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR AuditEventAgentComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(AuditEventAgentComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR AuditEventAgentComponent constructor
        '''
        logging.info("FHIR AuditEventAgentComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        if 'role' in self.__json:
            if isinstance(self.__json['role'], list):
                self.role = self.__add_list('role')
            else:
                self.role = CodeableConcept(self.__add('role'))
        else:
            self.role = None
        self.reference = Reference(self.__add('reference'))
        self.userId = Identifier(self.__add('userId'))
        self.altId = self.__add('altId')
        self.name = self.__add('name')
        self.requestor = Boolean(self.__add('requestor'))
        self.location = Reference(self.__add('location'))
        if 'policy' in self.__json:
            if isinstance(self.__json['policy'], list):
                self.policy = self.__add_list('policy')
            else:
                self.policy = self.__add('policy')
        else:
            self.policy = None
        self.media = Coding(self.__add('media'))
        self.network = AuditEventNetworkComponent(self.__add('network'))
        if 'purposeOfUse' in self.__json:
            if isinstance(self.__json['purposeOfUse'], list):
                self.purposeOfUse = self.__add_list('purposeOfUse')
            else:
                self.purposeOfUse = Coding(self.__add('purposeOfUse'))
        else:
            self.purposeOfUse = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.role:
            self.__json['role'] = self.__get_list(self.role)
        if self.reference:
            self.__json['reference'] = self.reference.json
        if self.userId:
            self.__json['userId'] = self.userId.json
        if self.altId:
            self.__json['altId'] = self.altId
        if self.name:
            self.__json['name'] = self.name
        if self.requestor:
            self.__json['requestor'] = self.requestor.json
        if self.location:
            self.__json['location'] = self.location.json
        if self.policy:
            self.__json['policy'] = self.__get_list(self.policy)
        if self.media:
            self.__json['media'] = self.media.json
        if self.network:
            self.__json['network'] = self.network.json
        if self.purposeOfUse:
            self.__json['purposeOfUse'] = self.__get_list(self.purposeOfUse)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR AuditEventAgentComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class AuditEventSourceComponent(BackboneElement):
    '''
    FHIR AuditEventSourceComponent resource

     Application systems and processes.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'type':
                    list_to_add.append(Coding(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR AuditEventSourceComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(AuditEventSourceComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR AuditEventSourceComponent constructor
        '''
        logging.info("FHIR AuditEventSourceComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.site = self.__add('site')
        self.identifier = Identifier(self.__add('identifier'))
        if 'type' in self.__json:
            if isinstance(self.__json['type'], list):
                self.type = self.__add_list('type')
            else:
                self.type = Coding(self.__add('type'))
        else:
            self.type = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.site:
            self.__json['site'] = self.site
        if self.identifier:
            self.__json['identifier'] = self.identifier.json
        if self.type:
            self.__json['type'] = self.__get_list(self.type)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR AuditEventSourceComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class AuditEventDetailComponent(BackboneElement):
    '''
    FHIR AuditEventDetailComponent resource

     Additional Information about the entity.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR AuditEventDetailComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(AuditEventDetailComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR AuditEventDetailComponent constructor
        '''
        logging.info("FHIR AuditEventDetailComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType


        return self.__json
        
    def __repr__(self):
        '''
        FHIR AuditEventDetailComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class AuditEventEntityComponent(BackboneElement):
    '''
    FHIR AuditEventEntityComponent resource

     Specific instances of data or objects that have been accessed.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'securityLabel':
                    list_to_add.append(Coding(obj))
                elif key == 'detail':
                    list_to_add.append(AuditEventDetailComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR AuditEventEntityComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(AuditEventEntityComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR AuditEventEntityComponent constructor
        '''
        logging.info("FHIR AuditEventEntityComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.identifier = Identifier(self.__add('identifier'))
        self.reference = Reference(self.__add('reference'))
        self.type = Coding(self.__add('type'))
        self.role = Coding(self.__add('role'))
        self.lifecycle = Coding(self.__add('lifecycle'))
        if 'securityLabel' in self.__json:
            if isinstance(self.__json['securityLabel'], list):
                self.securityLabel = self.__add_list('securityLabel')
            else:
                self.securityLabel = Coding(self.__add('securityLabel'))
        else:
            self.securityLabel = None
        self.name = self.__add('name')
        self.description = self.__add('description')
        self.query = self.__add('query')
        if 'detail' in self.__json:
            if isinstance(self.__json['detail'], list):
                self.detail = self.__add_list('detail')
            else:
                self.detail = AuditEventDetailComponent(self.__add('detail'))
        else:
            self.detail = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identifier:
            self.__json['identifier'] = self.identifier.json
        if self.reference:
            self.__json['reference'] = self.reference.json
        if self.type:
            self.__json['type'] = self.type.json
        if self.role:
            self.__json['role'] = self.role.json
        if self.lifecycle:
            self.__json['lifecycle'] = self.lifecycle.json
        if self.securityLabel:
            self.__json['securityLabel'] = self.__get_list(self.securityLabel)
        if self.name:
            self.__json['name'] = self.name
        if self.description:
            self.__json['description'] = self.description
        if self.query:
            self.__json['query'] = self.query
        if self.detail:
            self.__json['detail'] = self.__get_list(self.detail)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR AuditEventEntityComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class AuditEvent(DomainResource):
    '''
    FHIR AuditEvent resource

     A record of an event made for purposes of maintaining a security log. Typical uses include detection of intrusion attempts and monitoring for inappropriate usage. If the element is present, it must have either a @value, an @id, or extensions

    type ->  Identifier for a family of the event.  For example, a menu item, program, rule, policy, function code, application name or URL. It identifies the performed function.
    subtype ->  Identifier for the category of event.
    action ->  Indicator for type of action performed during the event that generated the audit. 
    recorded ->  The time when the event occurred on the source.
    outcome ->  Indicates whether the event succeeded or failed. 
    outcomeDesc ->  A free text description of the outcome of the event.
    purposeOfEvent ->  The purposeOfUse (reason) that was used during the event being recorded.
    agent ->  An actor taking an active role in the event or activity that is logged.
    source ->  Application systems and processes.
    entity ->  Specific instances of data or objects that have been accessed.

    # Search parameters
        AuditEvent.search.action
        AuditEvent.search.address
        AuditEvent.search.altid
        AuditEvent.search.date
        AuditEvent.search.desc
        AuditEvent.search.identity
        AuditEvent.search.name
        AuditEvent.search.object-type
        AuditEvent.search.participant
        AuditEvent.search.patient
        AuditEvent.search.policy
        AuditEvent.search.reference
        AuditEvent.search.site
        AuditEvent.search.source
        AuditEvent.search.subtype
        AuditEvent.search.type
        AuditEvent.search.user
    '''
    # search parameters
    par = [("action", "token"),
           ("address", "token"),
           ("altid", "token"),
           ("date", "date"),
           ("desc", "string"),
           ("identity", "token"),
           ("name", "string"),
           ("object-type", "token"),
           ("participant", "reference"),
           ("patient", "reference"),
           ("policy", "uri"),
           ("reference", "reference"),
           ("site", "token"),
           ("source", "token"),
           ("subtype", "token"),
           ("type", "token"),
           ("user", "token")]

    search = Params(par, "AuditEvent")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'subtype':
                    list_to_add.append(Coding(obj))
                elif key == 'purposeOfEvent':
                    list_to_add.append(Coding(obj))
                elif key == 'agent':
                    list_to_add.append(AuditEventAgentComponent(obj))
                elif key == 'entity':
                    list_to_add.append(AuditEventEntityComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR AuditEvent __new__
        '''
        if json == None:
            return None
        else:
            return super(AuditEvent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR AuditEvent constructor
        '''
        logging.info("FHIR AuditEvent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "AuditEvent"
        self.type = Coding(self.__add('type'))
        if 'subtype' in self.__json:
            if isinstance(self.__json['subtype'], list):
                self.subtype = self.__add_list('subtype')
            else:
                self.subtype = Coding(self.__add('subtype'))
        else:
            self.subtype = None
        self.action = self.__add('action')
        self.recorded = self.__add('recorded')
        self.outcome = self.__add('outcome')
        self.outcomeDesc = self.__add('outcomeDesc')
        if 'purposeOfEvent' in self.__json:
            if isinstance(self.__json['purposeOfEvent'], list):
                self.purposeOfEvent = self.__add_list('purposeOfEvent')
            else:
                self.purposeOfEvent = Coding(self.__add('purposeOfEvent'))
        else:
            self.purposeOfEvent = None
        if 'agent' in self.__json:
            if isinstance(self.__json['agent'], list):
                self.agent = self.__add_list('agent')
            else:
                self.agent = AuditEventAgentComponent(self.__add('agent'))
        else:
            self.agent = None
        self.source = AuditEventSourceComponent(self.__add('source'))
        if 'entity' in self.__json:
            if isinstance(self.__json['entity'], list):
                self.entity = self.__add_list('entity')
            else:
                self.entity = AuditEventEntityComponent(self.__add('entity'))
        else:
            self.entity = None


        # Parent Resource Init
        super(AuditEvent, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.type:
            self.__json['type'] = self.type.json
        if self.subtype:
            self.__json['subtype'] = self.__get_list(self.subtype)
        if self.action:
            self.__json['action'] = self.action
        if self.recorded:
            self.__json['recorded'] = self.recorded
        if self.outcome:
            self.__json['outcome'] = self.outcome
        if self.outcomeDesc:
            self.__json['outcomeDesc'] = self.outcomeDesc
        if self.purposeOfEvent:
            self.__json['purposeOfEvent'] = self.__get_list(self.purposeOfEvent)
        if self.agent:
            self.__json['agent'] = self.__get_list(self.agent)
        if self.source:
            self.__json['source'] = self.source.json
        if self.entity:
            self.__json['entity'] = self.__get_list(self.entity)

        # Add json attributes
        self.__json = super(AuditEvent, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR AuditEvent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class Basic(DomainResource):
    '''
    FHIR Basic resource

     Basic is used for handling concepts not yet defined in FHIR, narrative-only resources that don't map to an existing resource, and custom resources not appropriate for inclusion in the FHIR specification. If the element is present, it must have either a @value, an @id, or extensions

    identifier ->  Identifier assigned to the resource for business purposes, outside the context of FHIR.
    code ->  Identifies the 'type' of resource - equivalent to the resource name for other resources.
    subject ->  Identifies the patient, practitioner, device or any other resource that is the "focus" of this resource.
    created ->  Identifies when the resource was first created.
    author ->  Indicates who was responsible for creating the resource instance.

    # Search parameters
        Basic.search.author
        Basic.search.code
        Basic.search.created
        Basic.search.identifier
        Basic.search.patient
        Basic.search.subject
    '''
    # search parameters
    par = [("author", "reference"),
           ("code", "token"),
           ("created", "date"),
           ("identifier", "token"),
           ("patient", "reference"),
           ("subject", "reference")]

    search = Params(par, "Basic")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'identifier':
                    list_to_add.append(Identifier(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR Basic __new__
        '''
        if json == None:
            return None
        else:
            return super(Basic, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR Basic constructor
        '''
        logging.info("FHIR Basic: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "Basic"
        if 'identifier' in self.__json:
            if isinstance(self.__json['identifier'], list):
                self.identifier = self.__add_list('identifier')
            else:
                self.identifier = Identifier(self.__add('identifier'))
        else:
            self.identifier = None
        self.code = CodeableConcept(self.__add('code'))
        self.subject = Reference(self.__add('subject'))
        self.created = Date(self.__add('created'))
        self.author = Reference(self.__add('author'))


        # Parent Resource Init
        super(Basic, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identifier:
            self.__json['identifier'] = self.__get_list(self.identifier)
        if self.code:
            self.__json['code'] = self.code.json
        if self.subject:
            self.__json['subject'] = self.subject.json
        if self.created:
            self.__json['created'] = self.created.json
        if self.author:
            self.__json['author'] = self.author.json

        # Add json attributes
        self.__json = super(Basic, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR Basic string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class Binary(Resource):
    '''
    FHIR Binary resource

     A binary resource can contain any content, whether text, image, pdf, zip archive, etc. If the element is present, it must have either a @value, an @id, or extensions

    contentType ->  MimeType of the binary content represented as a standard MimeType (BCP 13).
    content ->  The actual content, base64 encoded.

    # Search parameters
        Binary.search.contenttype
    '''
    # search parameters
    par = [("contenttype", "token")]

    search = Params(par, "Binary")


    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR Binary __new__
        '''
        if json == None:
            return None
        else:
            return super(Binary, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR Binary constructor
        '''
        logging.info("FHIR Binary: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.contentType = self.__add('contentType')
        self.content = self.__add('content')


        # Parent Resource Init
        super(Binary, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.contentType:
            self.__json['contentType'] = self.contentType
        if self.content:
            self.__json['content'] = self.content

        # Add json attributes
        self.__json = super(Binary, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR Binary string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class BodySite(DomainResource):
    '''
    FHIR BodySite resource

     Record details about the anatomical location of a specimen or body part.  This resource may be used when a coded concept does not provide the necessary detail needed for the use case. If the element is present, it must have either a @value, an @id, or extensions

    patient ->  The person to which the body site belongs.
    identifier ->  Identifier for this instance of the anatomical location.
    code ->  Named anatomical location - ideally coded where possible.
    modifier ->  Modifier to refine the anatomical location.  These include modifiers for laterality, relative location, directionality, number, and plane.
    description ->  Description of anatomical location.
    image ->  Image or images used to identify a location.

    # Search parameters
        BodySite.search.code
        BodySite.search.identifier
        BodySite.search.patient
    '''
    # search parameters
    par = [("code", "token"),
           ("identifier", "token"),
           ("patient", "reference")]

    search = Params(par, "BodySite")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'identifier':
                    list_to_add.append(Identifier(obj))
                elif key == 'modifier':
                    list_to_add.append(CodeableConcept(obj))
                elif key == 'image':
                    list_to_add.append(Attachment(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR BodySite __new__
        '''
        if json == None:
            return None
        else:
            return super(BodySite, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR BodySite constructor
        '''
        logging.info("FHIR BodySite: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "BodySite"
        self.patient = Reference(self.__add('patient'))
        if 'identifier' in self.__json:
            if isinstance(self.__json['identifier'], list):
                self.identifier = self.__add_list('identifier')
            else:
                self.identifier = Identifier(self.__add('identifier'))
        else:
            self.identifier = None
        self.code = CodeableConcept(self.__add('code'))
        if 'modifier' in self.__json:
            if isinstance(self.__json['modifier'], list):
                self.modifier = self.__add_list('modifier')
            else:
                self.modifier = CodeableConcept(self.__add('modifier'))
        else:
            self.modifier = None
        self.description = self.__add('description')
        if 'image' in self.__json:
            if isinstance(self.__json['image'], list):
                self.image = self.__add_list('image')
            else:
                self.image = Attachment(self.__add('image'))
        else:
            self.image = None


        # Parent Resource Init
        super(BodySite, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.patient:
            self.__json['patient'] = self.patient.json
        if self.identifier:
            self.__json['identifier'] = self.__get_list(self.identifier)
        if self.code:
            self.__json['code'] = self.code.json
        if self.modifier:
            self.__json['modifier'] = self.__get_list(self.modifier)
        if self.description:
            self.__json['description'] = self.description
        if self.image:
            self.__json['image'] = self.__get_list(self.image)

        # Add json attributes
        self.__json = super(BodySite, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR BodySite string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class BundleLinkComponent(BackboneElement):
    '''
    FHIR BundleLinkComponent resource

     A series of links that provide context to this bundle.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR BundleLinkComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(BundleLinkComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR BundleLinkComponent constructor
        '''
        logging.info("FHIR BundleLinkComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.relation = self.__add('relation')
        self.url = self.__add('url')



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.relation:
            self.__json['relation'] = self.relation
        if self.url:
            self.__json['url'] = self.url


        return self.__json
        
    def __repr__(self):
        '''
        FHIR BundleLinkComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class BundleSearchComponent(BackboneElement):
    '''
    FHIR BundleSearchComponent resource

     Information about the search process that lead to the creation of this entry.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR BundleSearchComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(BundleSearchComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR BundleSearchComponent constructor
        '''
        logging.info("FHIR BundleSearchComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.mode = self.__add('mode')
        self.score = self.__add('score')



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.mode:
            self.__json['mode'] = self.mode
        if self.score:
            self.__json['score'] = self.score


        return self.__json
        
    def __repr__(self):
        '''
        FHIR BundleSearchComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class BundleRequestComponent(BackboneElement):
    '''
    FHIR BundleRequestComponent resource

     Additional information about how this entry should be processed as part of a transaction.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR BundleRequestComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(BundleRequestComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR BundleRequestComponent constructor
        '''
        logging.info("FHIR BundleRequestComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.method = self.__add('method')
        self.url = self.__add('url')
        self.ifNoneMatch = self.__add('ifNoneMatch')
        self.ifModifiedSince = self.__add('ifModifiedSince')
        self.ifMatch = self.__add('ifMatch')
        self.ifNoneExist = self.__add('ifNoneExist')



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.method:
            self.__json['method'] = self.method
        if self.url:
            self.__json['url'] = self.url
        if self.ifNoneMatch:
            self.__json['ifNoneMatch'] = self.ifNoneMatch
        if self.ifModifiedSince:
            self.__json['ifModifiedSince'] = self.ifModifiedSince
        if self.ifMatch:
            self.__json['ifMatch'] = self.ifMatch
        if self.ifNoneExist:
            self.__json['ifNoneExist'] = self.ifNoneExist


        return self.__json
        
    def __repr__(self):
        '''
        FHIR BundleRequestComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class BundleResponseComponent(BackboneElement):
    '''
    FHIR BundleResponseComponent resource

     Additional information about how this entry should be processed as part of a transaction.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR BundleResponseComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(BundleResponseComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR BundleResponseComponent constructor
        '''
        logging.info("FHIR BundleResponseComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.status = self.__add('status')
        self.location = self.__add('location')
        self.etag = self.__add('etag')
        self.lastModified = self.__add('lastModified')



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.status:
            self.__json['status'] = self.status
        if self.location:
            self.__json['location'] = self.location
        if self.etag:
            self.__json['etag'] = self.etag
        if self.lastModified:
            self.__json['lastModified'] = self.lastModified


        return self.__json
        
    def __repr__(self):
        '''
        FHIR BundleResponseComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class BundleEntryComponent(BackboneElement):
    '''
    FHIR BundleEntryComponent resource

     An entry in a bundle resource - will either contain a resource, or information about a resource (transactions and history only).

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'link':
                    list_to_add.append(BundleLinkComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR BundleEntryComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(BundleEntryComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR BundleEntryComponent constructor
        '''
        logging.info("FHIR BundleEntryComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        if 'link' in self.__json:
            if isinstance(self.__json['link'], list):
                self.link = self.__add_list('link')
            else:
                self.link = BundleLinkComponent(self.__add('link'))
        else:
            self.link = None
        self.fullUrl = self.__add('fullUrl')
        self.resource = self.__add('resource')
        self.search = BundleSearchComponent(self.__add('search'))
        self.request = BundleRequestComponent(self.__add('request'))
        self.response = BundleResponseComponent(self.__add('response'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.link:
            self.__json['link'] = self.__get_list(self.link)
        if self.fullUrl:
            self.__json['fullUrl'] = self.fullUrl
        if self.resource:
            self.__json['resource'] = self.resource
        if self.search:
            self.__json['search'] = self.search.json
        if self.request:
            self.__json['request'] = self.request.json
        if self.response:
            self.__json['response'] = self.response.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR BundleEntryComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class Bundle(Resource):
    '''
    FHIR Bundle resource

     A container for a collection of resources. If the element is present, it must have either a @value, an @id, or extensions

    type ->  Indicates the purpose of this bundle- how it was intended to be used. 
    total ->  If a set of search matches, this is the total number of matches for the search (as opposed to the number of results in this bundle).
    link ->  A series of links that provide context to this bundle.
    entry ->  An entry in a bundle resource - will either contain a resource, or information about a resource (transactions and history only).
    signature ->  Digital Signature - base64 encoded. XML DigSIg or a JWT.

    # Search parameters
        Bundle.search.composition
        Bundle.search.message
        Bundle.search.type
    '''
    # search parameters
    par = [("composition", "reference"),
           ("message", "reference"),
           ("type", "token")]

    search = Params(par, "Bundle")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'link':
                    list_to_add.append(BundleLinkComponent(obj))
                elif key == 'entry':
                    list_to_add.append(BundleEntryComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR Bundle __new__
        '''
        if json == None:
            return None
        else:
            return super(Bundle, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR Bundle constructor
        '''
        logging.info("FHIR Bundle: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.type = self.__add('type')
        self.total = self.__add('total')
        if 'link' in self.__json:
            if isinstance(self.__json['link'], list):
                self.link = self.__add_list('link')
            else:
                self.link = BundleLinkComponent(self.__add('link'))
        else:
            self.link = None
        if 'entry' in self.__json:
            if isinstance(self.__json['entry'], list):
                self.entry = self.__add_list('entry')
            else:
                self.entry = BundleEntryComponent(self.__add('entry'))
        else:
            self.entry = None
        self.signature = Signature(self.__add('signature'))


        # Parent Resource Init
        super(Bundle, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.type:
            self.__json['type'] = self.type
        if self.total:
            self.__json['total'] = self.total
        if self.link:
            self.__json['link'] = self.__get_list(self.link)
        if self.entry:
            self.__json['entry'] = self.__get_list(self.entry)
        if self.signature:
            self.__json['signature'] = self.signature.json

        # Add json attributes
        self.__json = super(Bundle, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR Bundle string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class CarePlanRelatedPlanComponent(BackboneElement):
    '''
    FHIR CarePlanRelatedPlanComponent resource

     Identifies CarePlans with some sort of formal relationship to the current plan.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR CarePlanRelatedPlanComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(CarePlanRelatedPlanComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR CarePlanRelatedPlanComponent constructor
        '''
        logging.info("FHIR CarePlanRelatedPlanComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.code = self.__add('code')
        self.plan = Reference(self.__add('plan'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.code:
            self.__json['code'] = self.code
        if self.plan:
            self.__json['plan'] = self.plan.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR CarePlanRelatedPlanComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class CarePlanParticipantComponent(BackboneElement):
    '''
    FHIR CarePlanParticipantComponent resource

     Identifies all people and organizations who are expected to be involved in the care envisioned by this plan.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR CarePlanParticipantComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(CarePlanParticipantComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR CarePlanParticipantComponent constructor
        '''
        logging.info("FHIR CarePlanParticipantComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.role = CodeableConcept(self.__add('role'))
        self.member = Reference(self.__add('member'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.role:
            self.__json['role'] = self.role.json
        if self.member:
            self.__json['member'] = self.member.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR CarePlanParticipantComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class CarePlanDetailComponent(BackboneElement):
    '''
    FHIR CarePlanDetailComponent resource

     A simple summary of a planned activity suitable for a general care plan system (e.g. form driven) that doesn't know about specific resources such as procedure etc.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR CarePlanDetailComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(CarePlanDetailComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR CarePlanDetailComponent constructor
        '''
        logging.info("FHIR CarePlanDetailComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType


        return self.__json
        
    def __repr__(self):
        '''
        FHIR CarePlanDetailComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class CarePlanActivityComponent(BackboneElement):
    '''
    FHIR CarePlanActivityComponent resource

     Identifies a planned action to occur as part of the plan.  For example, a medication to be used, lab tests to perform, self-monitoring, education, etc.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'actionResulting':
                    list_to_add.append(Reference(obj))
                elif key == 'progress':
                    list_to_add.append(Annotation(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR CarePlanActivityComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(CarePlanActivityComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR CarePlanActivityComponent constructor
        '''
        logging.info("FHIR CarePlanActivityComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        if 'actionResulting' in self.__json:
            if isinstance(self.__json['actionResulting'], list):
                self.actionResulting = self.__add_list('actionResulting')
            else:
                self.actionResulting = Reference(self.__add('actionResulting'))
        else:
            self.actionResulting = None
        if 'progress' in self.__json:
            if isinstance(self.__json['progress'], list):
                self.progress = self.__add_list('progress')
            else:
                self.progress = Annotation(self.__add('progress'))
        else:
            self.progress = None
        self.reference = Reference(self.__add('reference'))
        self.detail = CarePlanDetailComponent(self.__add('detail'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.actionResulting:
            self.__json['actionResulting'] = self.__get_list(self.actionResulting)
        if self.progress:
            self.__json['progress'] = self.__get_list(self.progress)
        if self.reference:
            self.__json['reference'] = self.reference.json
        if self.detail:
            self.__json['detail'] = self.detail.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR CarePlanActivityComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class CarePlan(DomainResource):
    '''
    FHIR CarePlan resource

     Describes the intention of how one or more practitioners intend to deliver care for a particular patient, group or community for a period of time, possibly limited to care for a specific condition or set of conditions. If the element is present, it must have either a @value, an @id, or extensions

    identifier ->  This records identifiers associated with this care plan that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).
    subject ->  Identifies the patient or group whose intended care is described by the plan.
    status ->  Indicates whether the plan is currently being acted upon, represents future intentions or is now a historical record. 
    context ->  Identifies the context in which this particular CarePlan is defined.
    period ->  Indicates when the plan did (or is intended to) come into effect and end.
    author ->  Identifies the individual(s) or ogranization who is responsible for the content of the care plan.
    modified ->  Identifies the most recent date on which the plan has been revised.
    category ->  Identifies what "kind" of plan this is to support differentiation between multiple co-existing plans; e.g. "Home health", "psychiatric", "asthma", "disease management", "wellness plan", etc.
    description ->  A description of the scope and nature of the plan.
    addresses ->  Identifies the conditions/problems/concerns/diagnoses/etc. whose management and/or mitigation are handled by this plan.
    support ->  Identifies portions of the patient's record that specifically influenced the formation of the plan.  These might include co-morbidities, recent procedures, limitations, recent assessments, etc.
    relatedPlan ->  Identifies CarePlans with some sort of formal relationship to the current plan.
    participant ->  Identifies all people and organizations who are expected to be involved in the care envisioned by this plan.
    goal ->  Describes the intended objective(s) of carrying out the care plan.
    activity ->  Identifies a planned action to occur as part of the plan.  For example, a medication to be used, lab tests to perform, self-monitoring, education, etc.
    note ->  General notes about the care plan not covered elsewhere.

    # Search parameters
        CarePlan.search.activitycode
        CarePlan.search.activitydate
        CarePlan.search.activityreference
        CarePlan.search.condition
        CarePlan.search.date
        CarePlan.search.goal
        CarePlan.search.participant
        CarePlan.search.patient
        CarePlan.search.performer
        CarePlan.search.related
        CarePlan.search.relatedcode
        CarePlan.search.relatedplan
        CarePlan.search.subject
    '''
    # search parameters
    par = [("activitycode", "token"),
           ("activitydate", "date"),
           ("activityreference", "reference"),
           ("condition", "reference"),
           ("date", "date"),
           ("goal", "reference"),
           ("participant", "reference"),
           ("patient", "reference"),
           ("performer", "reference"),
           ("related", "None"),
           ("relatedcode", "token"),
           ("relatedplan", "reference"),
           ("subject", "reference")]

    search = Params(par, "CarePlan")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'identifier':
                    list_to_add.append(Identifier(obj))
                elif key == 'author':
                    list_to_add.append(Reference(obj))
                elif key == 'category':
                    list_to_add.append(CodeableConcept(obj))
                elif key == 'addresses':
                    list_to_add.append(Reference(obj))
                elif key == 'support':
                    list_to_add.append(Reference(obj))
                elif key == 'relatedPlan':
                    list_to_add.append(CarePlanRelatedPlanComponent(obj))
                elif key == 'participant':
                    list_to_add.append(CarePlanParticipantComponent(obj))
                elif key == 'goal':
                    list_to_add.append(Reference(obj))
                elif key == 'activity':
                    list_to_add.append(CarePlanActivityComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR CarePlan __new__
        '''
        if json == None:
            return None
        else:
            return super(CarePlan, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR CarePlan constructor
        '''
        logging.info("FHIR CarePlan: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "CarePlan"
        if 'identifier' in self.__json:
            if isinstance(self.__json['identifier'], list):
                self.identifier = self.__add_list('identifier')
            else:
                self.identifier = Identifier(self.__add('identifier'))
        else:
            self.identifier = None
        self.subject = Reference(self.__add('subject'))
        self.status = self.__add('status')
        self.context = Reference(self.__add('context'))
        self.period = Period(self.__add('period'))
        if 'author' in self.__json:
            if isinstance(self.__json['author'], list):
                self.author = self.__add_list('author')
            else:
                self.author = Reference(self.__add('author'))
        else:
            self.author = None
        self.modified = DateTime(self.__add('modified'))
        if 'category' in self.__json:
            if isinstance(self.__json['category'], list):
                self.category = self.__add_list('category')
            else:
                self.category = CodeableConcept(self.__add('category'))
        else:
            self.category = None
        self.description = self.__add('description')
        if 'addresses' in self.__json:
            if isinstance(self.__json['addresses'], list):
                self.addresses = self.__add_list('addresses')
            else:
                self.addresses = Reference(self.__add('addresses'))
        else:
            self.addresses = None
        if 'support' in self.__json:
            if isinstance(self.__json['support'], list):
                self.support = self.__add_list('support')
            else:
                self.support = Reference(self.__add('support'))
        else:
            self.support = None
        if 'relatedPlan' in self.__json:
            if isinstance(self.__json['relatedPlan'], list):
                self.relatedPlan = self.__add_list('relatedPlan')
            else:
                self.relatedPlan = CarePlanRelatedPlanComponent(self.__add('relatedPlan'))
        else:
            self.relatedPlan = None
        if 'participant' in self.__json:
            if isinstance(self.__json['participant'], list):
                self.participant = self.__add_list('participant')
            else:
                self.participant = CarePlanParticipantComponent(self.__add('participant'))
        else:
            self.participant = None
        if 'goal' in self.__json:
            if isinstance(self.__json['goal'], list):
                self.goal = self.__add_list('goal')
            else:
                self.goal = Reference(self.__add('goal'))
        else:
            self.goal = None
        if 'activity' in self.__json:
            if isinstance(self.__json['activity'], list):
                self.activity = self.__add_list('activity')
            else:
                self.activity = CarePlanActivityComponent(self.__add('activity'))
        else:
            self.activity = None
        self.note = Annotation(self.__add('note'))


        # Parent Resource Init
        super(CarePlan, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identifier:
            self.__json['identifier'] = self.__get_list(self.identifier)
        if self.subject:
            self.__json['subject'] = self.subject.json
        if self.status:
            self.__json['status'] = self.status
        if self.context:
            self.__json['context'] = self.context.json
        if self.period:
            self.__json['period'] = self.period.json
        if self.author:
            self.__json['author'] = self.__get_list(self.author)
        if self.modified:
            self.__json['modified'] = self.modified.json
        if self.category:
            self.__json['category'] = self.__get_list(self.category)
        if self.description:
            self.__json['description'] = self.description
        if self.addresses:
            self.__json['addresses'] = self.__get_list(self.addresses)
        if self.support:
            self.__json['support'] = self.__get_list(self.support)
        if self.relatedPlan:
            self.__json['relatedPlan'] = self.__get_list(self.relatedPlan)
        if self.participant:
            self.__json['participant'] = self.__get_list(self.participant)
        if self.goal:
            self.__json['goal'] = self.__get_list(self.goal)
        if self.activity:
            self.__json['activity'] = self.__get_list(self.activity)
        if self.note:
            self.__json['note'] = self.note.json

        # Add json attributes
        self.__json = super(CarePlan, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR CarePlan string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class CareTeamParticipantComponent(BackboneElement):
    '''
    FHIR CareTeamParticipantComponent resource

     Identifies all people and organizations who are expected to be involved in the care team.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR CareTeamParticipantComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(CareTeamParticipantComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR CareTeamParticipantComponent constructor
        '''
        logging.info("FHIR CareTeamParticipantComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.role = CodeableConcept(self.__add('role'))
        self.member = Reference(self.__add('member'))
        self.period = Period(self.__add('period'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.role:
            self.__json['role'] = self.role.json
        if self.member:
            self.__json['member'] = self.member.json
        if self.period:
            self.__json['period'] = self.period.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR CareTeamParticipantComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class CareTeam(DomainResource):
    '''
    FHIR CareTeam resource

     The Care Team includes all the people and organizations who plan to participate in the coordination and delivery of care for a patient. If the element is present, it must have either a @value, an @id, or extensions

    identifier ->  This records identifiers associated with this care team that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate.
    status ->  Indicates whether the care team is currently active, suspended, inactive, or entered in error.
    type ->  Identifies what kind of team.  This is to support differentiation between multiple co-existing teams, such as care plan team, episode of care team, longitudinal care team.
    name ->  Name of the care team.
    subject ->  Identifies the patient or group whose intended care is handled by the team.
    period ->  Indicates when the team did (or is intended to) come into effect and end.
    participant ->  Identifies all people and organizations who are expected to be involved in the care team.
    managingOrganization ->  The organization responsible for the care team.

    
    '''
    

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'identifier':
                    list_to_add.append(Identifier(obj))
                elif key == 'type':
                    list_to_add.append(CodeableConcept(obj))
                elif key == 'participant':
                    list_to_add.append(CareTeamParticipantComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR CareTeam __new__
        '''
        if json == None:
            return None
        else:
            return super(CareTeam, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR CareTeam constructor
        '''
        logging.info("FHIR CareTeam: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "CareTeam"
        if 'identifier' in self.__json:
            if isinstance(self.__json['identifier'], list):
                self.identifier = self.__add_list('identifier')
            else:
                self.identifier = Identifier(self.__add('identifier'))
        else:
            self.identifier = None
        self.status = CodeableConcept(self.__add('status'))
        if 'type' in self.__json:
            if isinstance(self.__json['type'], list):
                self.type = self.__add_list('type')
            else:
                self.type = CodeableConcept(self.__add('type'))
        else:
            self.type = None
        self.name = self.__add('name')
        self.subject = Reference(self.__add('subject'))
        self.period = Period(self.__add('period'))
        if 'participant' in self.__json:
            if isinstance(self.__json['participant'], list):
                self.participant = self.__add_list('participant')
            else:
                self.participant = CareTeamParticipantComponent(self.__add('participant'))
        else:
            self.participant = None
        self.managingOrganization = Reference(self.__add('managingOrganization'))


        # Parent Resource Init
        super(CareTeam, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identifier:
            self.__json['identifier'] = self.__get_list(self.identifier)
        if self.status:
            self.__json['status'] = self.status.json
        if self.type:
            self.__json['type'] = self.__get_list(self.type)
        if self.name:
            self.__json['name'] = self.name
        if self.subject:
            self.__json['subject'] = self.subject.json
        if self.period:
            self.__json['period'] = self.period.json
        if self.participant:
            self.__json['participant'] = self.__get_list(self.participant)
        if self.managingOrganization:
            self.__json['managingOrganization'] = self.managingOrganization.json

        # Add json attributes
        self.__json = super(CareTeam, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR CareTeam string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ClaimRelatedComponent(BackboneElement):
    '''
    FHIR ClaimRelatedComponent resource

     Other claims which are related to this claim such as prior claim versions or for related services.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ClaimRelatedComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ClaimRelatedComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ClaimRelatedComponent constructor
        '''
        logging.info("FHIR ClaimRelatedComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.relationship = Coding(self.__add('relationship'))
        self.reference = Identifier(self.__add('reference'))
        self.claimIdentifier = Identifier(self.__add('claimIdentifier'))
        self.claimReference = Reference(self.__add('claimReference'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.relationship:
            self.__json['relationship'] = self.relationship.json
        if self.reference:
            self.__json['reference'] = self.reference.json
        if self.claimIdentifier:
            self.__json['claimIdentifier'] = self.claimIdentifier.json
        if self.claimReference:
            self.__json['claimReference'] = self.claimReference.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ClaimRelatedComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ClaimPayeeComponent(BackboneElement):
    '''
    FHIR ClaimPayeeComponent resource

     The party to be reimbursed for the services.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ClaimPayeeComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ClaimPayeeComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ClaimPayeeComponent constructor
        '''
        logging.info("FHIR ClaimPayeeComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.type = Coding(self.__add('type'))
        self.partyIdentifier = Identifier(self.__add('partyIdentifier'))
        self.partyReference = Reference(self.__add('partyReference'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.type:
            self.__json['type'] = self.type.json
        if self.partyIdentifier:
            self.__json['partyIdentifier'] = self.partyIdentifier.json
        if self.partyReference:
            self.__json['partyReference'] = self.partyReference.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ClaimPayeeComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ClaimDiagnosisComponent(BackboneElement):
    '''
    FHIR ClaimDiagnosisComponent resource

     Ordered list of patient diagnosis for which care is sought.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ClaimDiagnosisComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ClaimDiagnosisComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ClaimDiagnosisComponent constructor
        '''
        logging.info("FHIR ClaimDiagnosisComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.sequence = self.__add('sequence')
        self.diagnosis = Coding(self.__add('diagnosis'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.sequence:
            self.__json['sequence'] = self.sequence
        if self.diagnosis:
            self.__json['diagnosis'] = self.diagnosis.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ClaimDiagnosisComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ClaimProcedureComponent(BackboneElement):
    '''
    FHIR ClaimProcedureComponent resource

     Ordered list of patient procedures performed to support the adjudication.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ClaimProcedureComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ClaimProcedureComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ClaimProcedureComponent constructor
        '''
        logging.info("FHIR ClaimProcedureComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.sequence = self.__add('sequence')
        self.date = DateTime(self.__add('date'))
        self.procedureCoding = Coding(self.__add('procedureCoding'))
        self.procedureReference = Reference(self.__add('procedureReference'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.sequence:
            self.__json['sequence'] = self.sequence
        if self.date:
            self.__json['date'] = self.date.json
        if self.procedureCoding:
            self.__json['procedureCoding'] = self.procedureCoding.json
        if self.procedureReference:
            self.__json['procedureReference'] = self.procedureReference.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ClaimProcedureComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ClaimCoverageComponent(BackboneElement):
    '''
    FHIR ClaimCoverageComponent resource

     Financial instrument by which payment information for health care.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ClaimCoverageComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ClaimCoverageComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ClaimCoverageComponent constructor
        '''
        logging.info("FHIR ClaimCoverageComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.sequence = self.__add('sequence')
        self.focal = Boolean(self.__add('focal'))
        self.businessArrangement = self.__add('businessArrangement')
        if 'preAuthRef' in self.__json:
            if isinstance(self.__json['preAuthRef'], list):
                self.preAuthRef = self.__add_list('preAuthRef')
            else:
                self.preAuthRef = self.__add('preAuthRef')
        else:
            self.preAuthRef = None
        self.claimResponse = Reference(self.__add('claimResponse'))
        self.originalRuleset = Coding(self.__add('originalRuleset'))
        self.coverageIdentifier = Identifier(self.__add('coverageIdentifier'))
        self.coverageReference = Reference(self.__add('coverageReference'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.sequence:
            self.__json['sequence'] = self.sequence
        if self.focal:
            self.__json['focal'] = self.focal.json
        if self.businessArrangement:
            self.__json['businessArrangement'] = self.businessArrangement
        if self.preAuthRef:
            self.__json['preAuthRef'] = self.__get_list(self.preAuthRef)
        if self.claimResponse:
            self.__json['claimResponse'] = self.claimResponse.json
        if self.originalRuleset:
            self.__json['originalRuleset'] = self.originalRuleset.json
        if self.coverageIdentifier:
            self.__json['coverageIdentifier'] = self.coverageIdentifier.json
        if self.coverageReference:
            self.__json['coverageReference'] = self.coverageReference.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ClaimCoverageComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ClaimOnsetComponent(BackboneElement):
    '''
    FHIR ClaimOnsetComponent resource

     Period, start and last dates of aspects of the Condition or related services.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ClaimOnsetComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ClaimOnsetComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ClaimOnsetComponent constructor
        '''
        logging.info("FHIR ClaimOnsetComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.type = Coding(self.__add('type'))
        self.timeDate = Date(self.__add('timeDate'))
        self.timePeriod = Period(self.__add('timePeriod'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.type:
            self.__json['type'] = self.type.json
        if self.timeDate:
            self.__json['timeDate'] = self.timeDate.json
        if self.timePeriod:
            self.__json['timePeriod'] = self.timePeriod.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ClaimOnsetComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ClaimSubDetailComponent(BackboneElement):
    '''
    FHIR ClaimSubDetailComponent resource

     Third tier of goods and services.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'programCode':
                    list_to_add.append(Coding(obj))
                elif key == 'udi':
                    list_to_add.append(Reference(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ClaimSubDetailComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ClaimSubDetailComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ClaimSubDetailComponent constructor
        '''
        logging.info("FHIR ClaimSubDetailComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.sequence = self.__add('sequence')
        self.type = Coding(self.__add('type'))
        self.service = Coding(self.__add('service'))
        if 'programCode' in self.__json:
            if isinstance(self.__json['programCode'], list):
                self.programCode = self.__add_list('programCode')
            else:
                self.programCode = Coding(self.__add('programCode'))
        else:
            self.programCode = None
        self.quantity = SimpleQuantity(self.__add('quantity'))
        self.unitPrice = Money(self.__add('unitPrice'))
        self.factor = self.__add('factor')
        self.points = self.__add('points')
        self.net = Money(self.__add('net'))
        if 'udi' in self.__json:
            if isinstance(self.__json['udi'], list):
                self.udi = self.__add_list('udi')
            else:
                self.udi = Reference(self.__add('udi'))
        else:
            self.udi = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.sequence:
            self.__json['sequence'] = self.sequence
        if self.type:
            self.__json['type'] = self.type.json
        if self.service:
            self.__json['service'] = self.service.json
        if self.programCode:
            self.__json['programCode'] = self.__get_list(self.programCode)
        if self.quantity:
            self.__json['quantity'] = self.quantity.json
        if self.unitPrice:
            self.__json['unitPrice'] = self.unitPrice.json
        if self.factor:
            self.__json['factor'] = self.factor
        if self.points:
            self.__json['points'] = self.points
        if self.net:
            self.__json['net'] = self.net.json
        if self.udi:
            self.__json['udi'] = self.__get_list(self.udi)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ClaimSubDetailComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ClaimDetailComponent(BackboneElement):
    '''
    FHIR ClaimDetailComponent resource

     Second tier of goods and services.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'programCode':
                    list_to_add.append(Coding(obj))
                elif key == 'udi':
                    list_to_add.append(Reference(obj))
                elif key == 'subDetail':
                    list_to_add.append(ClaimSubDetailComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ClaimDetailComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ClaimDetailComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ClaimDetailComponent constructor
        '''
        logging.info("FHIR ClaimDetailComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.sequence = self.__add('sequence')
        self.type = Coding(self.__add('type'))
        self.service = Coding(self.__add('service'))
        if 'programCode' in self.__json:
            if isinstance(self.__json['programCode'], list):
                self.programCode = self.__add_list('programCode')
            else:
                self.programCode = Coding(self.__add('programCode'))
        else:
            self.programCode = None
        self.quantity = SimpleQuantity(self.__add('quantity'))
        self.unitPrice = Money(self.__add('unitPrice'))
        self.factor = self.__add('factor')
        self.points = self.__add('points')
        self.net = Money(self.__add('net'))
        if 'udi' in self.__json:
            if isinstance(self.__json['udi'], list):
                self.udi = self.__add_list('udi')
            else:
                self.udi = Reference(self.__add('udi'))
        else:
            self.udi = None
        if 'subDetail' in self.__json:
            if isinstance(self.__json['subDetail'], list):
                self.subDetail = self.__add_list('subDetail')
            else:
                self.subDetail = ClaimSubDetailComponent(self.__add('subDetail'))
        else:
            self.subDetail = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.sequence:
            self.__json['sequence'] = self.sequence
        if self.type:
            self.__json['type'] = self.type.json
        if self.service:
            self.__json['service'] = self.service.json
        if self.programCode:
            self.__json['programCode'] = self.__get_list(self.programCode)
        if self.quantity:
            self.__json['quantity'] = self.quantity.json
        if self.unitPrice:
            self.__json['unitPrice'] = self.unitPrice.json
        if self.factor:
            self.__json['factor'] = self.factor
        if self.points:
            self.__json['points'] = self.points
        if self.net:
            self.__json['net'] = self.net.json
        if self.udi:
            self.__json['udi'] = self.__get_list(self.udi)
        if self.subDetail:
            self.__json['subDetail'] = self.__get_list(self.subDetail)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ClaimDetailComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ClaimProsthesisComponent(BackboneElement):
    '''
    FHIR ClaimProsthesisComponent resource

     The materials and placement date of prior fixed prosthesis.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ClaimProsthesisComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ClaimProsthesisComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ClaimProsthesisComponent constructor
        '''
        logging.info("FHIR ClaimProsthesisComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.initial = Boolean(self.__add('initial'))
        self.priorDate = Date(self.__add('priorDate'))
        self.priorMaterial = Coding(self.__add('priorMaterial'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.initial:
            self.__json['initial'] = self.initial.json
        if self.priorDate:
            self.__json['priorDate'] = self.priorDate.json
        if self.priorMaterial:
            self.__json['priorMaterial'] = self.priorMaterial.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ClaimProsthesisComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ClaimItemComponent(BackboneElement):
    '''
    FHIR ClaimItemComponent resource

     First tier of goods and services.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'serviceModifier':
                    list_to_add.append(Coding(obj))
                elif key == 'modifier':
                    list_to_add.append(Coding(obj))
                elif key == 'programCode':
                    list_to_add.append(Coding(obj))
                elif key == 'udi':
                    list_to_add.append(Reference(obj))
                elif key == 'subSite':
                    list_to_add.append(Coding(obj))
                elif key == 'detail':
                    list_to_add.append(ClaimDetailComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ClaimItemComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ClaimItemComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ClaimItemComponent constructor
        '''
        logging.info("FHIR ClaimItemComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.sequence = self.__add('sequence')
        self.type = Coding(self.__add('type'))
        self.providerQualification = Coding(self.__add('providerQualification'))
        if 'diagnosisLinkId' in self.__json:
            if isinstance(self.__json['diagnosisLinkId'], list):
                self.diagnosisLinkId = self.__add_list('diagnosisLinkId')
            else:
                self.diagnosisLinkId = self.__add('diagnosisLinkId')
        else:
            self.diagnosisLinkId = None
        self.service = Coding(self.__add('service'))
        if 'serviceModifier' in self.__json:
            if isinstance(self.__json['serviceModifier'], list):
                self.serviceModifier = self.__add_list('serviceModifier')
            else:
                self.serviceModifier = Coding(self.__add('serviceModifier'))
        else:
            self.serviceModifier = None
        if 'modifier' in self.__json:
            if isinstance(self.__json['modifier'], list):
                self.modifier = self.__add_list('modifier')
            else:
                self.modifier = Coding(self.__add('modifier'))
        else:
            self.modifier = None
        if 'programCode' in self.__json:
            if isinstance(self.__json['programCode'], list):
                self.programCode = self.__add_list('programCode')
            else:
                self.programCode = Coding(self.__add('programCode'))
        else:
            self.programCode = None
        self.place = Coding(self.__add('place'))
        self.quantity = SimpleQuantity(self.__add('quantity'))
        self.unitPrice = Money(self.__add('unitPrice'))
        self.factor = self.__add('factor')
        self.points = self.__add('points')
        self.net = Money(self.__add('net'))
        if 'udi' in self.__json:
            if isinstance(self.__json['udi'], list):
                self.udi = self.__add_list('udi')
            else:
                self.udi = Reference(self.__add('udi'))
        else:
            self.udi = None
        self.bodySite = Coding(self.__add('bodySite'))
        if 'subSite' in self.__json:
            if isinstance(self.__json['subSite'], list):
                self.subSite = self.__add_list('subSite')
            else:
                self.subSite = Coding(self.__add('subSite'))
        else:
            self.subSite = None
        if 'detail' in self.__json:
            if isinstance(self.__json['detail'], list):
                self.detail = self.__add_list('detail')
            else:
                self.detail = ClaimDetailComponent(self.__add('detail'))
        else:
            self.detail = None
        self.prosthesis = ClaimProsthesisComponent(self.__add('prosthesis'))
        self.providerIdentifier = Identifier(self.__add('providerIdentifier'))
        self.providerReference = Reference(self.__add('providerReference'))
        self.supervisorIdentifier = Identifier(self.__add('supervisorIdentifier'))
        self.supervisorReference = Reference(self.__add('supervisorReference'))
        self.servicedDate = Date(self.__add('servicedDate'))
        self.servicedPeriod = Period(self.__add('servicedPeriod'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.sequence:
            self.__json['sequence'] = self.sequence
        if self.type:
            self.__json['type'] = self.type.json
        if self.providerQualification:
            self.__json['providerQualification'] = self.providerQualification.json
        if self.diagnosisLinkId:
            self.__json['diagnosisLinkId'] = self.__get_list(self.diagnosisLinkId)
        if self.service:
            self.__json['service'] = self.service.json
        if self.serviceModifier:
            self.__json['serviceModifier'] = self.__get_list(self.serviceModifier)
        if self.modifier:
            self.__json['modifier'] = self.__get_list(self.modifier)
        if self.programCode:
            self.__json['programCode'] = self.__get_list(self.programCode)
        if self.place:
            self.__json['place'] = self.place.json
        if self.quantity:
            self.__json['quantity'] = self.quantity.json
        if self.unitPrice:
            self.__json['unitPrice'] = self.unitPrice.json
        if self.factor:
            self.__json['factor'] = self.factor
        if self.points:
            self.__json['points'] = self.points
        if self.net:
            self.__json['net'] = self.net.json
        if self.udi:
            self.__json['udi'] = self.__get_list(self.udi)
        if self.bodySite:
            self.__json['bodySite'] = self.bodySite.json
        if self.subSite:
            self.__json['subSite'] = self.__get_list(self.subSite)
        if self.detail:
            self.__json['detail'] = self.__get_list(self.detail)
        if self.prosthesis:
            self.__json['prosthesis'] = self.prosthesis.json
        if self.providerIdentifier:
            self.__json['providerIdentifier'] = self.providerIdentifier.json
        if self.providerReference:
            self.__json['providerReference'] = self.providerReference.json
        if self.supervisorIdentifier:
            self.__json['supervisorIdentifier'] = self.supervisorIdentifier.json
        if self.supervisorReference:
            self.__json['supervisorReference'] = self.supervisorReference.json
        if self.servicedDate:
            self.__json['servicedDate'] = self.servicedDate.json
        if self.servicedPeriod:
            self.__json['servicedPeriod'] = self.servicedPeriod.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ClaimItemComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ClaimMissingTeethComponent(BackboneElement):
    '''
    FHIR ClaimMissingTeethComponent resource

     A list of teeth which would be expected but are not found due to having been previously  extracted or for other reasons.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ClaimMissingTeethComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ClaimMissingTeethComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ClaimMissingTeethComponent constructor
        '''
        logging.info("FHIR ClaimMissingTeethComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.tooth = Coding(self.__add('tooth'))
        self.reason = Coding(self.__add('reason'))
        self.extractionDate = Date(self.__add('extractionDate'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.tooth:
            self.__json['tooth'] = self.tooth.json
        if self.reason:
            self.__json['reason'] = self.reason.json
        if self.extractionDate:
            self.__json['extractionDate'] = self.extractionDate.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ClaimMissingTeethComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class Claim(DomainResource):
    '''
    FHIR Claim resource

     A provider issued list of services and products provided, or to be provided, to a patient which is provided to an insurer for payment recovery. If the element is present, it must have either a @value, an @id, or extensions

    type ->  The category of claim. 
    subType ->  A finer grained suite of claim subtype codes which may convey Inpatient vs Outpatient and/or a specialty service. In the US the BillType.
    identifier ->  The business identifier for the instance: claim number, pre-determination or pre-authorization number.
    ruleset ->  The version of the specification on which this instance relies.
    originalRuleset ->  The version of the specification from which the original instance was created.
    created ->  The date when the enclosed suite of services were performed or completed.
    billablePeriod ->  The billable period for which charges are being submitted.
    use ->  Complete (Bill or Claim), Proposed (Pre-Authorization), Exploratory (Pre-determination). 
    priority ->  Immediate (STAT), best effort (NORMAL), deferred (DEFER).
    fundsReserve ->  In the case of a Pre-Determination/Pre-Authorization the provider may request that funds in the amount of the expected Benefit be reserved ('Patient' or 'Provider') to pay for the Benefits determined on the subsequent claim(s). 'None' explicitly indicates no funds reserving is requested.
    related ->  Other claims which are related to this claim such as prior claim versions or for related services.
    payee ->  The party to be reimbursed for the services.
    occurrenceCode ->  **Insert definition of Occurrence codes.
    occurenceSpanCode ->  **Insert definition of Occurrence Span codes.
    valueCode ->  **Insert definition of Value codes.
    diagnosis ->  Ordered list of patient diagnosis for which care is sought.
    procedure ->  Ordered list of patient procedures performed to support the adjudication.
    specialCondition ->  List of special conditions relating to the setting, treatment or patient  for which care is sought which may influence the adjudication.
    coverage ->  Financial instrument by which payment information for health care.
    accidentDate ->  Date of an accident which these services are addressing.
    accidentType ->  Type of accident: work, auto, etc.
    interventionException ->  A list of intervention and exception codes which may influence the adjudication of the claim.
    onset ->  Period, start and last dates of aspects of the Condition or related services.
    employmentImpacted ->  The start and optional end dates of when the patient was precluded from working due to the treatable condition(s).
    hospitalization ->  The start and optional end dates of when the patient was confined to a treatment center.
    item ->  First tier of goods and services.
    total ->  The total value of the claim.
    additionalMaterial ->  Code to indicate that Xrays, images, emails, documents, models or attachments are being sent in support of this submission.
    missingTeeth ->  A list of teeth which would be expected but are not found due to having been previously  extracted or for other reasons.
    targetIdentifier ->  Insurer Identifier, typical BIN number (6 digit).
    targetReference ->  Insurer Identifier, typical BIN number (6 digit).
    providerIdentifier ->  The provider which is responsible for the bill, claim pre-determination, pre-authorization.
    providerReference ->  The provider which is responsible for the bill, claim pre-determination, pre-authorization.
    organizationIdentifier ->  The organization which is responsible for the bill, claim pre-determination, pre-authorization.
    organizationReference ->  The organization which is responsible for the bill, claim pre-determination, pre-authorization.
    entererIdentifier ->  Person who created the invoice/claim/pre-determination or pre-authorization.
    entererReference ->  Person who created the invoice/claim/pre-determination or pre-authorization.
    facilityIdentifier ->  Facility where the services were provided.
    facilityReference ->  Facility where the services were provided.
    prescriptionIdentifier ->  Prescription to support the dispensing of Pharmacy or Vision products.
    prescriptionReference ->  Prescription to support the dispensing of Pharmacy or Vision products.
    originalPrescriptionIdentifier ->  Original prescription which has been superceded by this prescription to support the dispensing of pharmacy services, medications or products.
    originalPrescriptionReference ->  Original prescription which has been superceded by this prescription to support the dispensing of pharmacy services, medications or products.
    referralIdentifier ->  The referral resource which lists the date, practitioner, reason and other supporting information.
    referralReference ->  The referral resource which lists the date, practitioner, reason and other supporting information.
    patientIdentifier ->  Patient Resource.
    patientReference ->  Patient Resource.
    accidentLocationAddress ->  Accident Place.
    accidentLocationReference ->  Accident Place.

    # Search parameters
        Claim.search.identifier
        Claim.search.patient
        Claim.search.priority
        Claim.search.provider
        Claim.search.use
    '''
    # search parameters
    par = [("identifier", "token"),
           ("patient", "reference"),
           ("priority", "token"),
           ("provider", "reference"),
           ("use", "token")]

    search = Params(par, "Claim")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'subType':
                    list_to_add.append(Coding(obj))
                elif key == 'identifier':
                    list_to_add.append(Identifier(obj))
                elif key == 'related':
                    list_to_add.append(ClaimRelatedComponent(obj))
                elif key == 'occurrenceCode':
                    list_to_add.append(Coding(obj))
                elif key == 'occurenceSpanCode':
                    list_to_add.append(Coding(obj))
                elif key == 'valueCode':
                    list_to_add.append(Coding(obj))
                elif key == 'diagnosis':
                    list_to_add.append(ClaimDiagnosisComponent(obj))
                elif key == 'procedure':
                    list_to_add.append(ClaimProcedureComponent(obj))
                elif key == 'specialCondition':
                    list_to_add.append(Coding(obj))
                elif key == 'coverage':
                    list_to_add.append(ClaimCoverageComponent(obj))
                elif key == 'interventionException':
                    list_to_add.append(Coding(obj))
                elif key == 'onset':
                    list_to_add.append(ClaimOnsetComponent(obj))
                elif key == 'item':
                    list_to_add.append(ClaimItemComponent(obj))
                elif key == 'additionalMaterial':
                    list_to_add.append(Coding(obj))
                elif key == 'missingTeeth':
                    list_to_add.append(ClaimMissingTeethComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR Claim __new__
        '''
        if json == None:
            return None
        else:
            return super(Claim, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR Claim constructor
        '''
        logging.info("FHIR Claim: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "Claim"
        self.type = self.__add('type')
        if 'subType' in self.__json:
            if isinstance(self.__json['subType'], list):
                self.subType = self.__add_list('subType')
            else:
                self.subType = Coding(self.__add('subType'))
        else:
            self.subType = None
        if 'identifier' in self.__json:
            if isinstance(self.__json['identifier'], list):
                self.identifier = self.__add_list('identifier')
            else:
                self.identifier = Identifier(self.__add('identifier'))
        else:
            self.identifier = None
        self.ruleset = Coding(self.__add('ruleset'))
        self.originalRuleset = Coding(self.__add('originalRuleset'))
        self.created = DateTime(self.__add('created'))
        self.billablePeriod = Period(self.__add('billablePeriod'))
        self.use = self.__add('use')
        self.priority = Coding(self.__add('priority'))
        self.fundsReserve = Coding(self.__add('fundsReserve'))
        if 'related' in self.__json:
            if isinstance(self.__json['related'], list):
                self.related = self.__add_list('related')
            else:
                self.related = ClaimRelatedComponent(self.__add('related'))
        else:
            self.related = None
        self.payee = ClaimPayeeComponent(self.__add('payee'))
        if 'occurrenceCode' in self.__json:
            if isinstance(self.__json['occurrenceCode'], list):
                self.occurrenceCode = self.__add_list('occurrenceCode')
            else:
                self.occurrenceCode = Coding(self.__add('occurrenceCode'))
        else:
            self.occurrenceCode = None
        if 'occurenceSpanCode' in self.__json:
            if isinstance(self.__json['occurenceSpanCode'], list):
                self.occurenceSpanCode = self.__add_list('occurenceSpanCode')
            else:
                self.occurenceSpanCode = Coding(self.__add('occurenceSpanCode'))
        else:
            self.occurenceSpanCode = None
        if 'valueCode' in self.__json:
            if isinstance(self.__json['valueCode'], list):
                self.valueCode = self.__add_list('valueCode')
            else:
                self.valueCode = Coding(self.__add('valueCode'))
        else:
            self.valueCode = None
        if 'diagnosis' in self.__json:
            if isinstance(self.__json['diagnosis'], list):
                self.diagnosis = self.__add_list('diagnosis')
            else:
                self.diagnosis = ClaimDiagnosisComponent(self.__add('diagnosis'))
        else:
            self.diagnosis = None
        if 'procedure' in self.__json:
            if isinstance(self.__json['procedure'], list):
                self.procedure = self.__add_list('procedure')
            else:
                self.procedure = ClaimProcedureComponent(self.__add('procedure'))
        else:
            self.procedure = None
        if 'specialCondition' in self.__json:
            if isinstance(self.__json['specialCondition'], list):
                self.specialCondition = self.__add_list('specialCondition')
            else:
                self.specialCondition = Coding(self.__add('specialCondition'))
        else:
            self.specialCondition = None
        if 'coverage' in self.__json:
            if isinstance(self.__json['coverage'], list):
                self.coverage = self.__add_list('coverage')
            else:
                self.coverage = ClaimCoverageComponent(self.__add('coverage'))
        else:
            self.coverage = None
        self.accidentDate = Date(self.__add('accidentDate'))
        self.accidentType = Coding(self.__add('accidentType'))
        if 'interventionException' in self.__json:
            if isinstance(self.__json['interventionException'], list):
                self.interventionException = self.__add_list('interventionException')
            else:
                self.interventionException = Coding(self.__add('interventionException'))
        else:
            self.interventionException = None
        if 'onset' in self.__json:
            if isinstance(self.__json['onset'], list):
                self.onset = self.__add_list('onset')
            else:
                self.onset = ClaimOnsetComponent(self.__add('onset'))
        else:
            self.onset = None
        self.employmentImpacted = Period(self.__add('employmentImpacted'))
        self.hospitalization = Period(self.__add('hospitalization'))
        if 'item' in self.__json:
            if isinstance(self.__json['item'], list):
                self.item = self.__add_list('item')
            else:
                self.item = ClaimItemComponent(self.__add('item'))
        else:
            self.item = None
        self.total = Money(self.__add('total'))
        if 'additionalMaterial' in self.__json:
            if isinstance(self.__json['additionalMaterial'], list):
                self.additionalMaterial = self.__add_list('additionalMaterial')
            else:
                self.additionalMaterial = Coding(self.__add('additionalMaterial'))
        else:
            self.additionalMaterial = None
        if 'missingTeeth' in self.__json:
            if isinstance(self.__json['missingTeeth'], list):
                self.missingTeeth = self.__add_list('missingTeeth')
            else:
                self.missingTeeth = ClaimMissingTeethComponent(self.__add('missingTeeth'))
        else:
            self.missingTeeth = None
        self.targetIdentifier = Identifier(self.__add('targetIdentifier'))
        self.targetReference = Reference(self.__add('targetReference'))
        self.providerIdentifier = Identifier(self.__add('providerIdentifier'))
        self.providerReference = Reference(self.__add('providerReference'))
        self.organizationIdentifier = Identifier(self.__add('organizationIdentifier'))
        self.organizationReference = Reference(self.__add('organizationReference'))
        self.entererIdentifier = Identifier(self.__add('entererIdentifier'))
        self.entererReference = Reference(self.__add('entererReference'))
        self.facilityIdentifier = Identifier(self.__add('facilityIdentifier'))
        self.facilityReference = Reference(self.__add('facilityReference'))
        self.prescriptionIdentifier = Identifier(self.__add('prescriptionIdentifier'))
        self.prescriptionReference = Reference(self.__add('prescriptionReference'))
        self.originalPrescriptionIdentifier = Identifier(self.__add('originalPrescriptionIdentifier'))
        self.originalPrescriptionReference = Reference(self.__add('originalPrescriptionReference'))
        self.referralIdentifier = Identifier(self.__add('referralIdentifier'))
        self.referralReference = Reference(self.__add('referralReference'))
        self.patientIdentifier = Identifier(self.__add('patientIdentifier'))
        self.patientReference = Reference(self.__add('patientReference'))
        self.accidentLocationAddress = Address(self.__add('accidentLocationAddress'))
        self.accidentLocationReference = Reference(self.__add('accidentLocationReference'))


        # Parent Resource Init
        super(Claim, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.type:
            self.__json['type'] = self.type
        if self.subType:
            self.__json['subType'] = self.__get_list(self.subType)
        if self.identifier:
            self.__json['identifier'] = self.__get_list(self.identifier)
        if self.ruleset:
            self.__json['ruleset'] = self.ruleset.json
        if self.originalRuleset:
            self.__json['originalRuleset'] = self.originalRuleset.json
        if self.created:
            self.__json['created'] = self.created.json
        if self.billablePeriod:
            self.__json['billablePeriod'] = self.billablePeriod.json
        if self.use:
            self.__json['use'] = self.use
        if self.priority:
            self.__json['priority'] = self.priority.json
        if self.fundsReserve:
            self.__json['fundsReserve'] = self.fundsReserve.json
        if self.related:
            self.__json['related'] = self.__get_list(self.related)
        if self.payee:
            self.__json['payee'] = self.payee.json
        if self.occurrenceCode:
            self.__json['occurrenceCode'] = self.__get_list(self.occurrenceCode)
        if self.occurenceSpanCode:
            self.__json['occurenceSpanCode'] = self.__get_list(self.occurenceSpanCode)
        if self.valueCode:
            self.__json['valueCode'] = self.__get_list(self.valueCode)
        if self.diagnosis:
            self.__json['diagnosis'] = self.__get_list(self.diagnosis)
        if self.procedure:
            self.__json['procedure'] = self.__get_list(self.procedure)
        if self.specialCondition:
            self.__json['specialCondition'] = self.__get_list(self.specialCondition)
        if self.coverage:
            self.__json['coverage'] = self.__get_list(self.coverage)
        if self.accidentDate:
            self.__json['accidentDate'] = self.accidentDate.json
        if self.accidentType:
            self.__json['accidentType'] = self.accidentType.json
        if self.interventionException:
            self.__json['interventionException'] = self.__get_list(self.interventionException)
        if self.onset:
            self.__json['onset'] = self.__get_list(self.onset)
        if self.employmentImpacted:
            self.__json['employmentImpacted'] = self.employmentImpacted.json
        if self.hospitalization:
            self.__json['hospitalization'] = self.hospitalization.json
        if self.item:
            self.__json['item'] = self.__get_list(self.item)
        if self.total:
            self.__json['total'] = self.total.json
        if self.additionalMaterial:
            self.__json['additionalMaterial'] = self.__get_list(self.additionalMaterial)
        if self.missingTeeth:
            self.__json['missingTeeth'] = self.__get_list(self.missingTeeth)
        if self.targetIdentifier:
            self.__json['targetIdentifier'] = self.targetIdentifier.json
        if self.targetReference:
            self.__json['targetReference'] = self.targetReference.json
        if self.providerIdentifier:
            self.__json['providerIdentifier'] = self.providerIdentifier.json
        if self.providerReference:
            self.__json['providerReference'] = self.providerReference.json
        if self.organizationIdentifier:
            self.__json['organizationIdentifier'] = self.organizationIdentifier.json
        if self.organizationReference:
            self.__json['organizationReference'] = self.organizationReference.json
        if self.entererIdentifier:
            self.__json['entererIdentifier'] = self.entererIdentifier.json
        if self.entererReference:
            self.__json['entererReference'] = self.entererReference.json
        if self.facilityIdentifier:
            self.__json['facilityIdentifier'] = self.facilityIdentifier.json
        if self.facilityReference:
            self.__json['facilityReference'] = self.facilityReference.json
        if self.prescriptionIdentifier:
            self.__json['prescriptionIdentifier'] = self.prescriptionIdentifier.json
        if self.prescriptionReference:
            self.__json['prescriptionReference'] = self.prescriptionReference.json
        if self.originalPrescriptionIdentifier:
            self.__json['originalPrescriptionIdentifier'] = self.originalPrescriptionIdentifier.json
        if self.originalPrescriptionReference:
            self.__json['originalPrescriptionReference'] = self.originalPrescriptionReference.json
        if self.referralIdentifier:
            self.__json['referralIdentifier'] = self.referralIdentifier.json
        if self.referralReference:
            self.__json['referralReference'] = self.referralReference.json
        if self.patientIdentifier:
            self.__json['patientIdentifier'] = self.patientIdentifier.json
        if self.patientReference:
            self.__json['patientReference'] = self.patientReference.json
        if self.accidentLocationAddress:
            self.__json['accidentLocationAddress'] = self.accidentLocationAddress.json
        if self.accidentLocationReference:
            self.__json['accidentLocationReference'] = self.accidentLocationReference.json

        # Add json attributes
        self.__json = super(Claim, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR Claim string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ClaimResponseAdjudicationComponent(BackboneElement):
    '''
    FHIR ClaimResponseAdjudicationComponent resource

     The adjudications results.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ClaimResponseAdjudicationComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ClaimResponseAdjudicationComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ClaimResponseAdjudicationComponent constructor
        '''
        logging.info("FHIR ClaimResponseAdjudicationComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.category = Coding(self.__add('category'))
        self.reason = Coding(self.__add('reason'))
        self.amount = Money(self.__add('amount'))
        self.value = self.__add('value')



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.category:
            self.__json['category'] = self.category.json
        if self.reason:
            self.__json['reason'] = self.reason.json
        if self.amount:
            self.__json['amount'] = self.amount.json
        if self.value:
            self.__json['value'] = self.value


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ClaimResponseAdjudicationComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ClaimResponseAdjudication1Component(BackboneElement):
    '''
    FHIR ClaimResponseAdjudication1Component resource

     The adjudications results.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ClaimResponseAdjudication1Component __new__
        '''
        if json == None:
            return None
        else:
            return super(ClaimResponseAdjudication1Component, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ClaimResponseAdjudication1Component constructor
        '''
        logging.info("FHIR ClaimResponseAdjudication1Component: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.category = Coding(self.__add('category'))
        self.reason = Coding(self.__add('reason'))
        self.amount = Money(self.__add('amount'))
        self.value = self.__add('value')



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.category:
            self.__json['category'] = self.category.json
        if self.reason:
            self.__json['reason'] = self.reason.json
        if self.amount:
            self.__json['amount'] = self.amount.json
        if self.value:
            self.__json['value'] = self.value


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ClaimResponseAdjudication1Component string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ClaimResponseAdjudication2Component(BackboneElement):
    '''
    FHIR ClaimResponseAdjudication2Component resource

     The adjudications results.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ClaimResponseAdjudication2Component __new__
        '''
        if json == None:
            return None
        else:
            return super(ClaimResponseAdjudication2Component, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ClaimResponseAdjudication2Component constructor
        '''
        logging.info("FHIR ClaimResponseAdjudication2Component: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.category = Coding(self.__add('category'))
        self.reason = Coding(self.__add('reason'))
        self.amount = Money(self.__add('amount'))
        self.value = self.__add('value')



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.category:
            self.__json['category'] = self.category.json
        if self.reason:
            self.__json['reason'] = self.reason.json
        if self.amount:
            self.__json['amount'] = self.amount.json
        if self.value:
            self.__json['value'] = self.value


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ClaimResponseAdjudication2Component string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ClaimResponseSubDetailComponent(BackboneElement):
    '''
    FHIR ClaimResponseSubDetailComponent resource

     The third tier service adjudications for submitted services.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'adjudication':
                    list_to_add.append(ClaimResponseAdjudication2Component(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ClaimResponseSubDetailComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ClaimResponseSubDetailComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ClaimResponseSubDetailComponent constructor
        '''
        logging.info("FHIR ClaimResponseSubDetailComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.sequenceLinkId = self.__add('sequenceLinkId')
        if 'adjudication' in self.__json:
            if isinstance(self.__json['adjudication'], list):
                self.adjudication = self.__add_list('adjudication')
            else:
                self.adjudication = ClaimResponseAdjudication2Component(self.__add('adjudication'))
        else:
            self.adjudication = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.sequenceLinkId:
            self.__json['sequenceLinkId'] = self.sequenceLinkId
        if self.adjudication:
            self.__json['adjudication'] = self.__get_list(self.adjudication)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ClaimResponseSubDetailComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ClaimResponseDetailComponent(BackboneElement):
    '''
    FHIR ClaimResponseDetailComponent resource

     The second tier service adjudications for submitted services.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'adjudication':
                    list_to_add.append(ClaimResponseAdjudication1Component(obj))
                elif key == 'subDetail':
                    list_to_add.append(ClaimResponseSubDetailComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ClaimResponseDetailComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ClaimResponseDetailComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ClaimResponseDetailComponent constructor
        '''
        logging.info("FHIR ClaimResponseDetailComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.sequenceLinkId = self.__add('sequenceLinkId')
        if 'adjudication' in self.__json:
            if isinstance(self.__json['adjudication'], list):
                self.adjudication = self.__add_list('adjudication')
            else:
                self.adjudication = ClaimResponseAdjudication1Component(self.__add('adjudication'))
        else:
            self.adjudication = None
        if 'subDetail' in self.__json:
            if isinstance(self.__json['subDetail'], list):
                self.subDetail = self.__add_list('subDetail')
            else:
                self.subDetail = ClaimResponseSubDetailComponent(self.__add('subDetail'))
        else:
            self.subDetail = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.sequenceLinkId:
            self.__json['sequenceLinkId'] = self.sequenceLinkId
        if self.adjudication:
            self.__json['adjudication'] = self.__get_list(self.adjudication)
        if self.subDetail:
            self.__json['subDetail'] = self.__get_list(self.subDetail)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ClaimResponseDetailComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ClaimResponseItemComponent(BackboneElement):
    '''
    FHIR ClaimResponseItemComponent resource

     The first tier service adjudications for submitted services.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'adjudication':
                    list_to_add.append(ClaimResponseAdjudicationComponent(obj))
                elif key == 'detail':
                    list_to_add.append(ClaimResponseDetailComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ClaimResponseItemComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ClaimResponseItemComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ClaimResponseItemComponent constructor
        '''
        logging.info("FHIR ClaimResponseItemComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.sequenceLinkId = self.__add('sequenceLinkId')
        if 'noteNumber' in self.__json:
            if isinstance(self.__json['noteNumber'], list):
                self.noteNumber = self.__add_list('noteNumber')
            else:
                self.noteNumber = self.__add('noteNumber')
        else:
            self.noteNumber = None
        if 'adjudication' in self.__json:
            if isinstance(self.__json['adjudication'], list):
                self.adjudication = self.__add_list('adjudication')
            else:
                self.adjudication = ClaimResponseAdjudicationComponent(self.__add('adjudication'))
        else:
            self.adjudication = None
        if 'detail' in self.__json:
            if isinstance(self.__json['detail'], list):
                self.detail = self.__add_list('detail')
            else:
                self.detail = ClaimResponseDetailComponent(self.__add('detail'))
        else:
            self.detail = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.sequenceLinkId:
            self.__json['sequenceLinkId'] = self.sequenceLinkId
        if self.noteNumber:
            self.__json['noteNumber'] = self.__get_list(self.noteNumber)
        if self.adjudication:
            self.__json['adjudication'] = self.__get_list(self.adjudication)
        if self.detail:
            self.__json['detail'] = self.__get_list(self.detail)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ClaimResponseItemComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ClaimResponseAdjudication3Component(BackboneElement):
    '''
    FHIR ClaimResponseAdjudication3Component resource

     The adjudications results.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ClaimResponseAdjudication3Component __new__
        '''
        if json == None:
            return None
        else:
            return super(ClaimResponseAdjudication3Component, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ClaimResponseAdjudication3Component constructor
        '''
        logging.info("FHIR ClaimResponseAdjudication3Component: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.category = Coding(self.__add('category'))
        self.reason = Coding(self.__add('reason'))
        self.amount = Money(self.__add('amount'))
        self.value = self.__add('value')



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.category:
            self.__json['category'] = self.category.json
        if self.reason:
            self.__json['reason'] = self.reason.json
        if self.amount:
            self.__json['amount'] = self.amount.json
        if self.value:
            self.__json['value'] = self.value


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ClaimResponseAdjudication3Component string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ClaimResponseDetail1Component(BackboneElement):
    '''
    FHIR ClaimResponseDetail1Component resource

     The second tier service adjudications for payor added services.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ClaimResponseDetail1Component __new__
        '''
        if json == None:
            return None
        else:
            return super(ClaimResponseDetail1Component, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ClaimResponseDetail1Component constructor
        '''
        logging.info("FHIR ClaimResponseDetail1Component: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ClaimResponseDetail1Component string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ClaimResponseAddItemComponent(BackboneElement):
    '''
    FHIR ClaimResponseAddItemComponent resource

     The first tier service adjudications for payor added services.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'adjudication':
                    list_to_add.append(ClaimResponseAdjudication3Component(obj))
                elif key == 'detail':
                    list_to_add.append(ClaimResponseDetail1Component(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ClaimResponseAddItemComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ClaimResponseAddItemComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ClaimResponseAddItemComponent constructor
        '''
        logging.info("FHIR ClaimResponseAddItemComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        if 'sequenceLinkId' in self.__json:
            if isinstance(self.__json['sequenceLinkId'], list):
                self.sequenceLinkId = self.__add_list('sequenceLinkId')
            else:
                self.sequenceLinkId = self.__add('sequenceLinkId')
        else:
            self.sequenceLinkId = None
        self.service = Coding(self.__add('service'))
        self.fee = Money(self.__add('fee'))
        if 'noteNumberLinkId' in self.__json:
            if isinstance(self.__json['noteNumberLinkId'], list):
                self.noteNumberLinkId = self.__add_list('noteNumberLinkId')
            else:
                self.noteNumberLinkId = self.__add('noteNumberLinkId')
        else:
            self.noteNumberLinkId = None
        if 'adjudication' in self.__json:
            if isinstance(self.__json['adjudication'], list):
                self.adjudication = self.__add_list('adjudication')
            else:
                self.adjudication = ClaimResponseAdjudication3Component(self.__add('adjudication'))
        else:
            self.adjudication = None
        if 'detail' in self.__json:
            if isinstance(self.__json['detail'], list):
                self.detail = self.__add_list('detail')
            else:
                self.detail = ClaimResponseDetail1Component(self.__add('detail'))
        else:
            self.detail = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.sequenceLinkId:
            self.__json['sequenceLinkId'] = self.__get_list(self.sequenceLinkId)
        if self.service:
            self.__json['service'] = self.service.json
        if self.fee:
            self.__json['fee'] = self.fee.json
        if self.noteNumberLinkId:
            self.__json['noteNumberLinkId'] = self.__get_list(self.noteNumberLinkId)
        if self.adjudication:
            self.__json['adjudication'] = self.__get_list(self.adjudication)
        if self.detail:
            self.__json['detail'] = self.__get_list(self.detail)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ClaimResponseAddItemComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ClaimResponseErrorComponent(BackboneElement):
    '''
    FHIR ClaimResponseErrorComponent resource

     Mutually exclusive with Services Provided (Item).

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ClaimResponseErrorComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ClaimResponseErrorComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ClaimResponseErrorComponent constructor
        '''
        logging.info("FHIR ClaimResponseErrorComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.sequenceLinkId = self.__add('sequenceLinkId')
        self.detailSequenceLinkId = self.__add('detailSequenceLinkId')
        self.subdetailSequenceLinkId = self.__add('subdetailSequenceLinkId')
        self.code = Coding(self.__add('code'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.sequenceLinkId:
            self.__json['sequenceLinkId'] = self.sequenceLinkId
        if self.detailSequenceLinkId:
            self.__json['detailSequenceLinkId'] = self.detailSequenceLinkId
        if self.subdetailSequenceLinkId:
            self.__json['subdetailSequenceLinkId'] = self.subdetailSequenceLinkId
        if self.code:
            self.__json['code'] = self.code.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ClaimResponseErrorComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ClaimResponseNoteComponent(BackboneElement):
    '''
    FHIR ClaimResponseNoteComponent resource

     Note text.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ClaimResponseNoteComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ClaimResponseNoteComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ClaimResponseNoteComponent constructor
        '''
        logging.info("FHIR ClaimResponseNoteComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.number = self.__add('number')
        self.type = Coding(self.__add('type'))
        self.text = self.__add('text')



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.number:
            self.__json['number'] = self.number
        if self.type:
            self.__json['type'] = self.type.json
        if self.text:
            self.__json['text'] = self.text


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ClaimResponseNoteComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ClaimResponseCoverageComponent(BackboneElement):
    '''
    FHIR ClaimResponseCoverageComponent resource

     Financial instrument by which payment information for health care.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ClaimResponseCoverageComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ClaimResponseCoverageComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ClaimResponseCoverageComponent constructor
        '''
        logging.info("FHIR ClaimResponseCoverageComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.sequence = self.__add('sequence')
        self.focal = Boolean(self.__add('focal'))
        self.businessArrangement = self.__add('businessArrangement')
        if 'preAuthRef' in self.__json:
            if isinstance(self.__json['preAuthRef'], list):
                self.preAuthRef = self.__add_list('preAuthRef')
            else:
                self.preAuthRef = self.__add('preAuthRef')
        else:
            self.preAuthRef = None
        self.claimResponse = Reference(self.__add('claimResponse'))
        self.coverageIdentifier = Identifier(self.__add('coverageIdentifier'))
        self.coverageReference = Reference(self.__add('coverageReference'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.sequence:
            self.__json['sequence'] = self.sequence
        if self.focal:
            self.__json['focal'] = self.focal.json
        if self.businessArrangement:
            self.__json['businessArrangement'] = self.businessArrangement
        if self.preAuthRef:
            self.__json['preAuthRef'] = self.__get_list(self.preAuthRef)
        if self.claimResponse:
            self.__json['claimResponse'] = self.claimResponse.json
        if self.coverageIdentifier:
            self.__json['coverageIdentifier'] = self.coverageIdentifier.json
        if self.coverageReference:
            self.__json['coverageReference'] = self.coverageReference.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ClaimResponseCoverageComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ClaimResponse(DomainResource):
    '''
    FHIR ClaimResponse resource

     This resource provides the adjudication details from the processing of a Claim resource. If the element is present, it must have either a @value, an @id, or extensions

    identifier ->  The Response business identifier.
    ruleset ->  The version of the style of resource contents. This should be mapped to the allowable profiles for this and supporting resources.
    originalRuleset ->  The style (standard) and version of the original material which was converted into this resource.
    created ->  The date when the enclosed suite of services were performed or completed.
    outcome ->  Transaction status: error, complete. 
    disposition ->  A description of the status of the adjudication.
    payeeType ->  Party to be reimbursed: Subscriber, provider, other.
    item ->  The first tier service adjudications for submitted services.
    addItem ->  The first tier service adjudications for payor added services.
    error ->  Mutually exclusive with Services Provided (Item).
    totalCost ->  The total cost of the services reported.
    unallocDeductable ->  The amount of deductible applied which was not allocated to any particular service line.
    totalBenefit ->  Total amount of benefit payable (Equal to sum of the Benefit amounts from all detail lines and additions less the Unallocated Deductible).
    paymentAdjustment ->  Adjustment to the payment of this transaction which is not related to adjudication of this transaction.
    paymentAdjustmentReason ->  Reason for the payment adjustment.
    paymentDate ->  Estimated payment data.
    paymentAmount ->  Payable less any payment adjustment.
    paymentRef ->  Payment identifier.
    reserved ->  Status of funds reservation (For provider, for Patient, None).
    form ->  The form to be used for printing the content.
    note ->  Note text.
    coverage ->  Financial instrument by which payment information for health care.
    requestIdentifier ->  Original request resource referrence.
    requestReference ->  Original request resource referrence.
    organizationIdentifier ->  The Insurer who produced this adjudicated response.
    organizationReference ->  The Insurer who produced this adjudicated response.
    requestProviderIdentifier ->  The practitioner who is responsible for the services rendered to the patient.
    requestProviderReference ->  The practitioner who is responsible for the services rendered to the patient.
    requestOrganizationIdentifier ->  The organization which is responsible for the services rendered to the patient.
    requestOrganizationReference ->  The organization which is responsible for the services rendered to the patient.

    # Search parameters
        ClaimResponse.search.identifier
    '''
    # search parameters
    par = [("identifier", "token")]

    search = Params(par, "ClaimResponse")


    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'identifier':
                    list_to_add.append(Identifier(obj))
                elif key == 'item':
                    list_to_add.append(ClaimResponseItemComponent(obj))
                elif key == 'addItem':
                    list_to_add.append(ClaimResponseAddItemComponent(obj))
                elif key == 'error':
                    list_to_add.append(ClaimResponseErrorComponent(obj))
                elif key == 'note':
                    list_to_add.append(ClaimResponseNoteComponent(obj))
                elif key == 'coverage':
                    list_to_add.append(ClaimResponseCoverageComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ClaimResponse __new__
        '''
        if json == None:
            return None
        else:
            return super(ClaimResponse, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ClaimResponse constructor
        '''
        logging.info("FHIR ClaimResponse: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "ClaimResponse"
        if 'identifier' in self.__json:
            if isinstance(self.__json['identifier'], list):
                self.identifier = self.__add_list('identifier')
            else:
                self.identifier = Identifier(self.__add('identifier'))
        else:
            self.identifier = None
        self.ruleset = Coding(self.__add('ruleset'))
        self.originalRuleset = Coding(self.__add('originalRuleset'))
        self.created = DateTime(self.__add('created'))
        self.outcome = self.__add('outcome')
        self.disposition = self.__add('disposition')
        self.payeeType = Coding(self.__add('payeeType'))
        if 'item' in self.__json:
            if isinstance(self.__json['item'], list):
                self.item = self.__add_list('item')
            else:
                self.item = ClaimResponseItemComponent(self.__add('item'))
        else:
            self.item = None
        if 'addItem' in self.__json:
            if isinstance(self.__json['addItem'], list):
                self.addItem = self.__add_list('addItem')
            else:
                self.addItem = ClaimResponseAddItemComponent(self.__add('addItem'))
        else:
            self.addItem = None
        if 'error' in self.__json:
            if isinstance(self.__json['error'], list):
                self.error = self.__add_list('error')
            else:
                self.error = ClaimResponseErrorComponent(self.__add('error'))
        else:
            self.error = None
        self.totalCost = Money(self.__add('totalCost'))
        self.unallocDeductable = Money(self.__add('unallocDeductable'))
        self.totalBenefit = Money(self.__add('totalBenefit'))
        self.paymentAdjustment = Money(self.__add('paymentAdjustment'))
        self.paymentAdjustmentReason = Coding(self.__add('paymentAdjustmentReason'))
        self.paymentDate = Date(self.__add('paymentDate'))
        self.paymentAmount = Money(self.__add('paymentAmount'))
        self.paymentRef = Identifier(self.__add('paymentRef'))
        self.reserved = Coding(self.__add('reserved'))
        self.form = Coding(self.__add('form'))
        if 'note' in self.__json:
            if isinstance(self.__json['note'], list):
                self.note = self.__add_list('note')
            else:
                self.note = ClaimResponseNoteComponent(self.__add('note'))
        else:
            self.note = None
        if 'coverage' in self.__json:
            if isinstance(self.__json['coverage'], list):
                self.coverage = self.__add_list('coverage')
            else:
                self.coverage = ClaimResponseCoverageComponent(self.__add('coverage'))
        else:
            self.coverage = None
        self.requestIdentifier = Identifier(self.__add('requestIdentifier'))
        self.requestReference = Reference(self.__add('requestReference'))
        self.organizationIdentifier = Identifier(self.__add('organizationIdentifier'))
        self.organizationReference = Reference(self.__add('organizationReference'))
        self.requestProviderIdentifier = Identifier(self.__add('requestProviderIdentifier'))
        self.requestProviderReference = Reference(self.__add('requestProviderReference'))
        self.requestOrganizationIdentifier = Identifier(self.__add('requestOrganizationIdentifier'))
        self.requestOrganizationReference = Reference(self.__add('requestOrganizationReference'))


        # Parent Resource Init
        super(ClaimResponse, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identifier:
            self.__json['identifier'] = self.__get_list(self.identifier)
        if self.ruleset:
            self.__json['ruleset'] = self.ruleset.json
        if self.originalRuleset:
            self.__json['originalRuleset'] = self.originalRuleset.json
        if self.created:
            self.__json['created'] = self.created.json
        if self.outcome:
            self.__json['outcome'] = self.outcome
        if self.disposition:
            self.__json['disposition'] = self.disposition
        if self.payeeType:
            self.__json['payeeType'] = self.payeeType.json
        if self.item:
            self.__json['item'] = self.__get_list(self.item)
        if self.addItem:
            self.__json['addItem'] = self.__get_list(self.addItem)
        if self.error:
            self.__json['error'] = self.__get_list(self.error)
        if self.totalCost:
            self.__json['totalCost'] = self.totalCost.json
        if self.unallocDeductable:
            self.__json['unallocDeductable'] = self.unallocDeductable.json
        if self.totalBenefit:
            self.__json['totalBenefit'] = self.totalBenefit.json
        if self.paymentAdjustment:
            self.__json['paymentAdjustment'] = self.paymentAdjustment.json
        if self.paymentAdjustmentReason:
            self.__json['paymentAdjustmentReason'] = self.paymentAdjustmentReason.json
        if self.paymentDate:
            self.__json['paymentDate'] = self.paymentDate.json
        if self.paymentAmount:
            self.__json['paymentAmount'] = self.paymentAmount.json
        if self.paymentRef:
            self.__json['paymentRef'] = self.paymentRef.json
        if self.reserved:
            self.__json['reserved'] = self.reserved.json
        if self.form:
            self.__json['form'] = self.form.json
        if self.note:
            self.__json['note'] = self.__get_list(self.note)
        if self.coverage:
            self.__json['coverage'] = self.__get_list(self.coverage)
        if self.requestIdentifier:
            self.__json['requestIdentifier'] = self.requestIdentifier.json
        if self.requestReference:
            self.__json['requestReference'] = self.requestReference.json
        if self.organizationIdentifier:
            self.__json['organizationIdentifier'] = self.organizationIdentifier.json
        if self.organizationReference:
            self.__json['organizationReference'] = self.organizationReference.json
        if self.requestProviderIdentifier:
            self.__json['requestProviderIdentifier'] = self.requestProviderIdentifier.json
        if self.requestProviderReference:
            self.__json['requestProviderReference'] = self.requestProviderReference.json
        if self.requestOrganizationIdentifier:
            self.__json['requestOrganizationIdentifier'] = self.requestOrganizationIdentifier.json
        if self.requestOrganizationReference:
            self.__json['requestOrganizationReference'] = self.requestOrganizationReference.json

        # Add json attributes
        self.__json = super(ClaimResponse, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR ClaimResponse string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ClinicalImpressionInvestigationsComponent(BackboneElement):
    '''
    FHIR ClinicalImpressionInvestigationsComponent resource

     One or more sets of investigations (signs, symptions, etc.). The actual grouping of investigations vary greatly depending on the type and context of the assessment. These investigations may include data generated during the assessment process, or data previously generated and recorded that is pertinent to the outcomes.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'item':
                    list_to_add.append(Reference(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ClinicalImpressionInvestigationsComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ClinicalImpressionInvestigationsComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ClinicalImpressionInvestigationsComponent constructor
        '''
        logging.info("FHIR ClinicalImpressionInvestigationsComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.code = CodeableConcept(self.__add('code'))
        if 'item' in self.__json:
            if isinstance(self.__json['item'], list):
                self.item = self.__add_list('item')
            else:
                self.item = Reference(self.__add('item'))
        else:
            self.item = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.code:
            self.__json['code'] = self.code.json
        if self.item:
            self.__json['item'] = self.__get_list(self.item)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ClinicalImpressionInvestigationsComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ClinicalImpressionFindingComponent(BackboneElement):
    '''
    FHIR ClinicalImpressionFindingComponent resource

     Specific findings or diagnoses that was considered likely or relevant to ongoing treatment.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ClinicalImpressionFindingComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ClinicalImpressionFindingComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ClinicalImpressionFindingComponent constructor
        '''
        logging.info("FHIR ClinicalImpressionFindingComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.item = CodeableConcept(self.__add('item'))
        self.cause = self.__add('cause')



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.item:
            self.__json['item'] = self.item.json
        if self.cause:
            self.__json['cause'] = self.cause


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ClinicalImpressionFindingComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ClinicalImpressionRuledOutComponent(BackboneElement):
    '''
    FHIR ClinicalImpressionRuledOutComponent resource

     Diagnosis considered not possible.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ClinicalImpressionRuledOutComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ClinicalImpressionRuledOutComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ClinicalImpressionRuledOutComponent constructor
        '''
        logging.info("FHIR ClinicalImpressionRuledOutComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.item = CodeableConcept(self.__add('item'))
        self.reason = self.__add('reason')



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.item:
            self.__json['item'] = self.item.json
        if self.reason:
            self.__json['reason'] = self.reason


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ClinicalImpressionRuledOutComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ClinicalImpression(DomainResource):
    '''
    FHIR ClinicalImpression resource

     A record of a clinical assessment performed to determine what problem(s) may affect the patient and before planning the treatments or management strategies that are best to manage a patient's condition. Assessments are often 1:1 with a clinical consultation / encounter,  but this varies greatly depending on the clinical workflow. This resource is called "ClinicalImpression" rather than "ClinicalAssessment" to avoid confusion with the recording of assessment tools such as Apgar score. If the element is present, it must have either a @value, an @id, or extensions

    patient ->  The patient being assessed.
    assessor ->  The clinician performing the assessment.
    status ->  Identifies the workflow status of the assessment. 
    date ->  The point in time at which the assessment was concluded (not when it was recorded).
    description ->  A summary of the context and/or cause of the assessment - why / where was it peformed, and what patient events/sstatus prompted it.
    previous ->  A reference to the last assesment that was conducted bon this patient. Assessments are often/usually ongoing in nature; a care provider (practitioner or team) will make new assessments on an ongoing basis as new data arises or the patient's conditions changes.
    problem ->  This a list of the general problems/conditions for a patient.
    investigations ->  One or more sets of investigations (signs, symptions, etc.). The actual grouping of investigations vary greatly depending on the type and context of the assessment. These investigations may include data generated during the assessment process, or data previously generated and recorded that is pertinent to the outcomes.
    protocol ->  Reference to a specific published clinical protocol that was followed during this assessment, and/or that provides evidence in support of the diagnosis.
    summary ->  A text summary of the investigations and the diagnosis.
    finding ->  Specific findings or diagnoses that was considered likely or relevant to ongoing treatment.
    resolved ->  Diagnoses/conditions resolved since the last assessment.
    ruledOut ->  Diagnosis considered not possible.
    prognosis ->  Estimate of likely outcome.
    plan ->  Plan of action after assessment.
    action ->  Actions taken during assessment.
    triggerCodeableConcept ->  The request or event that necessitated this assessment. This may be a diagnosis, a Care Plan, a Request Referral, or some other resource.
    triggerReference ->  The request or event that necessitated this assessment. This may be a diagnosis, a Care Plan, a Request Referral, or some other resource.

    # Search parameters
        ClinicalImpression.search.action
        ClinicalImpression.search.assessor
        ClinicalImpression.search.date
        ClinicalImpression.search.finding
        ClinicalImpression.search.investigation
        ClinicalImpression.search.patient
        ClinicalImpression.search.plan
        ClinicalImpression.search.previous
        ClinicalImpression.search.problem
        ClinicalImpression.search.resolved
        ClinicalImpression.search.ruledout
        ClinicalImpression.search.status
        ClinicalImpression.search.trigger
        ClinicalImpression.search.trigger-code
    '''
    # search parameters
    par = [("action", "reference"),
           ("assessor", "reference"),
           ("date", "date"),
           ("finding", "token"),
           ("investigation", "reference"),
           ("patient", "reference"),
           ("plan", "reference"),
           ("previous", "reference"),
           ("problem", "reference"),
           ("resolved", "token"),
           ("ruledout", "token"),
           ("status", "token"),
           ("trigger", "reference"),
           ("trigger-code", "token")]

    search = Params(par, "ClinicalImpression")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'problem':
                    list_to_add.append(Reference(obj))
                elif key == 'investigations':
                    list_to_add.append(ClinicalImpressionInvestigationsComponent(obj))
                elif key == 'finding':
                    list_to_add.append(ClinicalImpressionFindingComponent(obj))
                elif key == 'resolved':
                    list_to_add.append(CodeableConcept(obj))
                elif key == 'ruledOut':
                    list_to_add.append(ClinicalImpressionRuledOutComponent(obj))
                elif key == 'plan':
                    list_to_add.append(Reference(obj))
                elif key == 'action':
                    list_to_add.append(Reference(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ClinicalImpression __new__
        '''
        if json == None:
            return None
        else:
            return super(ClinicalImpression, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ClinicalImpression constructor
        '''
        logging.info("FHIR ClinicalImpression: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "ClinicalImpression"
        self.patient = Reference(self.__add('patient'))
        self.assessor = Reference(self.__add('assessor'))
        self.status = self.__add('status')
        self.date = DateTime(self.__add('date'))
        self.description = self.__add('description')
        self.previous = Reference(self.__add('previous'))
        if 'problem' in self.__json:
            if isinstance(self.__json['problem'], list):
                self.problem = self.__add_list('problem')
            else:
                self.problem = Reference(self.__add('problem'))
        else:
            self.problem = None
        if 'investigations' in self.__json:
            if isinstance(self.__json['investigations'], list):
                self.investigations = self.__add_list('investigations')
            else:
                self.investigations = ClinicalImpressionInvestigationsComponent(self.__add('investigations'))
        else:
            self.investigations = None
        self.protocol = self.__add('protocol')
        self.summary = self.__add('summary')
        if 'finding' in self.__json:
            if isinstance(self.__json['finding'], list):
                self.finding = self.__add_list('finding')
            else:
                self.finding = ClinicalImpressionFindingComponent(self.__add('finding'))
        else:
            self.finding = None
        if 'resolved' in self.__json:
            if isinstance(self.__json['resolved'], list):
                self.resolved = self.__add_list('resolved')
            else:
                self.resolved = CodeableConcept(self.__add('resolved'))
        else:
            self.resolved = None
        if 'ruledOut' in self.__json:
            if isinstance(self.__json['ruledOut'], list):
                self.ruledOut = self.__add_list('ruledOut')
            else:
                self.ruledOut = ClinicalImpressionRuledOutComponent(self.__add('ruledOut'))
        else:
            self.ruledOut = None
        self.prognosis = self.__add('prognosis')
        if 'plan' in self.__json:
            if isinstance(self.__json['plan'], list):
                self.plan = self.__add_list('plan')
            else:
                self.plan = Reference(self.__add('plan'))
        else:
            self.plan = None
        if 'action' in self.__json:
            if isinstance(self.__json['action'], list):
                self.action = self.__add_list('action')
            else:
                self.action = Reference(self.__add('action'))
        else:
            self.action = None
        self.triggerCodeableConcept = CodeableConcept(self.__add('triggerCodeableConcept'))
        self.triggerReference = Reference(self.__add('triggerReference'))


        # Parent Resource Init
        super(ClinicalImpression, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.patient:
            self.__json['patient'] = self.patient.json
        if self.assessor:
            self.__json['assessor'] = self.assessor.json
        if self.status:
            self.__json['status'] = self.status
        if self.date:
            self.__json['date'] = self.date.json
        if self.description:
            self.__json['description'] = self.description
        if self.previous:
            self.__json['previous'] = self.previous.json
        if self.problem:
            self.__json['problem'] = self.__get_list(self.problem)
        if self.investigations:
            self.__json['investigations'] = self.__get_list(self.investigations)
        if self.protocol:
            self.__json['protocol'] = self.protocol
        if self.summary:
            self.__json['summary'] = self.summary
        if self.finding:
            self.__json['finding'] = self.__get_list(self.finding)
        if self.resolved:
            self.__json['resolved'] = self.__get_list(self.resolved)
        if self.ruledOut:
            self.__json['ruledOut'] = self.__get_list(self.ruledOut)
        if self.prognosis:
            self.__json['prognosis'] = self.prognosis
        if self.plan:
            self.__json['plan'] = self.__get_list(self.plan)
        if self.action:
            self.__json['action'] = self.__get_list(self.action)
        if self.triggerCodeableConcept:
            self.__json['triggerCodeableConcept'] = self.triggerCodeableConcept.json
        if self.triggerReference:
            self.__json['triggerReference'] = self.triggerReference.json

        # Add json attributes
        self.__json = super(ClinicalImpression, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR ClinicalImpression string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class CodeSystemContactComponent(BackboneElement):
    '''
    FHIR CodeSystemContactComponent resource

     Contacts to assist a user in finding and communicating with the publisher.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'telecom':
                    list_to_add.append(ContactPoint(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR CodeSystemContactComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(CodeSystemContactComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR CodeSystemContactComponent constructor
        '''
        logging.info("FHIR CodeSystemContactComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.name = self.__add('name')
        if 'telecom' in self.__json:
            if isinstance(self.__json['telecom'], list):
                self.telecom = self.__add_list('telecom')
            else:
                self.telecom = ContactPoint(self.__add('telecom'))
        else:
            self.telecom = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.name:
            self.__json['name'] = self.name
        if self.telecom:
            self.__json['telecom'] = self.__get_list(self.telecom)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR CodeSystemContactComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class CodeSystemFilterComponent(BackboneElement):
    '''
    FHIR CodeSystemFilterComponent resource

     A filter that can be used in a value set compose statement when selecting concepts using a filter.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR CodeSystemFilterComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(CodeSystemFilterComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR CodeSystemFilterComponent constructor
        '''
        logging.info("FHIR CodeSystemFilterComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.code = self.__add('code')
        self.description = self.__add('description')
        if 'operator' in self.__json:
            if isinstance(self.__json['operator'], list):
                self.operator = self.__add_list('operator')
            else:
                self.operator = self.__add('operator')
        else:
            self.operator = None
        self.value = self.__add('value')



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.code:
            self.__json['code'] = self.code
        if self.description:
            self.__json['description'] = self.description
        if self.operator:
            self.__json['operator'] = self.__get_list(self.operator)
        if self.value:
            self.__json['value'] = self.value


        return self.__json
        
    def __repr__(self):
        '''
        FHIR CodeSystemFilterComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class CodeSystemPropertyComponent(BackboneElement):
    '''
    FHIR CodeSystemPropertyComponent resource

     A property defines an additional slot through which additional information can be provided about a concept.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR CodeSystemPropertyComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(CodeSystemPropertyComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR CodeSystemPropertyComponent constructor
        '''
        logging.info("FHIR CodeSystemPropertyComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.code = self.__add('code')
        self.description = self.__add('description')
        self.type = self.__add('type')



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.code:
            self.__json['code'] = self.code
        if self.description:
            self.__json['description'] = self.description
        if self.type:
            self.__json['type'] = self.type


        return self.__json
        
    def __repr__(self):
        '''
        FHIR CodeSystemPropertyComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class CodeSystemDesignationComponent(BackboneElement):
    '''
    FHIR CodeSystemDesignationComponent resource

     Additional representations for the concept - other languages, aliases, specialized purposes, used for particular purposes, etc.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR CodeSystemDesignationComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(CodeSystemDesignationComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR CodeSystemDesignationComponent constructor
        '''
        logging.info("FHIR CodeSystemDesignationComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.language = self.__add('language')
        self.use = Coding(self.__add('use'))
        self.value = self.__add('value')



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.language:
            self.__json['language'] = self.language
        if self.use:
            self.__json['use'] = self.use.json
        if self.value:
            self.__json['value'] = self.value


        return self.__json
        
    def __repr__(self):
        '''
        FHIR CodeSystemDesignationComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class CodeSystemProperty1Component(BackboneElement):
    '''
    FHIR CodeSystemProperty1Component resource

     A property value for this concept.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR CodeSystemProperty1Component __new__
        '''
        if json == None:
            return None
        else:
            return super(CodeSystemProperty1Component, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR CodeSystemProperty1Component constructor
        '''
        logging.info("FHIR CodeSystemProperty1Component: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.code = self.__add('code')
        self.valueCode = self.__add('valueCode')
        self.valueCoding = Coding(self.__add('valueCoding'))
        self.valueString = self.__add('valueString')
        self.valueInteger = self.__add('valueInteger')
        self.valueBoolean = Boolean(self.__add('valueBoolean'))
        self.valueDateTime = DateTime(self.__add('valueDateTime'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.code:
            self.__json['code'] = self.code
        if self.valueCode:
            self.__json['valueCode'] = self.valueCode
        if self.valueCoding:
            self.__json['valueCoding'] = self.valueCoding.json
        if self.valueString:
            self.__json['valueString'] = self.valueString
        if self.valueInteger:
            self.__json['valueInteger'] = self.valueInteger
        if self.valueBoolean:
            self.__json['valueBoolean'] = self.valueBoolean.json
        if self.valueDateTime:
            self.__json['valueDateTime'] = self.valueDateTime.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR CodeSystemProperty1Component string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class CodeSystemConceptComponent(BackboneElement):
    '''
    FHIR CodeSystemConceptComponent resource

     Concepts that are in the code system. The concept definitions are inherently hierarchical, but the definitions must be consulted to determine what the meaning of the hierarchical relationships are.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'designation':
                    list_to_add.append(CodeSystemDesignationComponent(obj))
                elif key == 'property':
                    list_to_add.append(CodeSystemProperty1Component(obj))
                elif key == 'concept':
                    list_to_add.append(CodeSystemConceptComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR CodeSystemConceptComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(CodeSystemConceptComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR CodeSystemConceptComponent constructor
        '''
        logging.info("FHIR CodeSystemConceptComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.code = self.__add('code')
        self.display = self.__add('display')
        self.definition = self.__add('definition')
        if 'designation' in self.__json:
            if isinstance(self.__json['designation'], list):
                self.designation = self.__add_list('designation')
            else:
                self.designation = CodeSystemDesignationComponent(self.__add('designation'))
        else:
            self.designation = None
        if 'property' in self.__json:
            if isinstance(self.__json['property'], list):
                self.property = self.__add_list('property')
            else:
                self.property = CodeSystemProperty1Component(self.__add('property'))
        else:
            self.property = None
        if 'concept' in self.__json:
            if isinstance(self.__json['concept'], list):
                self.concept = self.__add_list('concept')
            else:
                self.concept = CodeSystemConceptComponent(self.__add('concept'))
        else:
            self.concept = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.code:
            self.__json['code'] = self.code
        if self.display:
            self.__json['display'] = self.display
        if self.definition:
            self.__json['definition'] = self.definition
        if self.designation:
            self.__json['designation'] = self.__get_list(self.designation)
        if self.property:
            self.__json['property'] = self.__get_list(self.property)
        if self.concept:
            self.__json['concept'] = self.__get_list(self.concept)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR CodeSystemConceptComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class CodeSystem(DomainResource):
    '''
    FHIR CodeSystem resource

     A code system resource specifies a set of codes drawn from one or more code systems. If the element is present, it must have either a @value, an @id, or extensions

    url ->  An absolute URL that is used to identify this code system when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this code system is (or will be) published. This is used in [Coding]{datatypes.html#Coding}.system.
    identifier ->  Formal identifier that is used to identify this code system when it is represented in other formats, or referenced in a specification, model, design or an instance.
    version ->  Used to identify this version of the code system when it is referenced in a specification, model, design or instance (e.g. Coding.version). This is an arbitrary value managed by the profile author manually and the value should be a timestamp. This is used in [Coding]{datatypes.html#Coding}.version.
    name ->  A free text natural language name describing the code system.
    status ->  The status of the code system. 
    experimental ->  This CodeSystem was authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
    publisher ->  The name of the individual or organization that published the code system.
    contact ->  Contacts to assist a user in finding and communicating with the publisher.
    date ->  The date that the code system status was last changed. The date must change when the business version changes, if it does, and it must change if the status code changes. In addition, it should change when the substantive content of the implementation guide changes (e.g. the 'content logical definition').
    description ->  A free text natural language description of the use of the code system - reason for definition, "the semantic space" to be included in the code system, conditions of use, etc. The description may include a list of expected usages for the code system and can also describe the approach taken to build the code system.
    useContext ->  The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching of code system definitions.
    requirements ->  Explains why this code system is needed and why it has been constrained as it has.
    copyright ->  A copyright statement relating to the code system and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the code system.
    caseSensitive ->  If code comparison is case sensitive when codes within this system are compared to each other.
    valueSet ->  Canonical URL of value set that contains the entire code system.
    compositional ->  True If code system defines a post-composition grammar.
    versionNeeded ->  This flag is used to signify that the code system has not (or does not) maintain the definitions, and a version must be specified when referencing this code system.
    content ->  How much of the content of the code system - the concepts and codes it defines - are represented in this resource. 
    count ->  The total number of concepts defined by the code system. Where the code system has a compositional grammar, the count refers to the number of base (primitive) concepts.
    filter ->  A filter that can be used in a value set compose statement when selecting concepts using a filter.
    property ->  A property defines an additional slot through which additional information can be provided about a concept.
    concept ->  Concepts that are in the code system. The concept definitions are inherently hierarchical, but the definitions must be consulted to determine what the meaning of the hierarchical relationships are.

    
    '''
    

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'contact':
                    list_to_add.append(CodeSystemContactComponent(obj))
                elif key == 'useContext':
                    list_to_add.append(CodeableConcept(obj))
                elif key == 'filter':
                    list_to_add.append(CodeSystemFilterComponent(obj))
                elif key == 'property':
                    list_to_add.append(CodeSystemPropertyComponent(obj))
                elif key == 'concept':
                    list_to_add.append(CodeSystemConceptComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR CodeSystem __new__
        '''
        if json == None:
            return None
        else:
            return super(CodeSystem, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR CodeSystem constructor
        '''
        logging.info("FHIR CodeSystem: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "CodeSystem"
        self.url = self.__add('url')
        self.identifier = Identifier(self.__add('identifier'))
        self.version = self.__add('version')
        self.name = self.__add('name')
        self.status = self.__add('status')
        self.experimental = Boolean(self.__add('experimental'))
        self.publisher = self.__add('publisher')
        if 'contact' in self.__json:
            if isinstance(self.__json['contact'], list):
                self.contact = self.__add_list('contact')
            else:
                self.contact = CodeSystemContactComponent(self.__add('contact'))
        else:
            self.contact = None
        self.date = DateTime(self.__add('date'))
        self.description = self.__add('description')
        if 'useContext' in self.__json:
            if isinstance(self.__json['useContext'], list):
                self.useContext = self.__add_list('useContext')
            else:
                self.useContext = CodeableConcept(self.__add('useContext'))
        else:
            self.useContext = None
        self.requirements = self.__add('requirements')
        self.copyright = self.__add('copyright')
        self.caseSensitive = Boolean(self.__add('caseSensitive'))
        self.valueSet = self.__add('valueSet')
        self.compositional = Boolean(self.__add('compositional'))
        self.versionNeeded = Boolean(self.__add('versionNeeded'))
        self.content = self.__add('content')
        self.count = self.__add('count')
        if 'filter' in self.__json:
            if isinstance(self.__json['filter'], list):
                self.filter = self.__add_list('filter')
            else:
                self.filter = CodeSystemFilterComponent(self.__add('filter'))
        else:
            self.filter = None
        if 'property' in self.__json:
            if isinstance(self.__json['property'], list):
                self.property = self.__add_list('property')
            else:
                self.property = CodeSystemPropertyComponent(self.__add('property'))
        else:
            self.property = None
        if 'concept' in self.__json:
            if isinstance(self.__json['concept'], list):
                self.concept = self.__add_list('concept')
            else:
                self.concept = CodeSystemConceptComponent(self.__add('concept'))
        else:
            self.concept = None


        # Parent Resource Init
        super(CodeSystem, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.url:
            self.__json['url'] = self.url
        if self.identifier:
            self.__json['identifier'] = self.identifier.json
        if self.version:
            self.__json['version'] = self.version
        if self.name:
            self.__json['name'] = self.name
        if self.status:
            self.__json['status'] = self.status
        if self.experimental:
            self.__json['experimental'] = self.experimental.json
        if self.publisher:
            self.__json['publisher'] = self.publisher
        if self.contact:
            self.__json['contact'] = self.__get_list(self.contact)
        if self.date:
            self.__json['date'] = self.date.json
        if self.description:
            self.__json['description'] = self.description
        if self.useContext:
            self.__json['useContext'] = self.__get_list(self.useContext)
        if self.requirements:
            self.__json['requirements'] = self.requirements
        if self.copyright:
            self.__json['copyright'] = self.copyright
        if self.caseSensitive:
            self.__json['caseSensitive'] = self.caseSensitive.json
        if self.valueSet:
            self.__json['valueSet'] = self.valueSet
        if self.compositional:
            self.__json['compositional'] = self.compositional.json
        if self.versionNeeded:
            self.__json['versionNeeded'] = self.versionNeeded.json
        if self.content:
            self.__json['content'] = self.content
        if self.count:
            self.__json['count'] = self.count
        if self.filter:
            self.__json['filter'] = self.__get_list(self.filter)
        if self.property:
            self.__json['property'] = self.__get_list(self.property)
        if self.concept:
            self.__json['concept'] = self.__get_list(self.concept)

        # Add json attributes
        self.__json = super(CodeSystem, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR CodeSystem string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class CommunicationPayloadComponent(BackboneElement):
    '''
    FHIR CommunicationPayloadComponent resource

     Text, attachment(s), or resource(s) that was communicated to the recipient.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR CommunicationPayloadComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(CommunicationPayloadComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR CommunicationPayloadComponent constructor
        '''
        logging.info("FHIR CommunicationPayloadComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.contentString = self.__add('contentString')
        self.contentAttachment = Attachment(self.__add('contentAttachment'))
        self.contentReference = Reference(self.__add('contentReference'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.contentString:
            self.__json['contentString'] = self.contentString
        if self.contentAttachment:
            self.__json['contentAttachment'] = self.contentAttachment.json
        if self.contentReference:
            self.__json['contentReference'] = self.contentReference.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR CommunicationPayloadComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class Communication(DomainResource):
    '''
    FHIR Communication resource

     An occurrence of information being transmitted; e.g. an alert that was sent to a responsible provider, a public health agency was notified about a reportable condition. If the element is present, it must have either a @value, an @id, or extensions

    identifier ->  Identifiers associated with this Communication that are defined by business processes and/ or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).
    category ->  The type of message conveyed such as alert, notification, reminder, instruction, etc.
    sender ->  The entity (e.g. person, organization, clinical information system, or device) which was the source of the communication.
    recipient ->  The entity (e.g. person, organization, clinical information system, or device) which was the target of the communication. If receipts need to be tracked by individual, a separate resource instance will need to be created for each recipient. Multiple recipient communications are intended where either a receipt(s) is not tracked (e.g. a mass mail-out) or is captured in aggregate (all emails confirmed received by a particular time).
    payload ->  Text, attachment(s), or resource(s) that was communicated to the recipient.
    medium ->  A channel that was used for this communication (e.g. email, fax).
    status ->  The status of the transmission. 
    encounter ->  The encounter within which the communication was sent.
    sent ->  The time when this communication was sent.
    received ->  The time when this communication arrived at the destination.
    reason ->  The reason or justification for the communication.
    subject ->  The patient who was the focus of this communication.
    requestDetail ->  The communication request that was responsible for producing this communication.

    # Search parameters
        Communication.search.category
        Communication.search.encounter
        Communication.search.identifier
        Communication.search.medium
        Communication.search.patient
        Communication.search.received
        Communication.search.recipient
        Communication.search.request
        Communication.search.sender
        Communication.search.sent
        Communication.search.status
        Communication.search.subject
    '''
    # search parameters
    par = [("category", "token"),
           ("encounter", "reference"),
           ("identifier", "token"),
           ("medium", "token"),
           ("patient", "reference"),
           ("received", "date"),
           ("recipient", "reference"),
           ("request", "reference"),
           ("sender", "reference"),
           ("sent", "date"),
           ("status", "token"),
           ("subject", "reference")]

    search = Params(par, "Communication")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'identifier':
                    list_to_add.append(Identifier(obj))
                elif key == 'recipient':
                    list_to_add.append(Reference(obj))
                elif key == 'payload':
                    list_to_add.append(CommunicationPayloadComponent(obj))
                elif key == 'medium':
                    list_to_add.append(CodeableConcept(obj))
                elif key == 'reason':
                    list_to_add.append(CodeableConcept(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR Communication __new__
        '''
        if json == None:
            return None
        else:
            return super(Communication, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR Communication constructor
        '''
        logging.info("FHIR Communication: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "Communication"
        if 'identifier' in self.__json:
            if isinstance(self.__json['identifier'], list):
                self.identifier = self.__add_list('identifier')
            else:
                self.identifier = Identifier(self.__add('identifier'))
        else:
            self.identifier = None
        self.category = CodeableConcept(self.__add('category'))
        self.sender = Reference(self.__add('sender'))
        if 'recipient' in self.__json:
            if isinstance(self.__json['recipient'], list):
                self.recipient = self.__add_list('recipient')
            else:
                self.recipient = Reference(self.__add('recipient'))
        else:
            self.recipient = None
        if 'payload' in self.__json:
            if isinstance(self.__json['payload'], list):
                self.payload = self.__add_list('payload')
            else:
                self.payload = CommunicationPayloadComponent(self.__add('payload'))
        else:
            self.payload = None
        if 'medium' in self.__json:
            if isinstance(self.__json['medium'], list):
                self.medium = self.__add_list('medium')
            else:
                self.medium = CodeableConcept(self.__add('medium'))
        else:
            self.medium = None
        self.status = self.__add('status')
        self.encounter = Reference(self.__add('encounter'))
        self.sent = DateTime(self.__add('sent'))
        self.received = DateTime(self.__add('received'))
        if 'reason' in self.__json:
            if isinstance(self.__json['reason'], list):
                self.reason = self.__add_list('reason')
            else:
                self.reason = CodeableConcept(self.__add('reason'))
        else:
            self.reason = None
        self.subject = Reference(self.__add('subject'))
        self.requestDetail = Reference(self.__add('requestDetail'))


        # Parent Resource Init
        super(Communication, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identifier:
            self.__json['identifier'] = self.__get_list(self.identifier)
        if self.category:
            self.__json['category'] = self.category.json
        if self.sender:
            self.__json['sender'] = self.sender.json
        if self.recipient:
            self.__json['recipient'] = self.__get_list(self.recipient)
        if self.payload:
            self.__json['payload'] = self.__get_list(self.payload)
        if self.medium:
            self.__json['medium'] = self.__get_list(self.medium)
        if self.status:
            self.__json['status'] = self.status
        if self.encounter:
            self.__json['encounter'] = self.encounter.json
        if self.sent:
            self.__json['sent'] = self.sent.json
        if self.received:
            self.__json['received'] = self.received.json
        if self.reason:
            self.__json['reason'] = self.__get_list(self.reason)
        if self.subject:
            self.__json['subject'] = self.subject.json
        if self.requestDetail:
            self.__json['requestDetail'] = self.requestDetail.json

        # Add json attributes
        self.__json = super(Communication, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR Communication string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class CommunicationRequestPayloadComponent(BackboneElement):
    '''
    FHIR CommunicationRequestPayloadComponent resource

     Text, attachment(s), or resource(s) to be communicated to the recipient.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR CommunicationRequestPayloadComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(CommunicationRequestPayloadComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR CommunicationRequestPayloadComponent constructor
        '''
        logging.info("FHIR CommunicationRequestPayloadComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.contentString = self.__add('contentString')
        self.contentAttachment = Attachment(self.__add('contentAttachment'))
        self.contentReference = Reference(self.__add('contentReference'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.contentString:
            self.__json['contentString'] = self.contentString
        if self.contentAttachment:
            self.__json['contentAttachment'] = self.contentAttachment.json
        if self.contentReference:
            self.__json['contentReference'] = self.contentReference.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR CommunicationRequestPayloadComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class CommunicationRequest(DomainResource):
    '''
    FHIR CommunicationRequest resource

     A request to convey information; e.g. the CDS system proposes that an alert be sent to a responsible provider, the CDS system proposes that the public health agency be notified about a reportable condition. If the element is present, it must have either a @value, an @id, or extensions

    identifier ->  A unique ID of this request for reference purposes. It must be provided if user wants it returned as part of any output, otherwise it will be autogenerated, if needed, by CDS system. Does not need to be the actual ID of the source system.
    category ->  The type of message to be sent such as alert, notification, reminder, instruction, etc.
    sender ->  The entity (e.g. person, organization, clinical information system, or device) which is to be the source of the communication.
    recipient ->  The entity (e.g. person, organization, clinical information system, or device) which is the intended target of the communication.
    payload ->  Text, attachment(s), or resource(s) to be communicated to the recipient.
    medium ->  A channel that was used for this communication (e.g. email, fax).
    requester ->  The responsible person who authorizes this order, e.g. physician. This may be different than the author of the order statement, e.g. clerk, who may have entered the statement into the order entry application.
    status ->  The status of the proposal or order. 
    encounter ->  The encounter within which the communication request was created.
    reason ->  The reason or justification for the communication request.
    requestedOn ->  The time when the request was made.
    subject ->  The patient who is the focus of this communication request.
    priority ->  Characterizes how quickly the proposed act must be initiated. Includes concepts such as stat, urgent, routine.
    scheduledDateTime ->  The time when this communication is to occur.
    scheduledPeriod ->  The time when this communication is to occur.

    # Search parameters
        CommunicationRequest.search.category
        CommunicationRequest.search.encounter
        CommunicationRequest.search.identifier
        CommunicationRequest.search.medium
        CommunicationRequest.search.patient
        CommunicationRequest.search.priority
        CommunicationRequest.search.recipient
        CommunicationRequest.search.requested
        CommunicationRequest.search.requester
        CommunicationRequest.search.sender
        CommunicationRequest.search.status
        CommunicationRequest.search.subject
        CommunicationRequest.search.time
    '''
    # search parameters
    par = [("category", "token"),
           ("encounter", "reference"),
           ("identifier", "token"),
           ("medium", "token"),
           ("patient", "reference"),
           ("priority", "token"),
           ("recipient", "reference"),
           ("requested", "date"),
           ("requester", "reference"),
           ("sender", "reference"),
           ("status", "token"),
           ("subject", "reference"),
           ("time", "date")]

    search = Params(par, "CommunicationRequest")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'identifier':
                    list_to_add.append(Identifier(obj))
                elif key == 'recipient':
                    list_to_add.append(Reference(obj))
                elif key == 'payload':
                    list_to_add.append(CommunicationRequestPayloadComponent(obj))
                elif key == 'medium':
                    list_to_add.append(CodeableConcept(obj))
                elif key == 'reason':
                    list_to_add.append(CodeableConcept(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR CommunicationRequest __new__
        '''
        if json == None:
            return None
        else:
            return super(CommunicationRequest, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR CommunicationRequest constructor
        '''
        logging.info("FHIR CommunicationRequest: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "CommunicationRequest"
        if 'identifier' in self.__json:
            if isinstance(self.__json['identifier'], list):
                self.identifier = self.__add_list('identifier')
            else:
                self.identifier = Identifier(self.__add('identifier'))
        else:
            self.identifier = None
        self.category = CodeableConcept(self.__add('category'))
        self.sender = Reference(self.__add('sender'))
        if 'recipient' in self.__json:
            if isinstance(self.__json['recipient'], list):
                self.recipient = self.__add_list('recipient')
            else:
                self.recipient = Reference(self.__add('recipient'))
        else:
            self.recipient = None
        if 'payload' in self.__json:
            if isinstance(self.__json['payload'], list):
                self.payload = self.__add_list('payload')
            else:
                self.payload = CommunicationRequestPayloadComponent(self.__add('payload'))
        else:
            self.payload = None
        if 'medium' in self.__json:
            if isinstance(self.__json['medium'], list):
                self.medium = self.__add_list('medium')
            else:
                self.medium = CodeableConcept(self.__add('medium'))
        else:
            self.medium = None
        self.requester = Reference(self.__add('requester'))
        self.status = self.__add('status')
        self.encounter = Reference(self.__add('encounter'))
        if 'reason' in self.__json:
            if isinstance(self.__json['reason'], list):
                self.reason = self.__add_list('reason')
            else:
                self.reason = CodeableConcept(self.__add('reason'))
        else:
            self.reason = None
        self.requestedOn = DateTime(self.__add('requestedOn'))
        self.subject = Reference(self.__add('subject'))
        self.priority = CodeableConcept(self.__add('priority'))
        self.scheduledDateTime = DateTime(self.__add('scheduledDateTime'))
        self.scheduledPeriod = Period(self.__add('scheduledPeriod'))


        # Parent Resource Init
        super(CommunicationRequest, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identifier:
            self.__json['identifier'] = self.__get_list(self.identifier)
        if self.category:
            self.__json['category'] = self.category.json
        if self.sender:
            self.__json['sender'] = self.sender.json
        if self.recipient:
            self.__json['recipient'] = self.__get_list(self.recipient)
        if self.payload:
            self.__json['payload'] = self.__get_list(self.payload)
        if self.medium:
            self.__json['medium'] = self.__get_list(self.medium)
        if self.requester:
            self.__json['requester'] = self.requester.json
        if self.status:
            self.__json['status'] = self.status
        if self.encounter:
            self.__json['encounter'] = self.encounter.json
        if self.reason:
            self.__json['reason'] = self.__get_list(self.reason)
        if self.requestedOn:
            self.__json['requestedOn'] = self.requestedOn.json
        if self.subject:
            self.__json['subject'] = self.subject.json
        if self.priority:
            self.__json['priority'] = self.priority.json
        if self.scheduledDateTime:
            self.__json['scheduledDateTime'] = self.scheduledDateTime.json
        if self.scheduledPeriod:
            self.__json['scheduledPeriod'] = self.scheduledPeriod.json

        # Add json attributes
        self.__json = super(CommunicationRequest, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR CommunicationRequest string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class CompartmentDefinitionContactComponent(BackboneElement):
    '''
    FHIR CompartmentDefinitionContactComponent resource

     Contacts to assist a user in finding and communicating with the publisher.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'telecom':
                    list_to_add.append(ContactPoint(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR CompartmentDefinitionContactComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(CompartmentDefinitionContactComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR CompartmentDefinitionContactComponent constructor
        '''
        logging.info("FHIR CompartmentDefinitionContactComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.name = self.__add('name')
        if 'telecom' in self.__json:
            if isinstance(self.__json['telecom'], list):
                self.telecom = self.__add_list('telecom')
            else:
                self.telecom = ContactPoint(self.__add('telecom'))
        else:
            self.telecom = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.name:
            self.__json['name'] = self.name
        if self.telecom:
            self.__json['telecom'] = self.__get_list(self.telecom)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR CompartmentDefinitionContactComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class CompartmentDefinitionResourceComponent(BackboneElement):
    '''
    FHIR CompartmentDefinitionResourceComponent resource

     Information about how a resource it related to the compartment.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR CompartmentDefinitionResourceComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(CompartmentDefinitionResourceComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR CompartmentDefinitionResourceComponent constructor
        '''
        logging.info("FHIR CompartmentDefinitionResourceComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.code = self.__add('code')
        if 'param' in self.__json:
            if isinstance(self.__json['param'], list):
                self.param = self.__add_list('param')
            else:
                self.param = self.__add('param')
        else:
            self.param = None
        self.documentation = self.__add('documentation')



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.code:
            self.__json['code'] = self.code
        if self.param:
            self.__json['param'] = self.__get_list(self.param)
        if self.documentation:
            self.__json['documentation'] = self.documentation


        return self.__json
        
    def __repr__(self):
        '''
        FHIR CompartmentDefinitionResourceComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class CompartmentDefinition(DomainResource):
    '''
    FHIR CompartmentDefinition resource

     A compartment definition that defines how resources are accessed on a server. If the element is present, it must have either a @value, an @id, or extensions

    url ->  An absolute URL that is used to identify this compartment definition when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this compartment definition is (or will be) published.
    name ->  A free text natural language name identifying the compartment definition.
    status ->  The status of this compartment definition definition. 
    experimental ->  A flag to indicate that this compartment definition definition is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
    publisher ->  The name of the individual or organization that published the compartment definition.
    contact ->  Contacts to assist a user in finding and communicating with the publisher.
    date ->  The date  (and optionally time) when the compartment definition definition was published. The date must change when the business version changes, if it does, and it must change if the status code changes. In addition, it should change when the substantive content of the compartment definition changes.
    description ->  A free text natural language description of the CompartmentDefinition and its use.
    requirements ->  The Scope and Usage that this compartment definition was created to meet.
    code ->  Which compartment this definition describes. 
    search ->  Whether the search syntax is supported.
    resource ->  Information about how a resource it related to the compartment.

    
    '''
    

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'contact':
                    list_to_add.append(CompartmentDefinitionContactComponent(obj))
                elif key == 'resource':
                    list_to_add.append(CompartmentDefinitionResourceComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR CompartmentDefinition __new__
        '''
        if json == None:
            return None
        else:
            return super(CompartmentDefinition, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR CompartmentDefinition constructor
        '''
        logging.info("FHIR CompartmentDefinition: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "CompartmentDefinition"
        self.url = self.__add('url')
        self.name = self.__add('name')
        self.status = self.__add('status')
        self.experimental = Boolean(self.__add('experimental'))
        self.publisher = self.__add('publisher')
        if 'contact' in self.__json:
            if isinstance(self.__json['contact'], list):
                self.contact = self.__add_list('contact')
            else:
                self.contact = CompartmentDefinitionContactComponent(self.__add('contact'))
        else:
            self.contact = None
        self.date = DateTime(self.__add('date'))
        self.description = self.__add('description')
        self.requirements = self.__add('requirements')
        self.code = self.__add('code')
        self.search = Boolean(self.__add('search'))
        if 'resource' in self.__json:
            if isinstance(self.__json['resource'], list):
                self.resource = self.__add_list('resource')
            else:
                self.resource = CompartmentDefinitionResourceComponent(self.__add('resource'))
        else:
            self.resource = None


        # Parent Resource Init
        super(CompartmentDefinition, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.url:
            self.__json['url'] = self.url
        if self.name:
            self.__json['name'] = self.name
        if self.status:
            self.__json['status'] = self.status
        if self.experimental:
            self.__json['experimental'] = self.experimental.json
        if self.publisher:
            self.__json['publisher'] = self.publisher
        if self.contact:
            self.__json['contact'] = self.__get_list(self.contact)
        if self.date:
            self.__json['date'] = self.date.json
        if self.description:
            self.__json['description'] = self.description
        if self.requirements:
            self.__json['requirements'] = self.requirements
        if self.code:
            self.__json['code'] = self.code
        if self.search:
            self.__json['search'] = self.search.json
        if self.resource:
            self.__json['resource'] = self.__get_list(self.resource)

        # Add json attributes
        self.__json = super(CompartmentDefinition, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR CompartmentDefinition string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class CompositionAttesterComponent(BackboneElement):
    '''
    FHIR CompositionAttesterComponent resource

     A participant who has attested to the accuracy of the composition/document.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR CompositionAttesterComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(CompositionAttesterComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR CompositionAttesterComponent constructor
        '''
        logging.info("FHIR CompositionAttesterComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        if 'mode' in self.__json:
            if isinstance(self.__json['mode'], list):
                self.mode = self.__add_list('mode')
            else:
                self.mode = self.__add('mode')
        else:
            self.mode = None
        self.time = DateTime(self.__add('time'))
        self.party = Reference(self.__add('party'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.mode:
            self.__json['mode'] = self.__get_list(self.mode)
        if self.time:
            self.__json['time'] = self.time.json
        if self.party:
            self.__json['party'] = self.party.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR CompositionAttesterComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class CompositionEventComponent(BackboneElement):
    '''
    FHIR CompositionEventComponent resource

     The clinical service, such as a colonoscopy or an appendectomy, being documented.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'code':
                    list_to_add.append(CodeableConcept(obj))
                elif key == 'detail':
                    list_to_add.append(Reference(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR CompositionEventComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(CompositionEventComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR CompositionEventComponent constructor
        '''
        logging.info("FHIR CompositionEventComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        if 'code' in self.__json:
            if isinstance(self.__json['code'], list):
                self.code = self.__add_list('code')
            else:
                self.code = CodeableConcept(self.__add('code'))
        else:
            self.code = None
        self.period = Period(self.__add('period'))
        if 'detail' in self.__json:
            if isinstance(self.__json['detail'], list):
                self.detail = self.__add_list('detail')
            else:
                self.detail = Reference(self.__add('detail'))
        else:
            self.detail = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.code:
            self.__json['code'] = self.__get_list(self.code)
        if self.period:
            self.__json['period'] = self.period.json
        if self.detail:
            self.__json['detail'] = self.__get_list(self.detail)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR CompositionEventComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class CompositionSectionComponent(BackboneElement):
    '''
    FHIR CompositionSectionComponent resource

     The root of the sections that make up the composition.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'entry':
                    list_to_add.append(Reference(obj))
                elif key == 'section':
                    list_to_add.append(CompositionSectionComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR CompositionSectionComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(CompositionSectionComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR CompositionSectionComponent constructor
        '''
        logging.info("FHIR CompositionSectionComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.title = self.__add('title')
        self.code = CodeableConcept(self.__add('code'))
        self.text = Narrative(self.__add('text'))
        self.mode = self.__add('mode')
        self.orderedBy = CodeableConcept(self.__add('orderedBy'))
        if 'entry' in self.__json:
            if isinstance(self.__json['entry'], list):
                self.entry = self.__add_list('entry')
            else:
                self.entry = Reference(self.__add('entry'))
        else:
            self.entry = None
        self.emptyReason = CodeableConcept(self.__add('emptyReason'))
        if 'section' in self.__json:
            if isinstance(self.__json['section'], list):
                self.section = self.__add_list('section')
            else:
                self.section = CompositionSectionComponent(self.__add('section'))
        else:
            self.section = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.title:
            self.__json['title'] = self.title
        if self.code:
            self.__json['code'] = self.code.json
        if self.text:
            self.__json['text'] = self.text.json
        if self.mode:
            self.__json['mode'] = self.mode
        if self.orderedBy:
            self.__json['orderedBy'] = self.orderedBy.json
        if self.entry:
            self.__json['entry'] = self.__get_list(self.entry)
        if self.emptyReason:
            self.__json['emptyReason'] = self.emptyReason.json
        if self.section:
            self.__json['section'] = self.__get_list(self.section)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR CompositionSectionComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class Composition(DomainResource):
    '''
    FHIR Composition resource

     A set of healthcare-related information that is assembled together into a single logical document that provides a single coherent statement of meaning, establishes its own context and that has clinical attestation with regard to who is making the statement. While a Composition defines the structure, it does not actually contain the content: rather the full content of a document is contained in a Bundle, of which the Composition is the first resource contained. If the element is present, it must have either a @value, an @id, or extensions

    identifier ->  Logical identifier for the composition, assigned when created. This identifier stays constant as the composition is changed over time.
    date ->  The composition editing time, when the composition was last logically changed by the author.
    type ->  Specifies the particular kind of composition (e.g. History and Physical, Discharge Summary, Progress Note). This usually equates to the purpose of making the composition.
    class_ ->  A categorization for the type of the composition - helps for indexing and searching. This may be implied by or derived from the code specified in the Composition Type.
    title ->  Official human-readable label for the composition.
    status ->  The workflow/clinical status of this composition. The status is a marker for the clinical standing of the document. 
    confidentiality ->  The code specifying the level of confidentiality of the Composition.
    subject ->  Who or what the composition is about. The composition can be about a person, (patient or healthcare practitioner), a device (e.g. a machine) or even a group of subjects (such as a document about a herd of livestock, or a set of patients that share a common exposure).
    author ->  Identifies who is responsible for the information in the composition, not necessarily who typed it in.
    attester ->  A participant who has attested to the accuracy of the composition/document.
    custodian ->  Identifies the organization or group who is responsible for ongoing maintenance of and access to the composition/document information.
    event ->  The clinical service, such as a colonoscopy or an appendectomy, being documented.
    encounter ->  Describes the clinical encounter or type of care this documentation is associated with.
    section ->  The root of the sections that make up the composition.

    # Search parameters
        Composition.search.attester
        Composition.search.author
        Composition.search.class
        Composition.search.confidentiality
        Composition.search.context
        Composition.search.date
        Composition.search.encounter
        Composition.search.entry
        Composition.search.identifier
        Composition.search.patient
        Composition.search.period
        Composition.search.section
        Composition.search.status
        Composition.search.subject
        Composition.search.title
        Composition.search.type
    '''
    # search parameters
    par = [("attester", "reference"),
           ("author", "reference"),
           ("class", "token"),
           ("confidentiality", "token"),
           ("context", "token"),
           ("date", "date"),
           ("encounter", "reference"),
           ("entry", "reference"),
           ("identifier", "token"),
           ("patient", "reference"),
           ("period", "date"),
           ("section", "token"),
           ("status", "token"),
           ("subject", "reference"),
           ("title", "string"),
           ("type", "token")]

    search = Params(par, "Composition")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'author':
                    list_to_add.append(Reference(obj))
                elif key == 'attester':
                    list_to_add.append(CompositionAttesterComponent(obj))
                elif key == 'event':
                    list_to_add.append(CompositionEventComponent(obj))
                elif key == 'section':
                    list_to_add.append(CompositionSectionComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR Composition __new__
        '''
        if json == None:
            return None
        else:
            return super(Composition, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR Composition constructor
        '''
        logging.info("FHIR Composition: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "Composition"
        self.identifier = Identifier(self.__add('identifier'))
        self.date = DateTime(self.__add('date'))
        self.type = CodeableConcept(self.__add('type'))
        self.class_ = CodeableConcept(self.__add('class_'))
        self.title = self.__add('title')
        self.status = self.__add('status')
        self.confidentiality = self.__add('confidentiality')
        self.subject = Reference(self.__add('subject'))
        if 'author' in self.__json:
            if isinstance(self.__json['author'], list):
                self.author = self.__add_list('author')
            else:
                self.author = Reference(self.__add('author'))
        else:
            self.author = None
        if 'attester' in self.__json:
            if isinstance(self.__json['attester'], list):
                self.attester = self.__add_list('attester')
            else:
                self.attester = CompositionAttesterComponent(self.__add('attester'))
        else:
            self.attester = None
        self.custodian = Reference(self.__add('custodian'))
        if 'event' in self.__json:
            if isinstance(self.__json['event'], list):
                self.event = self.__add_list('event')
            else:
                self.event = CompositionEventComponent(self.__add('event'))
        else:
            self.event = None
        self.encounter = Reference(self.__add('encounter'))
        if 'section' in self.__json:
            if isinstance(self.__json['section'], list):
                self.section = self.__add_list('section')
            else:
                self.section = CompositionSectionComponent(self.__add('section'))
        else:
            self.section = None


        # Parent Resource Init
        super(Composition, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identifier:
            self.__json['identifier'] = self.identifier.json
        if self.date:
            self.__json['date'] = self.date.json
        if self.type:
            self.__json['type'] = self.type.json
        if self.class_:
            self.__json['class_'] = self.class_.json
        if self.title:
            self.__json['title'] = self.title
        if self.status:
            self.__json['status'] = self.status
        if self.confidentiality:
            self.__json['confidentiality'] = self.confidentiality
        if self.subject:
            self.__json['subject'] = self.subject.json
        if self.author:
            self.__json['author'] = self.__get_list(self.author)
        if self.attester:
            self.__json['attester'] = self.__get_list(self.attester)
        if self.custodian:
            self.__json['custodian'] = self.custodian.json
        if self.event:
            self.__json['event'] = self.__get_list(self.event)
        if self.encounter:
            self.__json['encounter'] = self.encounter.json
        if self.section:
            self.__json['section'] = self.__get_list(self.section)

        # Add json attributes
        self.__json = super(Composition, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR Composition string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ConceptMapContactComponent(BackboneElement):
    '''
    FHIR ConceptMapContactComponent resource

     Contacts to assist a user in finding and communicating with the publisher.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'telecom':
                    list_to_add.append(ContactPoint(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ConceptMapContactComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ConceptMapContactComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ConceptMapContactComponent constructor
        '''
        logging.info("FHIR ConceptMapContactComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.name = self.__add('name')
        if 'telecom' in self.__json:
            if isinstance(self.__json['telecom'], list):
                self.telecom = self.__add_list('telecom')
            else:
                self.telecom = ContactPoint(self.__add('telecom'))
        else:
            self.telecom = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.name:
            self.__json['name'] = self.name
        if self.telecom:
            self.__json['telecom'] = self.__get_list(self.telecom)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ConceptMapContactComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ConceptMapTargetComponent(BackboneElement):
    '''
    FHIR ConceptMapTargetComponent resource

     A concept from the target value set that this concept maps to.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ConceptMapTargetComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ConceptMapTargetComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ConceptMapTargetComponent constructor
        '''
        logging.info("FHIR ConceptMapTargetComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ConceptMapTargetComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ConceptMapElementComponent(BackboneElement):
    '''
    FHIR ConceptMapElementComponent resource

     Mappings for an individual concept in the source to one or more concepts in the target.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'target':
                    list_to_add.append(ConceptMapTargetComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ConceptMapElementComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ConceptMapElementComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ConceptMapElementComponent constructor
        '''
        logging.info("FHIR ConceptMapElementComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.system = self.__add('system')
        self.version = self.__add('version')
        self.code = self.__add('code')
        if 'target' in self.__json:
            if isinstance(self.__json['target'], list):
                self.target = self.__add_list('target')
            else:
                self.target = ConceptMapTargetComponent(self.__add('target'))
        else:
            self.target = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.system:
            self.__json['system'] = self.system
        if self.version:
            self.__json['version'] = self.version
        if self.code:
            self.__json['code'] = self.code
        if self.target:
            self.__json['target'] = self.__get_list(self.target)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ConceptMapElementComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ConceptMap(DomainResource):
    '''
    FHIR ConceptMap resource

     A statement of relationships from one set of concepts to one or more other concepts - either code systems or data elements, or classes in class models. If the element is present, it must have either a @value, an @id, or extensions

    url ->  An absolute URL that is used to identify this concept map when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this concept map is (or will be) published.
    identifier ->  Formal identifier that is used to identify this concept map when it is represented in other formats, or referenced in a specification, model, design or an instance.
    version ->  The identifier that is used to identify this version of the concept map when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the profile author manually and the value should be a timestamp.
    name ->  A free text natural language name describing the concept map.
    status ->  The status of the concept map. 
    experimental ->  This ConceptMap was authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
    publisher ->  The name of the individual or organization that published the concept map.
    contact ->  Contacts to assist a user in finding and communicating with the publisher.
    date ->  The date this version of the concept map was published. The date must change when the business version changes, if it does, and it must change if the status code changes. In addition, it should change when the substantive content of the concept map changes.
    description ->  A free text natural language description of the use of the concept map - reason for definition, conditions of use, etc.
    useContext ->  The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching of concept map instances.
    requirements ->  Explains why this concept map is needed and why it has been constrained as it has.
    copyright ->  A copyright statement relating to the concept map and/or its contents.
    element ->  Mappings for an individual concept in the source to one or more concepts in the target.
    sourceUri ->  The source value set that specifies the concepts that are being mapped.
    sourceReference ->  The source value set that specifies the concepts that are being mapped.
    targetUri ->  The target value set provides context to the mappings. Note that the mapping is made between concepts, not between value sets, but the value set provides important context about how the concept mapping choices are made.
    targetReference ->  The target value set provides context to the mappings. Note that the mapping is made between concepts, not between value sets, but the value set provides important context about how the concept mapping choices are made.

    # Search parameters
        ConceptMap.search.context
        ConceptMap.search.date
        ConceptMap.search.dependson
        ConceptMap.search.description
        ConceptMap.search.identifier
        ConceptMap.search.name
        ConceptMap.search.product
        ConceptMap.search.publisher
        ConceptMap.search.source
        ConceptMap.search.sourcecode
        ConceptMap.search.sourcesystem
        ConceptMap.search.sourceuri
        ConceptMap.search.status
        ConceptMap.search.target
        ConceptMap.search.targetcode
        ConceptMap.search.targetsystem
        ConceptMap.search.url
        ConceptMap.search.version
    '''
    # search parameters
    par = [("context", "token"),
           ("date", "date"),
           ("dependson", "uri"),
           ("description", "string"),
           ("identifier", "token"),
           ("name", "string"),
           ("product", "uri"),
           ("publisher", "string"),
           ("source", "reference"),
           ("sourcecode", "token"),
           ("sourcesystem", "uri"),
           ("sourceuri", "reference"),
           ("status", "token"),
           ("target", "reference"),
           ("targetcode", "token"),
           ("targetsystem", "uri"),
           ("url", "uri"),
           ("version", "token")]

    search = Params(par, "ConceptMap")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'contact':
                    list_to_add.append(ConceptMapContactComponent(obj))
                elif key == 'useContext':
                    list_to_add.append(CodeableConcept(obj))
                elif key == 'element':
                    list_to_add.append(ConceptMapElementComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ConceptMap __new__
        '''
        if json == None:
            return None
        else:
            return super(ConceptMap, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ConceptMap constructor
        '''
        logging.info("FHIR ConceptMap: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "ConceptMap"
        self.url = self.__add('url')
        self.identifier = Identifier(self.__add('identifier'))
        self.version = self.__add('version')
        self.name = self.__add('name')
        self.status = self.__add('status')
        self.experimental = Boolean(self.__add('experimental'))
        self.publisher = self.__add('publisher')
        if 'contact' in self.__json:
            if isinstance(self.__json['contact'], list):
                self.contact = self.__add_list('contact')
            else:
                self.contact = ConceptMapContactComponent(self.__add('contact'))
        else:
            self.contact = None
        self.date = DateTime(self.__add('date'))
        self.description = self.__add('description')
        if 'useContext' in self.__json:
            if isinstance(self.__json['useContext'], list):
                self.useContext = self.__add_list('useContext')
            else:
                self.useContext = CodeableConcept(self.__add('useContext'))
        else:
            self.useContext = None
        self.requirements = self.__add('requirements')
        self.copyright = self.__add('copyright')
        if 'element' in self.__json:
            if isinstance(self.__json['element'], list):
                self.element = self.__add_list('element')
            else:
                self.element = ConceptMapElementComponent(self.__add('element'))
        else:
            self.element = None
        self.sourceUri = self.__add('sourceUri')
        self.sourceReference = Reference(self.__add('sourceReference'))
        self.targetUri = self.__add('targetUri')
        self.targetReference = Reference(self.__add('targetReference'))


        # Parent Resource Init
        super(ConceptMap, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.url:
            self.__json['url'] = self.url
        if self.identifier:
            self.__json['identifier'] = self.identifier.json
        if self.version:
            self.__json['version'] = self.version
        if self.name:
            self.__json['name'] = self.name
        if self.status:
            self.__json['status'] = self.status
        if self.experimental:
            self.__json['experimental'] = self.experimental.json
        if self.publisher:
            self.__json['publisher'] = self.publisher
        if self.contact:
            self.__json['contact'] = self.__get_list(self.contact)
        if self.date:
            self.__json['date'] = self.date.json
        if self.description:
            self.__json['description'] = self.description
        if self.useContext:
            self.__json['useContext'] = self.__get_list(self.useContext)
        if self.requirements:
            self.__json['requirements'] = self.requirements
        if self.copyright:
            self.__json['copyright'] = self.copyright
        if self.element:
            self.__json['element'] = self.__get_list(self.element)
        if self.sourceUri:
            self.__json['sourceUri'] = self.sourceUri
        if self.sourceReference:
            self.__json['sourceReference'] = self.sourceReference.json
        if self.targetUri:
            self.__json['targetUri'] = self.targetUri
        if self.targetReference:
            self.__json['targetReference'] = self.targetReference.json

        # Add json attributes
        self.__json = super(ConceptMap, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR ConceptMap string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ConditionStageComponent(BackboneElement):
    '''
    FHIR ConditionStageComponent resource

     Clinical stage or grade of a condition. May include formal severity assessments.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'assessment':
                    list_to_add.append(Reference(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ConditionStageComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ConditionStageComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ConditionStageComponent constructor
        '''
        logging.info("FHIR ConditionStageComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.summary = CodeableConcept(self.__add('summary'))
        if 'assessment' in self.__json:
            if isinstance(self.__json['assessment'], list):
                self.assessment = self.__add_list('assessment')
            else:
                self.assessment = Reference(self.__add('assessment'))
        else:
            self.assessment = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.summary:
            self.__json['summary'] = self.summary.json
        if self.assessment:
            self.__json['assessment'] = self.__get_list(self.assessment)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ConditionStageComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ConditionEvidenceComponent(BackboneElement):
    '''
    FHIR ConditionEvidenceComponent resource

     Supporting Evidence / manifestations that are the basis on which this condition is suspected or confirmed.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'detail':
                    list_to_add.append(Reference(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ConditionEvidenceComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ConditionEvidenceComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ConditionEvidenceComponent constructor
        '''
        logging.info("FHIR ConditionEvidenceComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.code = CodeableConcept(self.__add('code'))
        if 'detail' in self.__json:
            if isinstance(self.__json['detail'], list):
                self.detail = self.__add_list('detail')
            else:
                self.detail = Reference(self.__add('detail'))
        else:
            self.detail = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.code:
            self.__json['code'] = self.code.json
        if self.detail:
            self.__json['detail'] = self.__get_list(self.detail)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ConditionEvidenceComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class Condition(DomainResource):
    '''
    FHIR Condition resource

     Use to record detailed information about conditions, problems or diagnoses recognized by a clinician. There are many uses including: recording a diagnosis during an encounter; populating a problem list or a summary statement, such as a discharge summary. If the element is present, it must have either a @value, an @id, or extensions

    identifier ->  This records identifiers associated with this condition that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).
    patient ->  Indicates the patient who the condition record is associated with.
    encounter ->  Encounter during which the condition was first asserted.
    asserter ->  Individual who is making the condition statement.
    dateRecorded ->  A date, when  the Condition statement was documented.
    code ->  Identification of the condition, problem or diagnosis.
    category ->  A category assigned to the condition.
    clinicalStatus ->  The clinical status of the condition.
    verificationStatus ->  The verification status to support the clinical status of the condition. 
    severity ->  A subjective assessment of the severity of the condition as evaluated by the clinician.
    stage ->  Clinical stage or grade of a condition. May include formal severity assessments.
    evidence ->  Supporting Evidence / manifestations that are the basis on which this condition is suspected or confirmed.
    bodySite ->  The anatomical location where this condition manifests itself.
    notes ->  Additional information about the Condition. This is a general notes/comments entry  for description of the Condition, its diagnosis and prognosis.
    onsetDateTime ->  Estimated or actual date or date-time  the condition began, in the opinion of the clinician.
    onsetQuantity ->  Estimated or actual date or date-time  the condition began, in the opinion of the clinician.
    onsetPeriod ->  Estimated or actual date or date-time  the condition began, in the opinion of the clinician.
    onsetRange ->  Estimated or actual date or date-time  the condition began, in the opinion of the clinician.
    onsetString ->  Estimated or actual date or date-time  the condition began, in the opinion of the clinician.
    abatementDateTime ->  The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Conditions are never really resolved, but they can abate.
    abatementQuantity ->  The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Conditions are never really resolved, but they can abate.
    abatementBoolean ->  The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Conditions are never really resolved, but they can abate.
    abatementPeriod ->  The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Conditions are never really resolved, but they can abate.
    abatementRange ->  The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Conditions are never really resolved, but they can abate.
    abatementString ->  The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Conditions are never really resolved, but they can abate.

    # Search parameters
        Condition.search.asserter
        Condition.search.body-site
        Condition.search.category
        Condition.search.clinicalstatus
        Condition.search.code
        Condition.search.date-recorded
        Condition.search.encounter
        Condition.search.evidence
        Condition.search.identifier
        Condition.search.onset
        Condition.search.onset-info
        Condition.search.patient
        Condition.search.severity
        Condition.search.stage
    '''
    # search parameters
    par = [("asserter", "reference"),
           ("body-site", "token"),
           ("category", "token"),
           ("clinicalstatus", "token"),
           ("code", "token"),
           ("date-recorded", "date"),
           ("encounter", "reference"),
           ("evidence", "token"),
           ("identifier", "token"),
           ("onset", "date"),
           ("onset-info", "string"),
           ("patient", "reference"),
           ("severity", "token"),
           ("stage", "token")]

    search = Params(par, "Condition")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'identifier':
                    list_to_add.append(Identifier(obj))
                elif key == 'evidence':
                    list_to_add.append(ConditionEvidenceComponent(obj))
                elif key == 'bodySite':
                    list_to_add.append(CodeableConcept(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR Condition __new__
        '''
        if json == None:
            return None
        else:
            return super(Condition, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR Condition constructor
        '''
        logging.info("FHIR Condition: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "Condition"
        if 'identifier' in self.__json:
            if isinstance(self.__json['identifier'], list):
                self.identifier = self.__add_list('identifier')
            else:
                self.identifier = Identifier(self.__add('identifier'))
        else:
            self.identifier = None
        self.patient = Reference(self.__add('patient'))
        self.encounter = Reference(self.__add('encounter'))
        self.asserter = Reference(self.__add('asserter'))
        self.dateRecorded = Date(self.__add('dateRecorded'))
        self.code = CodeableConcept(self.__add('code'))
        self.category = CodeableConcept(self.__add('category'))
        self.clinicalStatus = self.__add('clinicalStatus')
        self.verificationStatus = self.__add('verificationStatus')
        self.severity = CodeableConcept(self.__add('severity'))
        self.stage = ConditionStageComponent(self.__add('stage'))
        if 'evidence' in self.__json:
            if isinstance(self.__json['evidence'], list):
                self.evidence = self.__add_list('evidence')
            else:
                self.evidence = ConditionEvidenceComponent(self.__add('evidence'))
        else:
            self.evidence = None
        if 'bodySite' in self.__json:
            if isinstance(self.__json['bodySite'], list):
                self.bodySite = self.__add_list('bodySite')
            else:
                self.bodySite = CodeableConcept(self.__add('bodySite'))
        else:
            self.bodySite = None
        self.notes = self.__add('notes')
        self.onsetDateTime = DateTime(self.__add('onsetDateTime'))
        self.onsetQuantity = Age(self.__add('onsetQuantity'))
        self.onsetPeriod = Period(self.__add('onsetPeriod'))
        self.onsetRange = Range(self.__add('onsetRange'))
        self.onsetString = self.__add('onsetString')
        self.abatementDateTime = DateTime(self.__add('abatementDateTime'))
        self.abatementQuantity = Age(self.__add('abatementQuantity'))
        self.abatementBoolean = Boolean(self.__add('abatementBoolean'))
        self.abatementPeriod = Period(self.__add('abatementPeriod'))
        self.abatementRange = Range(self.__add('abatementRange'))
        self.abatementString = self.__add('abatementString')


        # Parent Resource Init
        super(Condition, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identifier:
            self.__json['identifier'] = self.__get_list(self.identifier)
        if self.patient:
            self.__json['patient'] = self.patient.json
        if self.encounter:
            self.__json['encounter'] = self.encounter.json
        if self.asserter:
            self.__json['asserter'] = self.asserter.json
        if self.dateRecorded:
            self.__json['dateRecorded'] = self.dateRecorded.json
        if self.code:
            self.__json['code'] = self.code.json
        if self.category:
            self.__json['category'] = self.category.json
        if self.clinicalStatus:
            self.__json['clinicalStatus'] = self.clinicalStatus
        if self.verificationStatus:
            self.__json['verificationStatus'] = self.verificationStatus
        if self.severity:
            self.__json['severity'] = self.severity.json
        if self.stage:
            self.__json['stage'] = self.stage.json
        if self.evidence:
            self.__json['evidence'] = self.__get_list(self.evidence)
        if self.bodySite:
            self.__json['bodySite'] = self.__get_list(self.bodySite)
        if self.notes:
            self.__json['notes'] = self.notes
        if self.onsetDateTime:
            self.__json['onsetDateTime'] = self.onsetDateTime.json
        if self.onsetQuantity:
            self.__json['onsetQuantity'] = self.onsetQuantity.json
        if self.onsetPeriod:
            self.__json['onsetPeriod'] = self.onsetPeriod.json
        if self.onsetRange:
            self.__json['onsetRange'] = self.onsetRange.json
        if self.onsetString:
            self.__json['onsetString'] = self.onsetString
        if self.abatementDateTime:
            self.__json['abatementDateTime'] = self.abatementDateTime.json
        if self.abatementQuantity:
            self.__json['abatementQuantity'] = self.abatementQuantity.json
        if self.abatementBoolean:
            self.__json['abatementBoolean'] = self.abatementBoolean.json
        if self.abatementPeriod:
            self.__json['abatementPeriod'] = self.abatementPeriod.json
        if self.abatementRange:
            self.__json['abatementRange'] = self.abatementRange.json
        if self.abatementString:
            self.__json['abatementString'] = self.abatementString

        # Add json attributes
        self.__json = super(Condition, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR Condition string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ConformanceContactComponent(BackboneElement):
    '''
    FHIR ConformanceContactComponent resource

     Contacts to assist a user in finding and communicating with the publisher.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'telecom':
                    list_to_add.append(ContactPoint(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ConformanceContactComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ConformanceContactComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ConformanceContactComponent constructor
        '''
        logging.info("FHIR ConformanceContactComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.name = self.__add('name')
        if 'telecom' in self.__json:
            if isinstance(self.__json['telecom'], list):
                self.telecom = self.__add_list('telecom')
            else:
                self.telecom = ContactPoint(self.__add('telecom'))
        else:
            self.telecom = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.name:
            self.__json['name'] = self.name
        if self.telecom:
            self.__json['telecom'] = self.__get_list(self.telecom)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ConformanceContactComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ConformanceSoftwareComponent(BackboneElement):
    '''
    FHIR ConformanceSoftwareComponent resource

     Software that is covered by this conformance statement.  It is used when the conformance statement describes the capabilities of a particular software version, independent of an installation.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ConformanceSoftwareComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ConformanceSoftwareComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ConformanceSoftwareComponent constructor
        '''
        logging.info("FHIR ConformanceSoftwareComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.name = self.__add('name')
        self.version = self.__add('version')
        self.releaseDate = DateTime(self.__add('releaseDate'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.name:
            self.__json['name'] = self.name
        if self.version:
            self.__json['version'] = self.version
        if self.releaseDate:
            self.__json['releaseDate'] = self.releaseDate.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ConformanceSoftwareComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ConformanceImplementationComponent(BackboneElement):
    '''
    FHIR ConformanceImplementationComponent resource

     Identifies a specific implementation instance that is described by the conformance statement - i.e. a particular installation, rather than the capabilities of a software program.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ConformanceImplementationComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ConformanceImplementationComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ConformanceImplementationComponent constructor
        '''
        logging.info("FHIR ConformanceImplementationComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.description = self.__add('description')
        self.url = self.__add('url')



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.description:
            self.__json['description'] = self.description
        if self.url:
            self.__json['url'] = self.url


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ConformanceImplementationComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ConformanceCertificateComponent(BackboneElement):
    '''
    FHIR ConformanceCertificateComponent resource

     Certificates associated with security profiles.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ConformanceCertificateComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ConformanceCertificateComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ConformanceCertificateComponent constructor
        '''
        logging.info("FHIR ConformanceCertificateComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.type = self.__add('type')
        self.blob = self.__add('blob')



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.type:
            self.__json['type'] = self.type
        if self.blob:
            self.__json['blob'] = self.blob


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ConformanceCertificateComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ConformanceSecurityComponent(BackboneElement):
    '''
    FHIR ConformanceSecurityComponent resource

     Information about security implementation from an interface perspective - what a client needs to know.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'service':
                    list_to_add.append(CodeableConcept(obj))
                elif key == 'certificate':
                    list_to_add.append(ConformanceCertificateComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ConformanceSecurityComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ConformanceSecurityComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ConformanceSecurityComponent constructor
        '''
        logging.info("FHIR ConformanceSecurityComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.cors = Boolean(self.__add('cors'))
        if 'service' in self.__json:
            if isinstance(self.__json['service'], list):
                self.service = self.__add_list('service')
            else:
                self.service = CodeableConcept(self.__add('service'))
        else:
            self.service = None
        self.description = self.__add('description')
        if 'certificate' in self.__json:
            if isinstance(self.__json['certificate'], list):
                self.certificate = self.__add_list('certificate')
            else:
                self.certificate = ConformanceCertificateComponent(self.__add('certificate'))
        else:
            self.certificate = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.cors:
            self.__json['cors'] = self.cors.json
        if self.service:
            self.__json['service'] = self.__get_list(self.service)
        if self.description:
            self.__json['description'] = self.description
        if self.certificate:
            self.__json['certificate'] = self.__get_list(self.certificate)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ConformanceSecurityComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ConformanceInteractionComponent(BackboneElement):
    '''
    FHIR ConformanceInteractionComponent resource

     Identifies a restful operation supported by the solution.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ConformanceInteractionComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ConformanceInteractionComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ConformanceInteractionComponent constructor
        '''
        logging.info("FHIR ConformanceInteractionComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.code = self.__add('code')
        self.documentation = self.__add('documentation')



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.code:
            self.__json['code'] = self.code
        if self.documentation:
            self.__json['documentation'] = self.documentation


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ConformanceInteractionComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ConformanceSearchParamComponent(BackboneElement):
    '''
    FHIR ConformanceSearchParamComponent resource

     Search parameters for implementations to support and/or make use of - either references to ones defined in the specification, or additional ones defined for/by the implementation.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ConformanceSearchParamComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ConformanceSearchParamComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ConformanceSearchParamComponent constructor
        '''
        logging.info("FHIR ConformanceSearchParamComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.name = self.__add('name')
        self.definition = self.__add('definition')
        self.type = self.__add('type')
        self.documentation = self.__add('documentation')
        if 'target' in self.__json:
            if isinstance(self.__json['target'], list):
                self.target = self.__add_list('target')
            else:
                self.target = self.__add('target')
        else:
            self.target = None
        if 'modifier' in self.__json:
            if isinstance(self.__json['modifier'], list):
                self.modifier = self.__add_list('modifier')
            else:
                self.modifier = self.__add('modifier')
        else:
            self.modifier = None
        if 'chain' in self.__json:
            if isinstance(self.__json['chain'], list):
                self.chain = self.__add_list('chain')
            else:
                self.chain = self.__add('chain')
        else:
            self.chain = None
        self.name = self.__add('name')
        self.definition = self.__add('definition')
        self.type = self.__add('type')
        self.documentation = self.__add('documentation')
        if 'target' in self.__json:
            if isinstance(self.__json['target'], list):
                self.target = self.__add_list('target')
            else:
                self.target = self.__add('target')
        else:
            self.target = None
        if 'modifier' in self.__json:
            if isinstance(self.__json['modifier'], list):
                self.modifier = self.__add_list('modifier')
            else:
                self.modifier = self.__add('modifier')
        else:
            self.modifier = None
        if 'chain' in self.__json:
            if isinstance(self.__json['chain'], list):
                self.chain = self.__add_list('chain')
            else:
                self.chain = self.__add('chain')
        else:
            self.chain = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.name:
            self.__json['name'] = self.name
        if self.definition:
            self.__json['definition'] = self.definition
        if self.type:
            self.__json['type'] = self.type
        if self.documentation:
            self.__json['documentation'] = self.documentation
        if self.target:
            self.__json['target'] = self.__get_list(self.target)
        if self.modifier:
            self.__json['modifier'] = self.__get_list(self.modifier)
        if self.chain:
            self.__json['chain'] = self.__get_list(self.chain)
        if self.name:
            self.__json['name'] = self.name
        if self.definition:
            self.__json['definition'] = self.definition
        if self.type:
            self.__json['type'] = self.type
        if self.documentation:
            self.__json['documentation'] = self.documentation
        if self.target:
            self.__json['target'] = self.__get_list(self.target)
        if self.modifier:
            self.__json['modifier'] = self.__get_list(self.modifier)
        if self.chain:
            self.__json['chain'] = self.__get_list(self.chain)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ConformanceSearchParamComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ConformanceResourceComponent(BackboneElement):
    '''
    FHIR ConformanceResourceComponent resource

     A specification of the restful capabilities of the solution for a specific resource type.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'interaction':
                    list_to_add.append(ConformanceInteractionComponent(obj))
                elif key == 'searchParam':
                    list_to_add.append(ConformanceSearchParamComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ConformanceResourceComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ConformanceResourceComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ConformanceResourceComponent constructor
        '''
        logging.info("FHIR ConformanceResourceComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.type = self.__add('type')
        self.profile = Reference(self.__add('profile'))
        if 'interaction' in self.__json:
            if isinstance(self.__json['interaction'], list):
                self.interaction = self.__add_list('interaction')
            else:
                self.interaction = ConformanceInteractionComponent(self.__add('interaction'))
        else:
            self.interaction = None
        self.versioning = self.__add('versioning')
        self.readHistory = Boolean(self.__add('readHistory'))
        self.updateCreate = Boolean(self.__add('updateCreate'))
        self.conditionalCreate = Boolean(self.__add('conditionalCreate'))
        self.conditionalUpdate = Boolean(self.__add('conditionalUpdate'))
        self.conditionalDelete = self.__add('conditionalDelete')
        if 'searchInclude' in self.__json:
            if isinstance(self.__json['searchInclude'], list):
                self.searchInclude = self.__add_list('searchInclude')
            else:
                self.searchInclude = self.__add('searchInclude')
        else:
            self.searchInclude = None
        if 'searchRevInclude' in self.__json:
            if isinstance(self.__json['searchRevInclude'], list):
                self.searchRevInclude = self.__add_list('searchRevInclude')
            else:
                self.searchRevInclude = self.__add('searchRevInclude')
        else:
            self.searchRevInclude = None
        if 'searchParam' in self.__json:
            if isinstance(self.__json['searchParam'], list):
                self.searchParam = self.__add_list('searchParam')
            else:
                self.searchParam = ConformanceSearchParamComponent(self.__add('searchParam'))
        else:
            self.searchParam = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.type:
            self.__json['type'] = self.type
        if self.profile:
            self.__json['profile'] = self.profile.json
        if self.interaction:
            self.__json['interaction'] = self.__get_list(self.interaction)
        if self.versioning:
            self.__json['versioning'] = self.versioning
        if self.readHistory:
            self.__json['readHistory'] = self.readHistory.json
        if self.updateCreate:
            self.__json['updateCreate'] = self.updateCreate.json
        if self.conditionalCreate:
            self.__json['conditionalCreate'] = self.conditionalCreate.json
        if self.conditionalUpdate:
            self.__json['conditionalUpdate'] = self.conditionalUpdate.json
        if self.conditionalDelete:
            self.__json['conditionalDelete'] = self.conditionalDelete
        if self.searchInclude:
            self.__json['searchInclude'] = self.__get_list(self.searchInclude)
        if self.searchRevInclude:
            self.__json['searchRevInclude'] = self.__get_list(self.searchRevInclude)
        if self.searchParam:
            self.__json['searchParam'] = self.__get_list(self.searchParam)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ConformanceResourceComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ConformanceInteraction1Component(BackboneElement):
    '''
    FHIR ConformanceInteraction1Component resource

     A specification of restful operations supported by the system.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ConformanceInteraction1Component __new__
        '''
        if json == None:
            return None
        else:
            return super(ConformanceInteraction1Component, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ConformanceInteraction1Component constructor
        '''
        logging.info("FHIR ConformanceInteraction1Component: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.code = self.__add('code')
        self.documentation = self.__add('documentation')



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.code:
            self.__json['code'] = self.code
        if self.documentation:
            self.__json['documentation'] = self.documentation


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ConformanceInteraction1Component string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ConformanceOperationComponent(BackboneElement):
    '''
    FHIR ConformanceOperationComponent resource

     Definition of an operation or a named query and with its parameters and their meaning and type.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ConformanceOperationComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ConformanceOperationComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ConformanceOperationComponent constructor
        '''
        logging.info("FHIR ConformanceOperationComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.name = self.__add('name')
        self.definition = Reference(self.__add('definition'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.name:
            self.__json['name'] = self.name
        if self.definition:
            self.__json['definition'] = self.definition.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ConformanceOperationComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ConformanceRestComponent(BackboneElement):
    '''
    FHIR ConformanceRestComponent resource

     A definition of the restful capabilities of the solution, if any.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'resource':
                    list_to_add.append(ConformanceResourceComponent(obj))
                elif key == 'interaction':
                    list_to_add.append(ConformanceInteraction1Component(obj))
                elif key == 'searchParam':
                    list_to_add.append(ConformanceSearchParamComponent(obj))
                elif key == 'operation':
                    list_to_add.append(ConformanceOperationComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ConformanceRestComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ConformanceRestComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ConformanceRestComponent constructor
        '''
        logging.info("FHIR ConformanceRestComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.mode = self.__add('mode')
        self.documentation = self.__add('documentation')
        self.security = ConformanceSecurityComponent(self.__add('security'))
        if 'resource' in self.__json:
            if isinstance(self.__json['resource'], list):
                self.resource = self.__add_list('resource')
            else:
                self.resource = ConformanceResourceComponent(self.__add('resource'))
        else:
            self.resource = None
        if 'interaction' in self.__json:
            if isinstance(self.__json['interaction'], list):
                self.interaction = self.__add_list('interaction')
            else:
                self.interaction = ConformanceInteraction1Component(self.__add('interaction'))
        else:
            self.interaction = None
        self.transactionMode = self.__add('transactionMode')
        if 'searchParam' in self.__json:
            if isinstance(self.__json['searchParam'], list):
                self.searchParam = self.__add_list('searchParam')
            else:
                self.searchParam = ConformanceSearchParamComponent(self.__add('searchParam'))
        else:
            self.searchParam = None
        if 'operation' in self.__json:
            if isinstance(self.__json['operation'], list):
                self.operation = self.__add_list('operation')
            else:
                self.operation = ConformanceOperationComponent(self.__add('operation'))
        else:
            self.operation = None
        if 'compartment' in self.__json:
            if isinstance(self.__json['compartment'], list):
                self.compartment = self.__add_list('compartment')
            else:
                self.compartment = self.__add('compartment')
        else:
            self.compartment = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.mode:
            self.__json['mode'] = self.mode
        if self.documentation:
            self.__json['documentation'] = self.documentation
        if self.security:
            self.__json['security'] = self.security.json
        if self.resource:
            self.__json['resource'] = self.__get_list(self.resource)
        if self.interaction:
            self.__json['interaction'] = self.__get_list(self.interaction)
        if self.transactionMode:
            self.__json['transactionMode'] = self.transactionMode
        if self.searchParam:
            self.__json['searchParam'] = self.__get_list(self.searchParam)
        if self.operation:
            self.__json['operation'] = self.__get_list(self.operation)
        if self.compartment:
            self.__json['compartment'] = self.__get_list(self.compartment)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ConformanceRestComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ConformanceEndpointComponent(BackboneElement):
    '''
    FHIR ConformanceEndpointComponent resource

     An endpoint (network accessible address) to which messages and/or replies are to be sent.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ConformanceEndpointComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ConformanceEndpointComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ConformanceEndpointComponent constructor
        '''
        logging.info("FHIR ConformanceEndpointComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ConformanceEndpointComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ConformanceEventComponent(BackboneElement):
    '''
    FHIR ConformanceEventComponent resource

     A description of the solution's support for an event at this end-point.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ConformanceEventComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ConformanceEventComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ConformanceEventComponent constructor
        '''
        logging.info("FHIR ConformanceEventComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ConformanceEventComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ConformanceMessagingComponent(BackboneElement):
    '''
    FHIR ConformanceMessagingComponent resource

     A description of the messaging capabilities of the solution.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'endpoint':
                    list_to_add.append(ConformanceEndpointComponent(obj))
                elif key == 'event':
                    list_to_add.append(ConformanceEventComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ConformanceMessagingComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ConformanceMessagingComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ConformanceMessagingComponent constructor
        '''
        logging.info("FHIR ConformanceMessagingComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        if 'endpoint' in self.__json:
            if isinstance(self.__json['endpoint'], list):
                self.endpoint = self.__add_list('endpoint')
            else:
                self.endpoint = ConformanceEndpointComponent(self.__add('endpoint'))
        else:
            self.endpoint = None
        self.reliableCache = self.__add('reliableCache')
        self.documentation = self.__add('documentation')
        if 'event' in self.__json:
            if isinstance(self.__json['event'], list):
                self.event = self.__add_list('event')
            else:
                self.event = ConformanceEventComponent(self.__add('event'))
        else:
            self.event = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.endpoint:
            self.__json['endpoint'] = self.__get_list(self.endpoint)
        if self.reliableCache:
            self.__json['reliableCache'] = self.reliableCache
        if self.documentation:
            self.__json['documentation'] = self.documentation
        if self.event:
            self.__json['event'] = self.__get_list(self.event)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ConformanceMessagingComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ConformanceDocumentComponent(BackboneElement):
    '''
    FHIR ConformanceDocumentComponent resource

     A document definition.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ConformanceDocumentComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ConformanceDocumentComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ConformanceDocumentComponent constructor
        '''
        logging.info("FHIR ConformanceDocumentComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.mode = self.__add('mode')
        self.documentation = self.__add('documentation')
        self.profile = Reference(self.__add('profile'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.mode:
            self.__json['mode'] = self.mode
        if self.documentation:
            self.__json['documentation'] = self.documentation
        if self.profile:
            self.__json['profile'] = self.profile.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ConformanceDocumentComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class Conformance(DomainResource):
    '''
    FHIR Conformance resource

     A conformance statement is a set of capabilities of a FHIR Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation. If the element is present, it must have either a @value, an @id, or extensions

    url ->  An absolute URL that is used to identify this conformance statement when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this conformance statement is (or will be) published.
    version ->  The identifier that is used to identify this version of the conformance statement when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the profile author manually and the value should be a timestamp.
    name ->  A free text natural language name identifying the conformance statement.
    status ->  The status of this conformance statement. 
    experimental ->  A flag to indicate that this conformance statement is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
    date ->  The date  (and optionally time) when the conformance statement was published. The date must change when the business version changes, if it does, and it must change if the status code changes. In addition, it should change when the substantive content of the conformance statement changes.
    publisher ->  The name of the individual or organization that published the conformance.
    contact ->  Contacts to assist a user in finding and communicating with the publisher.
    description ->  A free text natural language description of the conformance statement and its use. Typically, this is used when the conformance statement describes a desired rather than an actual solution, for example as a formal expression of requirements as part of an RFP.
    useContext ->  The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching of conformance statements.
    requirements ->  Explains why this conformance statement is needed and why it's been constrained as it has.
    copyright ->  A copyright statement relating to the conformance statement and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the details of the system described by the conformance statement.
    kind ->  The way that this statement is intended to be used, to describe an actual running instance of software, a particular product (kind not instance of software) or a class of implementation (e.g. a desired purchase). 
    software ->  Software that is covered by this conformance statement.  It is used when the conformance statement describes the capabilities of a particular software version, independent of an installation.
    implementation ->  Identifies a specific implementation instance that is described by the conformance statement - i.e. a particular installation, rather than the capabilities of a software program.
    fhirVersion ->  The version of the FHIR specification on which this conformance statement is based.
    acceptUnknown ->  A code that indicates whether the application accepts unknown elements or extensions when reading resources. 
    format ->  A list of the formats supported by this implementation using their content types.
    profile ->  A list of profiles that represent different use cases supported by the system. For a server, "supported by the system" means the system hosts/produces a set of resources that are conformant to a particular profile, and allows clients that use its services to search using this profile and to find appropriate data. For a client, it means the system will search by this profile and process data according to the guidance implicit in the profile. See further discussion in [Using Profiles]{profiling.html#profile-uses}.
    rest ->  A definition of the restful capabilities of the solution, if any.
    messaging ->  A description of the messaging capabilities of the solution.
    document ->  A document definition.

    # Search parameters
        Conformance.search.date
        Conformance.search.description
        Conformance.search.event
        Conformance.search.fhirversion
        Conformance.search.format
        Conformance.search.mode
        Conformance.search.name
        Conformance.search.profile
        Conformance.search.publisher
        Conformance.search.resource
        Conformance.search.security
        Conformance.search.software
        Conformance.search.status
        Conformance.search.supported-profile
        Conformance.search.url
        Conformance.search.version
    '''
    # search parameters
    par = [("date", "date"),
           ("description", "string"),
           ("event", "token"),
           ("fhirversion", "token"),
           ("format", "token"),
           ("mode", "token"),
           ("name", "string"),
           ("profile", "reference"),
           ("publisher", "string"),
           ("resource", "token"),
           ("security", "token"),
           ("software", "string"),
           ("status", "token"),
           ("supported-profile", "reference"),
           ("url", "uri"),
           ("version", "token")]

    search = Params(par, "Conformance")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'contact':
                    list_to_add.append(ConformanceContactComponent(obj))
                elif key == 'useContext':
                    list_to_add.append(CodeableConcept(obj))
                elif key == 'profile':
                    list_to_add.append(Reference(obj))
                elif key == 'rest':
                    list_to_add.append(ConformanceRestComponent(obj))
                elif key == 'messaging':
                    list_to_add.append(ConformanceMessagingComponent(obj))
                elif key == 'document':
                    list_to_add.append(ConformanceDocumentComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR Conformance __new__
        '''
        if json == None:
            return None
        else:
            return super(Conformance, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR Conformance constructor
        '''
        logging.info("FHIR Conformance: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "Conformance"
        self.url = self.__add('url')
        self.version = self.__add('version')
        self.name = self.__add('name')
        self.status = self.__add('status')
        self.experimental = Boolean(self.__add('experimental'))
        self.date = DateTime(self.__add('date'))
        self.publisher = self.__add('publisher')
        if 'contact' in self.__json:
            if isinstance(self.__json['contact'], list):
                self.contact = self.__add_list('contact')
            else:
                self.contact = ConformanceContactComponent(self.__add('contact'))
        else:
            self.contact = None
        self.description = self.__add('description')
        if 'useContext' in self.__json:
            if isinstance(self.__json['useContext'], list):
                self.useContext = self.__add_list('useContext')
            else:
                self.useContext = CodeableConcept(self.__add('useContext'))
        else:
            self.useContext = None
        self.requirements = self.__add('requirements')
        self.copyright = self.__add('copyright')
        self.kind = self.__add('kind')
        self.software = ConformanceSoftwareComponent(self.__add('software'))
        self.implementation = ConformanceImplementationComponent(self.__add('implementation'))
        self.fhirVersion = self.__add('fhirVersion')
        self.acceptUnknown = self.__add('acceptUnknown')
        if 'format' in self.__json:
            if isinstance(self.__json['format'], list):
                self.format = self.__add_list('format')
            else:
                self.format = self.__add('format')
        else:
            self.format = None
        if 'profile' in self.__json:
            if isinstance(self.__json['profile'], list):
                self.profile = self.__add_list('profile')
            else:
                self.profile = Reference(self.__add('profile'))
        else:
            self.profile = None
        if 'rest' in self.__json:
            if isinstance(self.__json['rest'], list):
                self.rest = self.__add_list('rest')
            else:
                self.rest = ConformanceRestComponent(self.__add('rest'))
        else:
            self.rest = None
        if 'messaging' in self.__json:
            if isinstance(self.__json['messaging'], list):
                self.messaging = self.__add_list('messaging')
            else:
                self.messaging = ConformanceMessagingComponent(self.__add('messaging'))
        else:
            self.messaging = None
        if 'document' in self.__json:
            if isinstance(self.__json['document'], list):
                self.document = self.__add_list('document')
            else:
                self.document = ConformanceDocumentComponent(self.__add('document'))
        else:
            self.document = None


        # Parent Resource Init
        super(Conformance, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.url:
            self.__json['url'] = self.url
        if self.version:
            self.__json['version'] = self.version
        if self.name:
            self.__json['name'] = self.name
        if self.status:
            self.__json['status'] = self.status
        if self.experimental:
            self.__json['experimental'] = self.experimental.json
        if self.date:
            self.__json['date'] = self.date.json
        if self.publisher:
            self.__json['publisher'] = self.publisher
        if self.contact:
            self.__json['contact'] = self.__get_list(self.contact)
        if self.description:
            self.__json['description'] = self.description
        if self.useContext:
            self.__json['useContext'] = self.__get_list(self.useContext)
        if self.requirements:
            self.__json['requirements'] = self.requirements
        if self.copyright:
            self.__json['copyright'] = self.copyright
        if self.kind:
            self.__json['kind'] = self.kind
        if self.software:
            self.__json['software'] = self.software.json
        if self.implementation:
            self.__json['implementation'] = self.implementation.json
        if self.fhirVersion:
            self.__json['fhirVersion'] = self.fhirVersion
        if self.acceptUnknown:
            self.__json['acceptUnknown'] = self.acceptUnknown
        if self.format:
            self.__json['format'] = self.__get_list(self.format)
        if self.profile:
            self.__json['profile'] = self.__get_list(self.profile)
        if self.rest:
            self.__json['rest'] = self.__get_list(self.rest)
        if self.messaging:
            self.__json['messaging'] = self.__get_list(self.messaging)
        if self.document:
            self.__json['document'] = self.__get_list(self.document)

        # Add json attributes
        self.__json = super(Conformance, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR Conformance string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ContractAgentComponent(BackboneElement):
    '''
    FHIR ContractAgentComponent resource

     An actor taking a role in an activity for which it can be assigned some degree of responsibility for the activity taking place.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'role':
                    list_to_add.append(CodeableConcept(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ContractAgentComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ContractAgentComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ContractAgentComponent constructor
        '''
        logging.info("FHIR ContractAgentComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.actor = Reference(self.__add('actor'))
        if 'role' in self.__json:
            if isinstance(self.__json['role'], list):
                self.role = self.__add_list('role')
            else:
                self.role = CodeableConcept(self.__add('role'))
        else:
            self.role = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.actor:
            self.__json['actor'] = self.actor.json
        if self.role:
            self.__json['role'] = self.__get_list(self.role)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ContractAgentComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ContractSignerComponent(BackboneElement):
    '''
    FHIR ContractSignerComponent resource

     Parties with legal standing in the Contract, including the principal parties, the grantor(s) and grantee(s), which are any person or organization bound by the contract, and any ancillary parties, which facilitate the execution of the contract such as a notary or witness.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'signature':
                    list_to_add.append(Signature(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ContractSignerComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ContractSignerComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ContractSignerComponent constructor
        '''
        logging.info("FHIR ContractSignerComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.type = Coding(self.__add('type'))
        self.party = Reference(self.__add('party'))
        if 'signature' in self.__json:
            if isinstance(self.__json['signature'], list):
                self.signature = self.__add_list('signature')
            else:
                self.signature = Signature(self.__add('signature'))
        else:
            self.signature = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.type:
            self.__json['type'] = self.type.json
        if self.party:
            self.__json['party'] = self.party.json
        if self.signature:
            self.__json['signature'] = self.__get_list(self.signature)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ContractSignerComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ContractValuedItemComponent(BackboneElement):
    '''
    FHIR ContractValuedItemComponent resource

     Contract Valued Item List.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ContractValuedItemComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ContractValuedItemComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ContractValuedItemComponent constructor
        '''
        logging.info("FHIR ContractValuedItemComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.identifier = Identifier(self.__add('identifier'))
        self.effectiveTime = DateTime(self.__add('effectiveTime'))
        self.quantity = SimpleQuantity(self.__add('quantity'))
        self.unitPrice = Money(self.__add('unitPrice'))
        self.factor = self.__add('factor')
        self.points = self.__add('points')
        self.net = Money(self.__add('net'))
        self.entityCodeableConcept = CodeableConcept(self.__add('entityCodeableConcept'))
        self.entityReference = Reference(self.__add('entityReference'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identifier:
            self.__json['identifier'] = self.identifier.json
        if self.effectiveTime:
            self.__json['effectiveTime'] = self.effectiveTime.json
        if self.quantity:
            self.__json['quantity'] = self.quantity.json
        if self.unitPrice:
            self.__json['unitPrice'] = self.unitPrice.json
        if self.factor:
            self.__json['factor'] = self.factor
        if self.points:
            self.__json['points'] = self.points
        if self.net:
            self.__json['net'] = self.net.json
        if self.entityCodeableConcept:
            self.__json['entityCodeableConcept'] = self.entityCodeableConcept.json
        if self.entityReference:
            self.__json['entityReference'] = self.entityReference.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ContractValuedItemComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ContractAgent1Component(BackboneElement):
    '''
    FHIR ContractAgent1Component resource

     An actor taking a role in an activity for which it can be assigned some degree of responsibility for the activity taking place.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'role':
                    list_to_add.append(CodeableConcept(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ContractAgent1Component __new__
        '''
        if json == None:
            return None
        else:
            return super(ContractAgent1Component, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ContractAgent1Component constructor
        '''
        logging.info("FHIR ContractAgent1Component: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.actor = Reference(self.__add('actor'))
        if 'role' in self.__json:
            if isinstance(self.__json['role'], list):
                self.role = self.__add_list('role')
            else:
                self.role = CodeableConcept(self.__add('role'))
        else:
            self.role = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.actor:
            self.__json['actor'] = self.actor.json
        if self.role:
            self.__json['role'] = self.__get_list(self.role)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ContractAgent1Component string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ContractValuedItem1Component(BackboneElement):
    '''
    FHIR ContractValuedItem1Component resource

     Contract Provision Valued Item List.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ContractValuedItem1Component __new__
        '''
        if json == None:
            return None
        else:
            return super(ContractValuedItem1Component, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ContractValuedItem1Component constructor
        '''
        logging.info("FHIR ContractValuedItem1Component: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.identifier = Identifier(self.__add('identifier'))
        self.effectiveTime = DateTime(self.__add('effectiveTime'))
        self.quantity = SimpleQuantity(self.__add('quantity'))
        self.unitPrice = Money(self.__add('unitPrice'))
        self.factor = self.__add('factor')
        self.points = self.__add('points')
        self.net = Money(self.__add('net'))
        self.entityCodeableConcept = CodeableConcept(self.__add('entityCodeableConcept'))
        self.entityReference = Reference(self.__add('entityReference'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identifier:
            self.__json['identifier'] = self.identifier.json
        if self.effectiveTime:
            self.__json['effectiveTime'] = self.effectiveTime.json
        if self.quantity:
            self.__json['quantity'] = self.quantity.json
        if self.unitPrice:
            self.__json['unitPrice'] = self.unitPrice.json
        if self.factor:
            self.__json['factor'] = self.factor
        if self.points:
            self.__json['points'] = self.points
        if self.net:
            self.__json['net'] = self.net.json
        if self.entityCodeableConcept:
            self.__json['entityCodeableConcept'] = self.entityCodeableConcept.json
        if self.entityReference:
            self.__json['entityReference'] = self.entityReference.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ContractValuedItem1Component string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ContractTermComponent(BackboneElement):
    '''
    FHIR ContractTermComponent resource

     One or more Contract Provisions, which may be related and conveyed as a group, and may contain nested groups.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'topic':
                    list_to_add.append(Reference(obj))
                elif key == 'action':
                    list_to_add.append(CodeableConcept(obj))
                elif key == 'actionReason':
                    list_to_add.append(CodeableConcept(obj))
                elif key == 'agent':
                    list_to_add.append(ContractAgent1Component(obj))
                elif key == 'valuedItem':
                    list_to_add.append(ContractValuedItem1Component(obj))
                elif key == 'group':
                    list_to_add.append(ContractTermComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ContractTermComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ContractTermComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ContractTermComponent constructor
        '''
        logging.info("FHIR ContractTermComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.identifier = Identifier(self.__add('identifier'))
        self.issued = DateTime(self.__add('issued'))
        self.applies = Period(self.__add('applies'))
        self.type = CodeableConcept(self.__add('type'))
        self.subType = CodeableConcept(self.__add('subType'))
        if 'topic' in self.__json:
            if isinstance(self.__json['topic'], list):
                self.topic = self.__add_list('topic')
            else:
                self.topic = Reference(self.__add('topic'))
        else:
            self.topic = None
        if 'action' in self.__json:
            if isinstance(self.__json['action'], list):
                self.action = self.__add_list('action')
            else:
                self.action = CodeableConcept(self.__add('action'))
        else:
            self.action = None
        if 'actionReason' in self.__json:
            if isinstance(self.__json['actionReason'], list):
                self.actionReason = self.__add_list('actionReason')
            else:
                self.actionReason = CodeableConcept(self.__add('actionReason'))
        else:
            self.actionReason = None
        if 'agent' in self.__json:
            if isinstance(self.__json['agent'], list):
                self.agent = self.__add_list('agent')
            else:
                self.agent = ContractAgent1Component(self.__add('agent'))
        else:
            self.agent = None
        self.text = self.__add('text')
        if 'valuedItem' in self.__json:
            if isinstance(self.__json['valuedItem'], list):
                self.valuedItem = self.__add_list('valuedItem')
            else:
                self.valuedItem = ContractValuedItem1Component(self.__add('valuedItem'))
        else:
            self.valuedItem = None
        if 'group' in self.__json:
            if isinstance(self.__json['group'], list):
                self.group = self.__add_list('group')
            else:
                self.group = ContractTermComponent(self.__add('group'))
        else:
            self.group = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identifier:
            self.__json['identifier'] = self.identifier.json
        if self.issued:
            self.__json['issued'] = self.issued.json
        if self.applies:
            self.__json['applies'] = self.applies.json
        if self.type:
            self.__json['type'] = self.type.json
        if self.subType:
            self.__json['subType'] = self.subType.json
        if self.topic:
            self.__json['topic'] = self.__get_list(self.topic)
        if self.action:
            self.__json['action'] = self.__get_list(self.action)
        if self.actionReason:
            self.__json['actionReason'] = self.__get_list(self.actionReason)
        if self.agent:
            self.__json['agent'] = self.__get_list(self.agent)
        if self.text:
            self.__json['text'] = self.text
        if self.valuedItem:
            self.__json['valuedItem'] = self.__get_list(self.valuedItem)
        if self.group:
            self.__json['group'] = self.__get_list(self.group)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ContractTermComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ContractFriendlyComponent(BackboneElement):
    '''
    FHIR ContractFriendlyComponent resource

     The "patient friendly language" versionof the Contract in whole or in parts. "Patient friendly language" means the representation of the Contract and Contract Provisions in a manner that is readily accessible and understandable by a layperson in accordance with best practices for communication styles that ensure that those agreeing to or signing the Contract understand the roles, actions, obligations, responsibilities, and implication of the agreement.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ContractFriendlyComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ContractFriendlyComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ContractFriendlyComponent constructor
        '''
        logging.info("FHIR ContractFriendlyComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.contentAttachment = Attachment(self.__add('contentAttachment'))
        self.contentReference = Reference(self.__add('contentReference'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.contentAttachment:
            self.__json['contentAttachment'] = self.contentAttachment.json
        if self.contentReference:
            self.__json['contentReference'] = self.contentReference.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ContractFriendlyComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ContractLegalComponent(BackboneElement):
    '''
    FHIR ContractLegalComponent resource

     List of Legal expressions or representations of this Contract.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ContractLegalComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ContractLegalComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ContractLegalComponent constructor
        '''
        logging.info("FHIR ContractLegalComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.contentAttachment = Attachment(self.__add('contentAttachment'))
        self.contentReference = Reference(self.__add('contentReference'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.contentAttachment:
            self.__json['contentAttachment'] = self.contentAttachment.json
        if self.contentReference:
            self.__json['contentReference'] = self.contentReference.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ContractLegalComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ContractRuleComponent(BackboneElement):
    '''
    FHIR ContractRuleComponent resource

     List of Computable Policy Rule Language Representations of this Contract.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ContractRuleComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ContractRuleComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ContractRuleComponent constructor
        '''
        logging.info("FHIR ContractRuleComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.contentAttachment = Attachment(self.__add('contentAttachment'))
        self.contentReference = Reference(self.__add('contentReference'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.contentAttachment:
            self.__json['contentAttachment'] = self.contentAttachment.json
        if self.contentReference:
            self.__json['contentReference'] = self.contentReference.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ContractRuleComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class Contract(DomainResource):
    '''
    FHIR Contract resource

     A formal agreement between parties regarding the conduct of business, exchange of information or other matters. If the element is present, it must have either a @value, an @id, or extensions

    identifier ->  Unique identifier for this Contract.
    issued ->  When this  Contract was issued.
    applies ->  Relevant time or time-period when this Contract is applicable.
    subject ->  The target entity impacted by or of interest to parties to the agreement.
    topic ->  The matter of concern in the context of this agreement.
    authority ->  A formally or informally recognized grouping of people, principals, organizations, or jurisdictions formed for the purpose of achieving some form of collective action such as the promulgation, administration and enforcement of contracts and policies.
    domain ->  Recognized governance framework or system operating with a circumscribed scope in accordance with specified principles, policies, processes or procedures for managing rights, actions, or behaviors of parties or principals relative to resources.
    type ->  Type of Contract such as an insurance policy, real estate contract, a will, power of attorny, Privacy or Security policy , trust framework agreement, etc.
    subType ->  More specific type or specialization of an overarching or more general contract such as auto insurance, home owner  insurance, prenupial agreement, Advanced-Directive, or privacy consent.
    action ->  Action stipulated by this Contract.
    actionReason ->  Reason for action stipulated by this Contract.
    agent ->  An actor taking a role in an activity for which it can be assigned some degree of responsibility for the activity taking place.
    signer ->  Parties with legal standing in the Contract, including the principal parties, the grantor(s) and grantee(s), which are any person or organization bound by the contract, and any ancillary parties, which facilitate the execution of the contract such as a notary or witness.
    valuedItem ->  Contract Valued Item List.
    term ->  One or more Contract Provisions, which may be related and conveyed as a group, and may contain nested groups.
    friendly ->  The "patient friendly language" versionof the Contract in whole or in parts. "Patient friendly language" means the representation of the Contract and Contract Provisions in a manner that is readily accessible and understandable by a layperson in accordance with best practices for communication styles that ensure that those agreeing to or signing the Contract understand the roles, actions, obligations, responsibilities, and implication of the agreement.
    legal ->  List of Legal expressions or representations of this Contract.
    rule ->  List of Computable Policy Rule Language Representations of this Contract.
    bindingAttachment ->  Legally binding Contract: This is the signed and legally recognized representation of the Contract, which is considered the "source of truth" and which would be the basis for legal action related to enforcement of this Contract.
    bindingReference ->  Legally binding Contract: This is the signed and legally recognized representation of the Contract, which is considered the "source of truth" and which would be the basis for legal action related to enforcement of this Contract.

    # Search parameters
        Contract.search.actor
        Contract.search.identifier
        Contract.search.patient
        Contract.search.signer
        Contract.search.subject
    '''
    # search parameters
    par = [("actor", "reference"),
           ("identifier", "token"),
           ("patient", "reference"),
           ("signer", "reference"),
           ("subject", "reference")]

    search = Params(par, "Contract")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'subject':
                    list_to_add.append(Reference(obj))
                elif key == 'topic':
                    list_to_add.append(Reference(obj))
                elif key == 'authority':
                    list_to_add.append(Reference(obj))
                elif key == 'domain':
                    list_to_add.append(Reference(obj))
                elif key == 'subType':
                    list_to_add.append(CodeableConcept(obj))
                elif key == 'action':
                    list_to_add.append(CodeableConcept(obj))
                elif key == 'actionReason':
                    list_to_add.append(CodeableConcept(obj))
                elif key == 'agent':
                    list_to_add.append(ContractAgentComponent(obj))
                elif key == 'signer':
                    list_to_add.append(ContractSignerComponent(obj))
                elif key == 'valuedItem':
                    list_to_add.append(ContractValuedItemComponent(obj))
                elif key == 'term':
                    list_to_add.append(ContractTermComponent(obj))
                elif key == 'friendly':
                    list_to_add.append(ContractFriendlyComponent(obj))
                elif key == 'legal':
                    list_to_add.append(ContractLegalComponent(obj))
                elif key == 'rule':
                    list_to_add.append(ContractRuleComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR Contract __new__
        '''
        if json == None:
            return None
        else:
            return super(Contract, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR Contract constructor
        '''
        logging.info("FHIR Contract: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "Contract"
        self.identifier = Identifier(self.__add('identifier'))
        self.issued = DateTime(self.__add('issued'))
        self.applies = Period(self.__add('applies'))
        if 'subject' in self.__json:
            if isinstance(self.__json['subject'], list):
                self.subject = self.__add_list('subject')
            else:
                self.subject = Reference(self.__add('subject'))
        else:
            self.subject = None
        if 'topic' in self.__json:
            if isinstance(self.__json['topic'], list):
                self.topic = self.__add_list('topic')
            else:
                self.topic = Reference(self.__add('topic'))
        else:
            self.topic = None
        if 'authority' in self.__json:
            if isinstance(self.__json['authority'], list):
                self.authority = self.__add_list('authority')
            else:
                self.authority = Reference(self.__add('authority'))
        else:
            self.authority = None
        if 'domain' in self.__json:
            if isinstance(self.__json['domain'], list):
                self.domain = self.__add_list('domain')
            else:
                self.domain = Reference(self.__add('domain'))
        else:
            self.domain = None
        self.type = CodeableConcept(self.__add('type'))
        if 'subType' in self.__json:
            if isinstance(self.__json['subType'], list):
                self.subType = self.__add_list('subType')
            else:
                self.subType = CodeableConcept(self.__add('subType'))
        else:
            self.subType = None
        if 'action' in self.__json:
            if isinstance(self.__json['action'], list):
                self.action = self.__add_list('action')
            else:
                self.action = CodeableConcept(self.__add('action'))
        else:
            self.action = None
        if 'actionReason' in self.__json:
            if isinstance(self.__json['actionReason'], list):
                self.actionReason = self.__add_list('actionReason')
            else:
                self.actionReason = CodeableConcept(self.__add('actionReason'))
        else:
            self.actionReason = None
        if 'agent' in self.__json:
            if isinstance(self.__json['agent'], list):
                self.agent = self.__add_list('agent')
            else:
                self.agent = ContractAgentComponent(self.__add('agent'))
        else:
            self.agent = None
        if 'signer' in self.__json:
            if isinstance(self.__json['signer'], list):
                self.signer = self.__add_list('signer')
            else:
                self.signer = ContractSignerComponent(self.__add('signer'))
        else:
            self.signer = None
        if 'valuedItem' in self.__json:
            if isinstance(self.__json['valuedItem'], list):
                self.valuedItem = self.__add_list('valuedItem')
            else:
                self.valuedItem = ContractValuedItemComponent(self.__add('valuedItem'))
        else:
            self.valuedItem = None
        if 'term' in self.__json:
            if isinstance(self.__json['term'], list):
                self.term = self.__add_list('term')
            else:
                self.term = ContractTermComponent(self.__add('term'))
        else:
            self.term = None
        if 'friendly' in self.__json:
            if isinstance(self.__json['friendly'], list):
                self.friendly = self.__add_list('friendly')
            else:
                self.friendly = ContractFriendlyComponent(self.__add('friendly'))
        else:
            self.friendly = None
        if 'legal' in self.__json:
            if isinstance(self.__json['legal'], list):
                self.legal = self.__add_list('legal')
            else:
                self.legal = ContractLegalComponent(self.__add('legal'))
        else:
            self.legal = None
        if 'rule' in self.__json:
            if isinstance(self.__json['rule'], list):
                self.rule = self.__add_list('rule')
            else:
                self.rule = ContractRuleComponent(self.__add('rule'))
        else:
            self.rule = None
        self.bindingAttachment = Attachment(self.__add('bindingAttachment'))
        self.bindingReference = Reference(self.__add('bindingReference'))


        # Parent Resource Init
        super(Contract, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identifier:
            self.__json['identifier'] = self.identifier.json
        if self.issued:
            self.__json['issued'] = self.issued.json
        if self.applies:
            self.__json['applies'] = self.applies.json
        if self.subject:
            self.__json['subject'] = self.__get_list(self.subject)
        if self.topic:
            self.__json['topic'] = self.__get_list(self.topic)
        if self.authority:
            self.__json['authority'] = self.__get_list(self.authority)
        if self.domain:
            self.__json['domain'] = self.__get_list(self.domain)
        if self.type:
            self.__json['type'] = self.type.json
        if self.subType:
            self.__json['subType'] = self.__get_list(self.subType)
        if self.action:
            self.__json['action'] = self.__get_list(self.action)
        if self.actionReason:
            self.__json['actionReason'] = self.__get_list(self.actionReason)
        if self.agent:
            self.__json['agent'] = self.__get_list(self.agent)
        if self.signer:
            self.__json['signer'] = self.__get_list(self.signer)
        if self.valuedItem:
            self.__json['valuedItem'] = self.__get_list(self.valuedItem)
        if self.term:
            self.__json['term'] = self.__get_list(self.term)
        if self.friendly:
            self.__json['friendly'] = self.__get_list(self.friendly)
        if self.legal:
            self.__json['legal'] = self.__get_list(self.legal)
        if self.rule:
            self.__json['rule'] = self.__get_list(self.rule)
        if self.bindingAttachment:
            self.__json['bindingAttachment'] = self.bindingAttachment.json
        if self.bindingReference:
            self.__json['bindingReference'] = self.bindingReference.json

        # Add json attributes
        self.__json = super(Contract, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR Contract string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class Coverage(DomainResource):
    '''
    FHIR Coverage resource

     Financial instrument which may be used to pay for or reimburse health care products and services. If the element is present, it must have either a @value, an @id, or extensions

    bin ->  Business Identification Number (BIN number) used to identify the routing  of eClaims.
    period ->  Time period during which the coverage is in force. A missing start date indicates the start date isn't known, a missing end date means the coverage is continuing to be in force.
    type ->  The type of coverage: social program, medical plan, accident coverage (workers compensation, auto), group health.
    relationship ->  The relationship of the patient to the planholdersubscriber).
    identifier ->  The main (and possibly only) identifier for the coverage - often referred to as a Member Id, Subscriber Id, Certificate number or Personal Health Number or Case ID.
    group ->  Identifies a style or collective of coverage issues by the underwriter, for example may be used to identify a class of coverage or employer group. May also be referred to as a Policy or Group ID.
    plan ->  Identifies a style or collective of coverage issues by the underwriter, for example may be used to identify a class of coverage or employer group. May also be referred to as a Policy or Group ID.
    subPlan ->  Identifies a sub-style or sub-collective of coverage issues by the underwriter, for example may be used to identify a specific employer group within a class of employers. May be referred to as a Section or Division ID.
    dependent ->  A unique identifier for a dependent under the coverage.
    sequence ->  An optional counter for a particular instance of the identified coverage which increments upon each renewal.
    exception ->  Factors which may influence the applicability of coverage.
    school ->  Name of school for over-aged dependants.
    network ->  The identifier for a community of providers.
    contract ->  The policy(s) which constitute this insurance coverage.
    issuerIdentifier ->  The program or plan underwriter or payor.
    issuerReference ->  The program or plan underwriter or payor.
    planholderIdentifier ->  The party who 'owns' the insurance contractual relationship to the policy or to whom the benefit of the policy is due.
    planholderReference ->  The party who 'owns' the insurance contractual relationship to the policy or to whom the benefit of the policy is due.
    beneficiaryIdentifier ->  The party who benefits from the insurance coverage.
    beneficiaryReference ->  The party who benefits from the insurance coverage.

    # Search parameters
        Coverage.search.dependent
        Coverage.search.group
        Coverage.search.identifier
        Coverage.search.issuer
        Coverage.search.plan
        Coverage.search.sequence
        Coverage.search.subplan
        Coverage.search.type
    '''
    # search parameters
    par = [("dependent", "token"),
           ("group", "token"),
           ("identifier", "token"),
           ("issuer", "reference"),
           ("plan", "token"),
           ("sequence", "token"),
           ("subplan", "token"),
           ("type", "token")]

    search = Params(par, "Coverage")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'identifier':
                    list_to_add.append(Identifier(obj))
                elif key == 'exception':
                    list_to_add.append(Coding(obj))
                elif key == 'contract':
                    list_to_add.append(Reference(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR Coverage __new__
        '''
        if json == None:
            return None
        else:
            return super(Coverage, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR Coverage constructor
        '''
        logging.info("FHIR Coverage: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "Coverage"
        self.bin = self.__add('bin')
        self.period = Period(self.__add('period'))
        self.type = Coding(self.__add('type'))
        self.relationship = Coding(self.__add('relationship'))
        if 'identifier' in self.__json:
            if isinstance(self.__json['identifier'], list):
                self.identifier = self.__add_list('identifier')
            else:
                self.identifier = Identifier(self.__add('identifier'))
        else:
            self.identifier = None
        self.group = self.__add('group')
        self.plan = self.__add('plan')
        self.subPlan = self.__add('subPlan')
        self.dependent = self.__add('dependent')
        self.sequence = self.__add('sequence')
        if 'exception' in self.__json:
            if isinstance(self.__json['exception'], list):
                self.exception = self.__add_list('exception')
            else:
                self.exception = Coding(self.__add('exception'))
        else:
            self.exception = None
        self.school = self.__add('school')
        self.network = self.__add('network')
        if 'contract' in self.__json:
            if isinstance(self.__json['contract'], list):
                self.contract = self.__add_list('contract')
            else:
                self.contract = Reference(self.__add('contract'))
        else:
            self.contract = None
        self.issuerIdentifier = Identifier(self.__add('issuerIdentifier'))
        self.issuerReference = Reference(self.__add('issuerReference'))
        self.planholderIdentifier = Identifier(self.__add('planholderIdentifier'))
        self.planholderReference = Reference(self.__add('planholderReference'))
        self.beneficiaryIdentifier = Identifier(self.__add('beneficiaryIdentifier'))
        self.beneficiaryReference = Reference(self.__add('beneficiaryReference'))


        # Parent Resource Init
        super(Coverage, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.bin:
            self.__json['bin'] = self.bin
        if self.period:
            self.__json['period'] = self.period.json
        if self.type:
            self.__json['type'] = self.type.json
        if self.relationship:
            self.__json['relationship'] = self.relationship.json
        if self.identifier:
            self.__json['identifier'] = self.__get_list(self.identifier)
        if self.group:
            self.__json['group'] = self.group
        if self.plan:
            self.__json['plan'] = self.plan
        if self.subPlan:
            self.__json['subPlan'] = self.subPlan
        if self.dependent:
            self.__json['dependent'] = self.dependent
        if self.sequence:
            self.__json['sequence'] = self.sequence
        if self.exception:
            self.__json['exception'] = self.__get_list(self.exception)
        if self.school:
            self.__json['school'] = self.school
        if self.network:
            self.__json['network'] = self.network
        if self.contract:
            self.__json['contract'] = self.__get_list(self.contract)
        if self.issuerIdentifier:
            self.__json['issuerIdentifier'] = self.issuerIdentifier.json
        if self.issuerReference:
            self.__json['issuerReference'] = self.issuerReference.json
        if self.planholderIdentifier:
            self.__json['planholderIdentifier'] = self.planholderIdentifier.json
        if self.planholderReference:
            self.__json['planholderReference'] = self.planholderReference.json
        if self.beneficiaryIdentifier:
            self.__json['beneficiaryIdentifier'] = self.beneficiaryIdentifier.json
        if self.beneficiaryReference:
            self.__json['beneficiaryReference'] = self.beneficiaryReference.json

        # Add json attributes
        self.__json = super(Coverage, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR Coverage string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class DataElementContactComponent(BackboneElement):
    '''
    FHIR DataElementContactComponent resource

     Contacts to assist a user in finding and communicating with the publisher.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'telecom':
                    list_to_add.append(ContactPoint(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR DataElementContactComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(DataElementContactComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR DataElementContactComponent constructor
        '''
        logging.info("FHIR DataElementContactComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.name = self.__add('name')
        if 'telecom' in self.__json:
            if isinstance(self.__json['telecom'], list):
                self.telecom = self.__add_list('telecom')
            else:
                self.telecom = ContactPoint(self.__add('telecom'))
        else:
            self.telecom = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.name:
            self.__json['name'] = self.name
        if self.telecom:
            self.__json['telecom'] = self.__get_list(self.telecom)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR DataElementContactComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class DataElementMappingComponent(BackboneElement):
    '''
    FHIR DataElementMappingComponent resource

     Identifies a specification (other than a terminology) that the elements which make up the DataElement have some correspondence with.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR DataElementMappingComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(DataElementMappingComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR DataElementMappingComponent constructor
        '''
        logging.info("FHIR DataElementMappingComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.identity = self.__add('identity')
        self.uri = self.__add('uri')
        self.name = self.__add('name')
        self.comment = self.__add('comment')



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identity:
            self.__json['identity'] = self.identity
        if self.uri:
            self.__json['uri'] = self.uri
        if self.name:
            self.__json['name'] = self.name
        if self.comment:
            self.__json['comment'] = self.comment


        return self.__json
        
    def __repr__(self):
        '''
        FHIR DataElementMappingComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class DataElement(DomainResource):
    '''
    FHIR DataElement resource

     The formal description of a single piece of information that can be gathered and reported. If the element is present, it must have either a @value, an @id, or extensions

    url ->  An absolute URL that is used to identify this data element when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this data element is (or will be) published.
    identifier ->  Formal identifier that is used to identify this data element when it is represented in other formats, or referenced in a specification, model, design or an instance.
    version ->  The identifier that is used to identify this version of the data element when it is referenced in a StructureDefinition, Questionnaire or instance. This is an arbitrary value managed by the definition author manually.
    status ->  The status of the data element. 
    experimental ->  A flag to indicate that this search data element definition is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
    publisher ->  The name of the individual or organization that published the data element.
    date ->  The date this version of the data element was published. The date must change when the business version changes, if it does, and it must change if the status code changes. In addition, it should change when the substantive content of the data element  changes.
    name ->  The term used by humans to refer to the data element.  Should ideally be unique within the context in which the data element is expected to be used.
    contact ->  Contacts to assist a user in finding and communicating with the publisher.
    useContext ->  The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching of data element definitions.
    copyright ->  A copyright statement relating to the definition of the data element. Copyright statements are generally legal restrictions on the use and publishing of the details of the definition of the data element.
    stringency ->  Identifies how precise the data element is in its definition. 
    mapping ->  Identifies a specification (other than a terminology) that the elements which make up the DataElement have some correspondence with.
    element ->  Defines the structure, type, allowed values and other constraining characteristics of the data element.

    # Search parameters
        DataElement.search.code
        DataElement.search.context
        DataElement.search.date
        DataElement.search.description
        DataElement.search.identifier
        DataElement.search.name
        DataElement.search.publisher
        DataElement.search.status
        DataElement.search.stringency
        DataElement.search.url
        DataElement.search.version
    '''
    # search parameters
    par = [("code", "token"),
           ("context", "token"),
           ("date", "date"),
           ("description", "string"),
           ("identifier", "token"),
           ("name", "string"),
           ("publisher", "string"),
           ("status", "token"),
           ("stringency", "token"),
           ("url", "uri"),
           ("version", "string")]

    search = Params(par, "DataElement")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'identifier':
                    list_to_add.append(Identifier(obj))
                elif key == 'contact':
                    list_to_add.append(DataElementContactComponent(obj))
                elif key == 'useContext':
                    list_to_add.append(CodeableConcept(obj))
                elif key == 'mapping':
                    list_to_add.append(DataElementMappingComponent(obj))
                elif key == 'element':
                    list_to_add.append(ElementDefinition(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR DataElement __new__
        '''
        if json == None:
            return None
        else:
            return super(DataElement, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR DataElement constructor
        '''
        logging.info("FHIR DataElement: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "DataElement"
        self.url = self.__add('url')
        if 'identifier' in self.__json:
            if isinstance(self.__json['identifier'], list):
                self.identifier = self.__add_list('identifier')
            else:
                self.identifier = Identifier(self.__add('identifier'))
        else:
            self.identifier = None
        self.version = self.__add('version')
        self.status = self.__add('status')
        self.experimental = Boolean(self.__add('experimental'))
        self.publisher = self.__add('publisher')
        self.date = DateTime(self.__add('date'))
        self.name = self.__add('name')
        if 'contact' in self.__json:
            if isinstance(self.__json['contact'], list):
                self.contact = self.__add_list('contact')
            else:
                self.contact = DataElementContactComponent(self.__add('contact'))
        else:
            self.contact = None
        if 'useContext' in self.__json:
            if isinstance(self.__json['useContext'], list):
                self.useContext = self.__add_list('useContext')
            else:
                self.useContext = CodeableConcept(self.__add('useContext'))
        else:
            self.useContext = None
        self.copyright = self.__add('copyright')
        self.stringency = self.__add('stringency')
        if 'mapping' in self.__json:
            if isinstance(self.__json['mapping'], list):
                self.mapping = self.__add_list('mapping')
            else:
                self.mapping = DataElementMappingComponent(self.__add('mapping'))
        else:
            self.mapping = None
        if 'element' in self.__json:
            if isinstance(self.__json['element'], list):
                self.element = self.__add_list('element')
            else:
                self.element = ElementDefinition(self.__add('element'))
        else:
            self.element = None


        # Parent Resource Init
        super(DataElement, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.url:
            self.__json['url'] = self.url
        if self.identifier:
            self.__json['identifier'] = self.__get_list(self.identifier)
        if self.version:
            self.__json['version'] = self.version
        if self.status:
            self.__json['status'] = self.status
        if self.experimental:
            self.__json['experimental'] = self.experimental.json
        if self.publisher:
            self.__json['publisher'] = self.publisher
        if self.date:
            self.__json['date'] = self.date.json
        if self.name:
            self.__json['name'] = self.name
        if self.contact:
            self.__json['contact'] = self.__get_list(self.contact)
        if self.useContext:
            self.__json['useContext'] = self.__get_list(self.useContext)
        if self.copyright:
            self.__json['copyright'] = self.copyright
        if self.stringency:
            self.__json['stringency'] = self.stringency
        if self.mapping:
            self.__json['mapping'] = self.__get_list(self.mapping)
        if self.element:
            self.__json['element'] = self.__get_list(self.element)

        # Add json attributes
        self.__json = super(DataElement, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR DataElement string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class DecisionSupportRule(DomainResource):
    '''
    FHIR DecisionSupportRule resource

     This resource defines a decision support rule of the form [on Event] if Condition then Action. It is intended to be a shareable, computable definition of a actions that should be taken whenever some condition is met in response to a particular event or events. If the element is present, it must have either a @value, an @id, or extensions

    moduleMetadata ->  The metadata for the decision support rule, including publishing, life-cycle, version, documentation, and supporting evidence.
    library ->  A reference to a Library containing the formal logic used by the rule.
    trigger ->  The trigger element defines when the rule should be invoked. This information is used by consumers of the rule to determine how to integrate the rule into a specific workflow.
    condition ->  The condition element describes he "if" portion of the rule that determines whether or not the rule "fires". The condition must be the name of an expression in a referenced library.
    action ->  The action element defines the "when" portion of the rule that determines what actions should be performed if the condition evaluates to true.

    
    '''
    

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'library':
                    list_to_add.append(Reference(obj))
                elif key == 'trigger':
                    list_to_add.append(TriggerDefinition(obj))
                elif key == 'action':
                    list_to_add.append(ActionDefinition(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR DecisionSupportRule __new__
        '''
        if json == None:
            return None
        else:
            return super(DecisionSupportRule, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR DecisionSupportRule constructor
        '''
        logging.info("FHIR DecisionSupportRule: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "DecisionSupportRule"
        self.moduleMetadata = ModuleMetadata(self.__add('moduleMetadata'))
        if 'library' in self.__json:
            if isinstance(self.__json['library'], list):
                self.library = self.__add_list('library')
            else:
                self.library = Reference(self.__add('library'))
        else:
            self.library = None
        if 'trigger' in self.__json:
            if isinstance(self.__json['trigger'], list):
                self.trigger = self.__add_list('trigger')
            else:
                self.trigger = TriggerDefinition(self.__add('trigger'))
        else:
            self.trigger = None
        self.condition = self.__add('condition')
        if 'action' in self.__json:
            if isinstance(self.__json['action'], list):
                self.action = self.__add_list('action')
            else:
                self.action = ActionDefinition(self.__add('action'))
        else:
            self.action = None


        # Parent Resource Init
        super(DecisionSupportRule, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.moduleMetadata:
            self.__json['moduleMetadata'] = self.moduleMetadata.json
        if self.library:
            self.__json['library'] = self.__get_list(self.library)
        if self.trigger:
            self.__json['trigger'] = self.__get_list(self.trigger)
        if self.condition:
            self.__json['condition'] = self.condition
        if self.action:
            self.__json['action'] = self.__get_list(self.action)

        # Add json attributes
        self.__json = super(DecisionSupportRule, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR DecisionSupportRule string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class DecisionSupportServiceModule(DomainResource):
    '''
    FHIR DecisionSupportServiceModule resource

     The DecisionSupportServiceModule describes a unit of decision support functionality that is made available as a service, such as immunization modules or drug-drug interaction checking. If the element is present, it must have either a @value, an @id, or extensions

    moduleMetadata ->  The metadata for the decision support service module, including publishing, life-cycle, version, documentation, and supporting evidence.
    trigger ->  The trigger element defines when the rule should be invoked. This information is used by consumers of the rule to determine how to integrate the rule into a specific workflow.
    parameter ->  The parameters to the module. This collection specifies both the input and output parameters. Input parameters are provided by the caller as part of the $evaluate operation. Output parameters are included in the GuidanceResponse.
    dataRequirement ->  Data requirements are a machine processable description of the data required by the module in order to perform a successful evaluation.

    
    '''
    

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'trigger':
                    list_to_add.append(TriggerDefinition(obj))
                elif key == 'parameter':
                    list_to_add.append(ParameterDefinition(obj))
                elif key == 'dataRequirement':
                    list_to_add.append(DataRequirement(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR DecisionSupportServiceModule __new__
        '''
        if json == None:
            return None
        else:
            return super(DecisionSupportServiceModule, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR DecisionSupportServiceModule constructor
        '''
        logging.info("FHIR DecisionSupportServiceModule: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "DecisionSupportServiceModule"
        self.moduleMetadata = ModuleMetadata(self.__add('moduleMetadata'))
        if 'trigger' in self.__json:
            if isinstance(self.__json['trigger'], list):
                self.trigger = self.__add_list('trigger')
            else:
                self.trigger = TriggerDefinition(self.__add('trigger'))
        else:
            self.trigger = None
        if 'parameter' in self.__json:
            if isinstance(self.__json['parameter'], list):
                self.parameter = self.__add_list('parameter')
            else:
                self.parameter = ParameterDefinition(self.__add('parameter'))
        else:
            self.parameter = None
        if 'dataRequirement' in self.__json:
            if isinstance(self.__json['dataRequirement'], list):
                self.dataRequirement = self.__add_list('dataRequirement')
            else:
                self.dataRequirement = DataRequirement(self.__add('dataRequirement'))
        else:
            self.dataRequirement = None


        # Parent Resource Init
        super(DecisionSupportServiceModule, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.moduleMetadata:
            self.__json['moduleMetadata'] = self.moduleMetadata.json
        if self.trigger:
            self.__json['trigger'] = self.__get_list(self.trigger)
        if self.parameter:
            self.__json['parameter'] = self.__get_list(self.parameter)
        if self.dataRequirement:
            self.__json['dataRequirement'] = self.__get_list(self.dataRequirement)

        # Add json attributes
        self.__json = super(DecisionSupportServiceModule, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR DecisionSupportServiceModule string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class DetectedIssueMitigationComponent(BackboneElement):
    '''
    FHIR DetectedIssueMitigationComponent resource

     Indicates an action that has been taken or is committed to to reduce or eliminate the likelihood of the risk identified by the detected issue from manifesting.  Can also reflect an observation of known mitigating factors that may reduce/eliminate the need for any action.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR DetectedIssueMitigationComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(DetectedIssueMitigationComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR DetectedIssueMitigationComponent constructor
        '''
        logging.info("FHIR DetectedIssueMitigationComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.action = CodeableConcept(self.__add('action'))
        self.date = DateTime(self.__add('date'))
        self.author = Reference(self.__add('author'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.action:
            self.__json['action'] = self.action.json
        if self.date:
            self.__json['date'] = self.date.json
        if self.author:
            self.__json['author'] = self.author.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR DetectedIssueMitigationComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class DetectedIssue(DomainResource):
    '''
    FHIR DetectedIssue resource

     Indicates an actual or potential clinical issue with or between one or more active or proposed clinical actions for a patient; e.g. Drug-drug interaction, Ineffective treatment frequency, Procedure-condition conflict, etc. If the element is present, it must have either a @value, an @id, or extensions

    patient ->  Indicates the patient whose record the detected issue is associated with.
    category ->  Identifies the general type of issue identified.
    severity ->  Indicates the degree of importance associated with the identified issue based on the potential impact on the patient. 
    implicated ->  Indicates the resource representing the current activity or proposed activity that is potentially problematic.
    detail ->  A textual explanation of the detected issue.
    date ->  The date or date-time when the detected issue was initially identified.
    author ->  Individual or device responsible for the issue being raised.  For example, a decision support application or a pharmacist conducting a medication review.
    identifier ->  Business identifier associated with the detected issue record.
    reference ->  The literature, knowledge-base or similar reference that describes the propensity for the detected issue identified.
    mitigation ->  Indicates an action that has been taken or is committed to to reduce or eliminate the likelihood of the risk identified by the detected issue from manifesting.  Can also reflect an observation of known mitigating factors that may reduce/eliminate the need for any action.

    # Search parameters
        DetectedIssue.search.author
        DetectedIssue.search.category
        DetectedIssue.search.date
        DetectedIssue.search.identifier
        DetectedIssue.search.implicated
        DetectedIssue.search.patient
    '''
    # search parameters
    par = [("author", "reference"),
           ("category", "token"),
           ("date", "date"),
           ("identifier", "token"),
           ("implicated", "reference"),
           ("patient", "reference")]

    search = Params(par, "DetectedIssue")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'implicated':
                    list_to_add.append(Reference(obj))
                elif key == 'mitigation':
                    list_to_add.append(DetectedIssueMitigationComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR DetectedIssue __new__
        '''
        if json == None:
            return None
        else:
            return super(DetectedIssue, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR DetectedIssue constructor
        '''
        logging.info("FHIR DetectedIssue: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "DetectedIssue"
        self.patient = Reference(self.__add('patient'))
        self.category = CodeableConcept(self.__add('category'))
        self.severity = self.__add('severity')
        if 'implicated' in self.__json:
            if isinstance(self.__json['implicated'], list):
                self.implicated = self.__add_list('implicated')
            else:
                self.implicated = Reference(self.__add('implicated'))
        else:
            self.implicated = None
        self.detail = self.__add('detail')
        self.date = DateTime(self.__add('date'))
        self.author = Reference(self.__add('author'))
        self.identifier = Identifier(self.__add('identifier'))
        self.reference = self.__add('reference')
        if 'mitigation' in self.__json:
            if isinstance(self.__json['mitigation'], list):
                self.mitigation = self.__add_list('mitigation')
            else:
                self.mitigation = DetectedIssueMitigationComponent(self.__add('mitigation'))
        else:
            self.mitigation = None


        # Parent Resource Init
        super(DetectedIssue, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.patient:
            self.__json['patient'] = self.patient.json
        if self.category:
            self.__json['category'] = self.category.json
        if self.severity:
            self.__json['severity'] = self.severity
        if self.implicated:
            self.__json['implicated'] = self.__get_list(self.implicated)
        if self.detail:
            self.__json['detail'] = self.detail
        if self.date:
            self.__json['date'] = self.date.json
        if self.author:
            self.__json['author'] = self.author.json
        if self.identifier:
            self.__json['identifier'] = self.identifier.json
        if self.reference:
            self.__json['reference'] = self.reference
        if self.mitigation:
            self.__json['mitigation'] = self.__get_list(self.mitigation)

        # Add json attributes
        self.__json = super(DetectedIssue, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR DetectedIssue string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class Device(DomainResource):
    '''
    FHIR Device resource

     This resource identifies an instance or a type of a manufactured item that is used in the provision of healthcare without being substantially changed through that activity. The device may be a medical or non-medical device.  Medical devices includes durable (reusable) medical equipment, implantable devices, as well as disposable equipment used for diagnostic, treatment, and research for healthcare and public health.  Non-medical devices may include items such as a machine, cellphone, computer, application, etc. If the element is present, it must have either a @value, an @id, or extensions

    identifier ->  Unique instance identifiers assigned to a device by manufacturers other organizations or owners.
    udiCarrier ->  [Unique device identifier (UDI)](device.html#5.11.3.2.2) barcode or rfid string assigned to device label or package.
    status ->  Status of the Device availability. 
    type ->  Code or identifier to identify a kind of device.
    lotNumber ->  Lot number assigned by the manufacturer.
    manufacturer ->  A name of the manufacturer.
    manufactureDate ->  The date and time when the device was manufactured.
    expirationDate ->  The date and time beyond which this device is no longer valid or should not be used (if applicable).
    model ->  The "model" is an identifier assigned by the manufacturer to identify the product by its type. This number is shared by the all devices sold as the same type.
    version ->  The version of the device, if the device has multiple releases under the same model, or if the device is software or carries firmware.
    patient ->  Patient information, If the device is affixed to a person.
    owner ->  An organization that is responsible for the provision and ongoing maintenance of the device.
    contact ->  Contact details for an organization or a particular human that is responsible for the device.
    location ->  The place where the device can be found.
    url ->  A network address on which the device may be contacted directly.
    note ->  Descriptive information, usage information or implantation information that is not captured in an existing element.

    # Search parameters
        Device.search.identifier
        Device.search.location
        Device.search.manufacturer
        Device.search.model
        Device.search.organization
        Device.search.patient
        Device.search.type
        Device.search.udi
        Device.search.url
    '''
    # search parameters
    par = [("identifier", "token"),
           ("location", "reference"),
           ("manufacturer", "string"),
           ("model", "string"),
           ("organization", "reference"),
           ("patient", "reference"),
           ("type", "token"),
           ("udi", "string"),
           ("url", "uri")]

    search = Params(par, "Device")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'identifier':
                    list_to_add.append(Identifier(obj))
                elif key == 'contact':
                    list_to_add.append(ContactPoint(obj))
                elif key == 'note':
                    list_to_add.append(Annotation(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR Device __new__
        '''
        if json == None:
            return None
        else:
            return super(Device, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR Device constructor
        '''
        logging.info("FHIR Device: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "Device"
        if 'identifier' in self.__json:
            if isinstance(self.__json['identifier'], list):
                self.identifier = self.__add_list('identifier')
            else:
                self.identifier = Identifier(self.__add('identifier'))
        else:
            self.identifier = None
        self.udiCarrier = Identifier(self.__add('udiCarrier'))
        self.status = self.__add('status')
        self.type = CodeableConcept(self.__add('type'))
        self.lotNumber = self.__add('lotNumber')
        self.manufacturer = self.__add('manufacturer')
        self.manufactureDate = DateTime(self.__add('manufactureDate'))
        self.expirationDate = DateTime(self.__add('expirationDate'))
        self.model = self.__add('model')
        self.version = self.__add('version')
        self.patient = Reference(self.__add('patient'))
        self.owner = Reference(self.__add('owner'))
        if 'contact' in self.__json:
            if isinstance(self.__json['contact'], list):
                self.contact = self.__add_list('contact')
            else:
                self.contact = ContactPoint(self.__add('contact'))
        else:
            self.contact = None
        self.location = Reference(self.__add('location'))
        self.url = self.__add('url')
        if 'note' in self.__json:
            if isinstance(self.__json['note'], list):
                self.note = self.__add_list('note')
            else:
                self.note = Annotation(self.__add('note'))
        else:
            self.note = None


        # Parent Resource Init
        super(Device, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identifier:
            self.__json['identifier'] = self.__get_list(self.identifier)
        if self.udiCarrier:
            self.__json['udiCarrier'] = self.udiCarrier.json
        if self.status:
            self.__json['status'] = self.status
        if self.type:
            self.__json['type'] = self.type.json
        if self.lotNumber:
            self.__json['lotNumber'] = self.lotNumber
        if self.manufacturer:
            self.__json['manufacturer'] = self.manufacturer
        if self.manufactureDate:
            self.__json['manufactureDate'] = self.manufactureDate.json
        if self.expirationDate:
            self.__json['expirationDate'] = self.expirationDate.json
        if self.model:
            self.__json['model'] = self.model
        if self.version:
            self.__json['version'] = self.version
        if self.patient:
            self.__json['patient'] = self.patient.json
        if self.owner:
            self.__json['owner'] = self.owner.json
        if self.contact:
            self.__json['contact'] = self.__get_list(self.contact)
        if self.location:
            self.__json['location'] = self.location.json
        if self.url:
            self.__json['url'] = self.url
        if self.note:
            self.__json['note'] = self.__get_list(self.note)

        # Add json attributes
        self.__json = super(Device, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR Device string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class DeviceComponentProductionSpecificationComponent(BackboneElement):
    '''
    FHIR DeviceComponentProductionSpecificationComponent resource

     Describes the production specification such as component revision, serial number, etc.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR DeviceComponentProductionSpecificationComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(DeviceComponentProductionSpecificationComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR DeviceComponentProductionSpecificationComponent constructor
        '''
        logging.info("FHIR DeviceComponentProductionSpecificationComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.specType = CodeableConcept(self.__add('specType'))
        self.componentId = Identifier(self.__add('componentId'))
        self.productionSpec = self.__add('productionSpec')



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.specType:
            self.__json['specType'] = self.specType.json
        if self.componentId:
            self.__json['componentId'] = self.componentId.json
        if self.productionSpec:
            self.__json['productionSpec'] = self.productionSpec


        return self.__json
        
    def __repr__(self):
        '''
        FHIR DeviceComponentProductionSpecificationComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class DeviceComponent(DomainResource):
    '''
    FHIR DeviceComponent resource

     Describes the characteristics, operational status and capabilities of a medical-related component of a medical device. If the element is present, it must have either a @value, an @id, or extensions

    type ->  Describes the specific component type as defined in the object-oriented or metric nomenclature partition.
    identifier ->  Describes the local assigned unique identification by the software. For example: handle ID.
    lastSystemChange ->  Describes the timestamp for the most recent system change which includes device configuration or setting change.
    source ->  Describes the link to the source Device that contains administrative device information such as manufacture, serial number, etc.
    parent ->  Describes the link to the parent resource. For example: Channel is linked to its VMD parent.
    operationalStatus ->  Indicates current operational status of the device. For example: On, Off, Standby, etc.
    parameterGroup ->  Describes the parameter group supported by the current device component that is based on some nomenclature, e.g. cardiovascular.
    measurementPrinciple ->  Describes the physical principle of the measurement. For example: thermal, chemical, acoustical, etc. 
    productionSpecification ->  Describes the production specification such as component revision, serial number, etc.
    languageCode ->  Describes the language code for the human-readable text string produced by the device. This language code will follow the IETF language tag. Example: en-US.

    # Search parameters
        DeviceComponent.search.parent
        DeviceComponent.search.source
        DeviceComponent.search.type
    '''
    # search parameters
    par = [("parent", "reference"),
           ("source", "reference"),
           ("type", "token")]

    search = Params(par, "DeviceComponent")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'operationalStatus':
                    list_to_add.append(CodeableConcept(obj))
                elif key == 'productionSpecification':
                    list_to_add.append(DeviceComponentProductionSpecificationComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR DeviceComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(DeviceComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR DeviceComponent constructor
        '''
        logging.info("FHIR DeviceComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "DeviceComponent"
        self.type = CodeableConcept(self.__add('type'))
        self.identifier = Identifier(self.__add('identifier'))
        self.lastSystemChange = self.__add('lastSystemChange')
        self.source = Reference(self.__add('source'))
        self.parent = Reference(self.__add('parent'))
        if 'operationalStatus' in self.__json:
            if isinstance(self.__json['operationalStatus'], list):
                self.operationalStatus = self.__add_list('operationalStatus')
            else:
                self.operationalStatus = CodeableConcept(self.__add('operationalStatus'))
        else:
            self.operationalStatus = None
        self.parameterGroup = CodeableConcept(self.__add('parameterGroup'))
        self.measurementPrinciple = self.__add('measurementPrinciple')
        if 'productionSpecification' in self.__json:
            if isinstance(self.__json['productionSpecification'], list):
                self.productionSpecification = self.__add_list('productionSpecification')
            else:
                self.productionSpecification = DeviceComponentProductionSpecificationComponent(self.__add('productionSpecification'))
        else:
            self.productionSpecification = None
        self.languageCode = CodeableConcept(self.__add('languageCode'))


        # Parent Resource Init
        super(DeviceComponent, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.type:
            self.__json['type'] = self.type.json
        if self.identifier:
            self.__json['identifier'] = self.identifier.json
        if self.lastSystemChange:
            self.__json['lastSystemChange'] = self.lastSystemChange
        if self.source:
            self.__json['source'] = self.source.json
        if self.parent:
            self.__json['parent'] = self.parent.json
        if self.operationalStatus:
            self.__json['operationalStatus'] = self.__get_list(self.operationalStatus)
        if self.parameterGroup:
            self.__json['parameterGroup'] = self.parameterGroup.json
        if self.measurementPrinciple:
            self.__json['measurementPrinciple'] = self.measurementPrinciple
        if self.productionSpecification:
            self.__json['productionSpecification'] = self.__get_list(self.productionSpecification)
        if self.languageCode:
            self.__json['languageCode'] = self.languageCode.json

        # Add json attributes
        self.__json = super(DeviceComponent, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR DeviceComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class DeviceMetricCalibrationComponent(BackboneElement):
    '''
    FHIR DeviceMetricCalibrationComponent resource

     Describes the calibrations that have been performed or that are required to be performed.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR DeviceMetricCalibrationComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(DeviceMetricCalibrationComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR DeviceMetricCalibrationComponent constructor
        '''
        logging.info("FHIR DeviceMetricCalibrationComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.type = self.__add('type')
        self.state = self.__add('state')
        self.time = self.__add('time')



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.type:
            self.__json['type'] = self.type
        if self.state:
            self.__json['state'] = self.state
        if self.time:
            self.__json['time'] = self.time


        return self.__json
        
    def __repr__(self):
        '''
        FHIR DeviceMetricCalibrationComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class DeviceMetric(DomainResource):
    '''
    FHIR DeviceMetric resource

     Describes a measurement, calculation or setting capability of a medical device. If the element is present, it must have either a @value, an @id, or extensions

    type ->  Describes the type of the metric. For example: Heart Rate, PEEP Setting, etc.
    identifier ->  Describes the unique identification of this metric that has been assigned by the device or gateway software. For example: handle ID.  It should be noted that in order to make the identifier unique, the system element of the identifier should be set to the unique identifier of the device.
    unit ->  Describes the unit that an observed value determined for this metric will have. For example: Percent, Seconds, etc.
    source ->  Describes the link to the  Device that this DeviceMetric belongs to and that contains administrative device information such as manufacture, serial number, etc.
    parent ->  Describes the link to the  DeviceComponent that this DeviceMetric belongs to and that provide information about the location of this DeviceMetric in the containment structure of the parent Device. An example would be a DeviceComponent that represents a Channel. This reference can be used by a client application to distinguish DeviceMetrics that have the same type, but should be interpreted based on their containment location.
    operationalStatus ->  Indicates current operational state of the device. For example: On, Off, Standby, etc. 
    color ->  Describes the color representation for the metric. This is often used to aid clinicians to track and identify parameter types by color. In practice, consider a Patient Monitor that has ECG/HR and Pleth for example; the parameters are displayed in different characteristic colors, such as HR-blue, BP-green, and PR and SpO2- magenta. 
    category ->  Indicates the category of the observation generation process. A DeviceMetric can be for example a setting, measurement, or calculation. 
    measurementPeriod ->  Describes the measurement repetition time. This is not necessarily the same as the update period. The measurement repetition time can range from milliseconds up to hours. An example for a measurement repetition time in the range of milliseconds is the sampling rate of an ECG. An example for a measurement repetition time in the range of hours is a NIBP that is triggered automatically every hour. The update period may be different than the measurement repetition time, if the device does not update the published observed value with the same frequency as it was measured.
    calibration ->  Describes the calibrations that have been performed or that are required to be performed.

    # Search parameters
        DeviceMetric.search.category
        DeviceMetric.search.identifier
        DeviceMetric.search.parent
        DeviceMetric.search.source
        DeviceMetric.search.type
    '''
    # search parameters
    par = [("category", "token"),
           ("identifier", "token"),
           ("parent", "reference"),
           ("source", "reference"),
           ("type", "token")]

    search = Params(par, "DeviceMetric")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'calibration':
                    list_to_add.append(DeviceMetricCalibrationComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR DeviceMetric __new__
        '''
        if json == None:
            return None
        else:
            return super(DeviceMetric, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR DeviceMetric constructor
        '''
        logging.info("FHIR DeviceMetric: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "DeviceMetric"
        self.type = CodeableConcept(self.__add('type'))
        self.identifier = Identifier(self.__add('identifier'))
        self.unit = CodeableConcept(self.__add('unit'))
        self.source = Reference(self.__add('source'))
        self.parent = Reference(self.__add('parent'))
        self.operationalStatus = self.__add('operationalStatus')
        self.color = self.__add('color')
        self.category = self.__add('category')
        self.measurementPeriod = Timing(self.__add('measurementPeriod'))
        if 'calibration' in self.__json:
            if isinstance(self.__json['calibration'], list):
                self.calibration = self.__add_list('calibration')
            else:
                self.calibration = DeviceMetricCalibrationComponent(self.__add('calibration'))
        else:
            self.calibration = None


        # Parent Resource Init
        super(DeviceMetric, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.type:
            self.__json['type'] = self.type.json
        if self.identifier:
            self.__json['identifier'] = self.identifier.json
        if self.unit:
            self.__json['unit'] = self.unit.json
        if self.source:
            self.__json['source'] = self.source.json
        if self.parent:
            self.__json['parent'] = self.parent.json
        if self.operationalStatus:
            self.__json['operationalStatus'] = self.operationalStatus
        if self.color:
            self.__json['color'] = self.color
        if self.category:
            self.__json['category'] = self.category
        if self.measurementPeriod:
            self.__json['measurementPeriod'] = self.measurementPeriod.json
        if self.calibration:
            self.__json['calibration'] = self.__get_list(self.calibration)

        # Add json attributes
        self.__json = super(DeviceMetric, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR DeviceMetric string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class DeviceUseRequest(DomainResource):
    '''
    FHIR DeviceUseRequest resource

     Represents a request for a patient to employ a medical device. The device may be an implantable device, or an external assistive device, such as a walker. If the element is present, it must have either a @value, an @id, or extensions

    status ->  The status of the request. 
    device ->  The details of the device  to be used.
    encounter ->  An encounter that provides additional context in which this request is made.
    identifier ->  Identifiers assigned to this order by the orderer or by the receiver.
    indication ->  Reason or justification for the use of this device.
    notes ->  Details about this request that were not represented at all or sufficiently in one of the attributes provided in a class. These may include for example a comment, an instruction, or a note associated with the statement.
    prnReason ->  The proposed act must be performed if the indicated conditions occur, e.g.., shortness of breath, SpO2 less than x%.
    orderedOn ->  The time when the request was made.
    recordedOn ->  The time at which the request was made/recorded.
    subject ->  The patient who will use the device.
    priority ->  Characterizes how quickly the  use of device must be initiated. Includes concepts such as stat, urgent, routine. 
    bodySiteCodeableConcept ->  Indicates the site on the subject's body where the device should be used ( i.e. the target site).
    bodySiteReference ->  Indicates the site on the subject's body where the device should be used ( i.e. the target site).
    timingTiming ->  The timing schedule for the use of the device The Schedule data type allows many different expressions, for example. "Every 8 hours"; "Three times a day"; "1/2 an hour before breakfast for 10 days from 23-Dec 2011:"; "15 Oct 2013, 17 Oct 2013 and 1 Nov 2013".
    timingPeriod ->  The timing schedule for the use of the device The Schedule data type allows many different expressions, for example. "Every 8 hours"; "Three times a day"; "1/2 an hour before breakfast for 10 days from 23-Dec 2011:"; "15 Oct 2013, 17 Oct 2013 and 1 Nov 2013".
    timingDateTime ->  The timing schedule for the use of the device The Schedule data type allows many different expressions, for example. "Every 8 hours"; "Three times a day"; "1/2 an hour before breakfast for 10 days from 23-Dec 2011:"; "15 Oct 2013, 17 Oct 2013 and 1 Nov 2013".

    # Search parameters
        DeviceUseRequest.search.device
        DeviceUseRequest.search.patient
        DeviceUseRequest.search.subject
    '''
    # search parameters
    par = [("device", "reference"),
           ("patient", "reference"),
           ("subject", "reference")]

    search = Params(par, "DeviceUseRequest")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'identifier':
                    list_to_add.append(Identifier(obj))
                elif key == 'indication':
                    list_to_add.append(CodeableConcept(obj))
                elif key == 'prnReason':
                    list_to_add.append(CodeableConcept(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR DeviceUseRequest __new__
        '''
        if json == None:
            return None
        else:
            return super(DeviceUseRequest, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR DeviceUseRequest constructor
        '''
        logging.info("FHIR DeviceUseRequest: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "DeviceUseRequest"
        self.status = self.__add('status')
        self.device = Reference(self.__add('device'))
        self.encounter = Reference(self.__add('encounter'))
        if 'identifier' in self.__json:
            if isinstance(self.__json['identifier'], list):
                self.identifier = self.__add_list('identifier')
            else:
                self.identifier = Identifier(self.__add('identifier'))
        else:
            self.identifier = None
        if 'indication' in self.__json:
            if isinstance(self.__json['indication'], list):
                self.indication = self.__add_list('indication')
            else:
                self.indication = CodeableConcept(self.__add('indication'))
        else:
            self.indication = None
        if 'notes' in self.__json:
            if isinstance(self.__json['notes'], list):
                self.notes = self.__add_list('notes')
            else:
                self.notes = self.__add('notes')
        else:
            self.notes = None
        if 'prnReason' in self.__json:
            if isinstance(self.__json['prnReason'], list):
                self.prnReason = self.__add_list('prnReason')
            else:
                self.prnReason = CodeableConcept(self.__add('prnReason'))
        else:
            self.prnReason = None
        self.orderedOn = DateTime(self.__add('orderedOn'))
        self.recordedOn = DateTime(self.__add('recordedOn'))
        self.subject = Reference(self.__add('subject'))
        self.priority = self.__add('priority')
        self.bodySiteCodeableConcept = CodeableConcept(self.__add('bodySiteCodeableConcept'))
        self.bodySiteReference = Reference(self.__add('bodySiteReference'))
        self.timingTiming = Timing(self.__add('timingTiming'))
        self.timingPeriod = Period(self.__add('timingPeriod'))
        self.timingDateTime = DateTime(self.__add('timingDateTime'))


        # Parent Resource Init
        super(DeviceUseRequest, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.status:
            self.__json['status'] = self.status
        if self.device:
            self.__json['device'] = self.device.json
        if self.encounter:
            self.__json['encounter'] = self.encounter.json
        if self.identifier:
            self.__json['identifier'] = self.__get_list(self.identifier)
        if self.indication:
            self.__json['indication'] = self.__get_list(self.indication)
        if self.notes:
            self.__json['notes'] = self.__get_list(self.notes)
        if self.prnReason:
            self.__json['prnReason'] = self.__get_list(self.prnReason)
        if self.orderedOn:
            self.__json['orderedOn'] = self.orderedOn.json
        if self.recordedOn:
            self.__json['recordedOn'] = self.recordedOn.json
        if self.subject:
            self.__json['subject'] = self.subject.json
        if self.priority:
            self.__json['priority'] = self.priority
        if self.bodySiteCodeableConcept:
            self.__json['bodySiteCodeableConcept'] = self.bodySiteCodeableConcept.json
        if self.bodySiteReference:
            self.__json['bodySiteReference'] = self.bodySiteReference.json
        if self.timingTiming:
            self.__json['timingTiming'] = self.timingTiming.json
        if self.timingPeriod:
            self.__json['timingPeriod'] = self.timingPeriod.json
        if self.timingDateTime:
            self.__json['timingDateTime'] = self.timingDateTime.json

        # Add json attributes
        self.__json = super(DeviceUseRequest, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR DeviceUseRequest string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class DeviceUseStatement(DomainResource):
    '''
    FHIR DeviceUseStatement resource

     A record of a device being used by a patient where the record is the result of a report from the patient or another clinician. If the element is present, it must have either a @value, an @id, or extensions

    whenUsed ->  The time period over which the device was used.
    device ->  The details of the device used.
    identifier ->  An external identifier for this statement such as an IRI.
    indication ->  Reason or justification for the use of the device.
    notes ->  Details about the device statement that were not represented at all or sufficiently in one of the attributes provided in a class. These may include for example a comment, an instruction, or a note associated with the statement.
    recordedOn ->  The time at which the statement was made/recorded.
    subject ->  The patient who used the device.
    bodySiteCodeableConcept ->  Indicates the site on the subject's body where the device was used ( i.e. the target site).
    bodySiteReference ->  Indicates the site on the subject's body where the device was used ( i.e. the target site).
    timingTiming ->  How often the device was used.
    timingPeriod ->  How often the device was used.
    timingDateTime ->  How often the device was used.

    # Search parameters
        DeviceUseStatement.search.device
        DeviceUseStatement.search.patient
        DeviceUseStatement.search.subject
    '''
    # search parameters
    par = [("device", "reference"),
           ("patient", "reference"),
           ("subject", "reference")]

    search = Params(par, "DeviceUseStatement")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'identifier':
                    list_to_add.append(Identifier(obj))
                elif key == 'indication':
                    list_to_add.append(CodeableConcept(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR DeviceUseStatement __new__
        '''
        if json == None:
            return None
        else:
            return super(DeviceUseStatement, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR DeviceUseStatement constructor
        '''
        logging.info("FHIR DeviceUseStatement: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "DeviceUseStatement"
        self.whenUsed = Period(self.__add('whenUsed'))
        self.device = Reference(self.__add('device'))
        if 'identifier' in self.__json:
            if isinstance(self.__json['identifier'], list):
                self.identifier = self.__add_list('identifier')
            else:
                self.identifier = Identifier(self.__add('identifier'))
        else:
            self.identifier = None
        if 'indication' in self.__json:
            if isinstance(self.__json['indication'], list):
                self.indication = self.__add_list('indication')
            else:
                self.indication = CodeableConcept(self.__add('indication'))
        else:
            self.indication = None
        if 'notes' in self.__json:
            if isinstance(self.__json['notes'], list):
                self.notes = self.__add_list('notes')
            else:
                self.notes = self.__add('notes')
        else:
            self.notes = None
        self.recordedOn = DateTime(self.__add('recordedOn'))
        self.subject = Reference(self.__add('subject'))
        self.bodySiteCodeableConcept = CodeableConcept(self.__add('bodySiteCodeableConcept'))
        self.bodySiteReference = Reference(self.__add('bodySiteReference'))
        self.timingTiming = Timing(self.__add('timingTiming'))
        self.timingPeriod = Period(self.__add('timingPeriod'))
        self.timingDateTime = DateTime(self.__add('timingDateTime'))


        # Parent Resource Init
        super(DeviceUseStatement, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.whenUsed:
            self.__json['whenUsed'] = self.whenUsed.json
        if self.device:
            self.__json['device'] = self.device.json
        if self.identifier:
            self.__json['identifier'] = self.__get_list(self.identifier)
        if self.indication:
            self.__json['indication'] = self.__get_list(self.indication)
        if self.notes:
            self.__json['notes'] = self.__get_list(self.notes)
        if self.recordedOn:
            self.__json['recordedOn'] = self.recordedOn.json
        if self.subject:
            self.__json['subject'] = self.subject.json
        if self.bodySiteCodeableConcept:
            self.__json['bodySiteCodeableConcept'] = self.bodySiteCodeableConcept.json
        if self.bodySiteReference:
            self.__json['bodySiteReference'] = self.bodySiteReference.json
        if self.timingTiming:
            self.__json['timingTiming'] = self.timingTiming.json
        if self.timingPeriod:
            self.__json['timingPeriod'] = self.timingPeriod.json
        if self.timingDateTime:
            self.__json['timingDateTime'] = self.timingDateTime.json

        # Add json attributes
        self.__json = super(DeviceUseStatement, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR DeviceUseStatement string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class DiagnosticOrderEventComponent(BackboneElement):
    '''
    FHIR DiagnosticOrderEventComponent resource

     A summary of the events of interest that have occurred as the request is processed; e.g. when the order was made, various processing steps (specimens received), when it was completed.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR DiagnosticOrderEventComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(DiagnosticOrderEventComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR DiagnosticOrderEventComponent constructor
        '''
        logging.info("FHIR DiagnosticOrderEventComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.status = self.__add('status')
        self.description = CodeableConcept(self.__add('description'))
        self.dateTime = DateTime(self.__add('dateTime'))
        self.actor = Reference(self.__add('actor'))
        self.status = self.__add('status')
        self.description = CodeableConcept(self.__add('description'))
        self.dateTime = DateTime(self.__add('dateTime'))
        self.actor = Reference(self.__add('actor'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.status:
            self.__json['status'] = self.status
        if self.description:
            self.__json['description'] = self.description.json
        if self.dateTime:
            self.__json['dateTime'] = self.dateTime.json
        if self.actor:
            self.__json['actor'] = self.actor.json
        if self.status:
            self.__json['status'] = self.status
        if self.description:
            self.__json['description'] = self.description.json
        if self.dateTime:
            self.__json['dateTime'] = self.dateTime.json
        if self.actor:
            self.__json['actor'] = self.actor.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR DiagnosticOrderEventComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class DiagnosticOrderItemComponent(BackboneElement):
    '''
    FHIR DiagnosticOrderItemComponent resource

     The specific diagnostic investigations that are requested as part of this request. Sometimes, there can only be one item per request, but in most contexts, more than one investigation can be requested.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'specimen':
                    list_to_add.append(Reference(obj))
                elif key == 'event':
                    list_to_add.append(DiagnosticOrderEventComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR DiagnosticOrderItemComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(DiagnosticOrderItemComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR DiagnosticOrderItemComponent constructor
        '''
        logging.info("FHIR DiagnosticOrderItemComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.code = CodeableConcept(self.__add('code'))
        if 'specimen' in self.__json:
            if isinstance(self.__json['specimen'], list):
                self.specimen = self.__add_list('specimen')
            else:
                self.specimen = Reference(self.__add('specimen'))
        else:
            self.specimen = None
        self.bodySite = CodeableConcept(self.__add('bodySite'))
        self.status = self.__add('status')
        if 'event' in self.__json:
            if isinstance(self.__json['event'], list):
                self.event = self.__add_list('event')
            else:
                self.event = DiagnosticOrderEventComponent(self.__add('event'))
        else:
            self.event = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.code:
            self.__json['code'] = self.code.json
        if self.specimen:
            self.__json['specimen'] = self.__get_list(self.specimen)
        if self.bodySite:
            self.__json['bodySite'] = self.bodySite.json
        if self.status:
            self.__json['status'] = self.status
        if self.event:
            self.__json['event'] = self.__get_list(self.event)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR DiagnosticOrderItemComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class DiagnosticOrder(DomainResource):
    '''
    FHIR DiagnosticOrder resource

     A record of a request for a diagnostic investigation service to be performed. If the element is present, it must have either a @value, an @id, or extensions

    identifier ->  Identifiers assigned to this order instance by the orderer and/or  the receiver and/or order fulfiller.
    status ->  The status of the order. 
    priority ->  The clinical priority associated with this order. 
    subject ->  On whom or what the investigation is to be performed. This is usually a human patient, but diagnostic tests can also be requested on animals, groups of humans or animals, devices such as dialysis machines, or even locations (typically for environmental scans).
    encounter ->  An encounter that provides additional information about the healthcare context in which this request is made.
    orderer ->  The practitioner that holds legal responsibility for ordering the investigation.
    reason ->  An explanation or justification for why this diagnostic investigation is being requested.   This is often for billing purposes.  May relate to the resources referred to in supportingInformation.
    supportingInformation ->  Additional clinical information about the patient or specimen that may influence test interpretations.  This includes observations explicitly requested by the producer(filler) to provide context or supporting information needed to complete the order.
    specimen ->  One or more specimens that the diagnostic investigation is about.
    event ->  A summary of the events of interest that have occurred as the request is processed; e.g. when the order was made, various processing steps (specimens received), when it was completed.
    item ->  The specific diagnostic investigations that are requested as part of this request. Sometimes, there can only be one item per request, but in most contexts, more than one investigation can be requested.
    note ->  Any other notes associated with this patient, specimen or order (e.g. "patient hates needles").

    # Search parameters
        DiagnosticOrder.search.actor
        DiagnosticOrder.search.bodysite
        DiagnosticOrder.search.code
        DiagnosticOrder.search.encounter
        DiagnosticOrder.search.event-date
        DiagnosticOrder.search.event-status
        DiagnosticOrder.search.event-status-date
        DiagnosticOrder.search.identifier
        DiagnosticOrder.search.item-date
        DiagnosticOrder.search.item-past-status
        DiagnosticOrder.search.item-status
        DiagnosticOrder.search.item-status-date
        DiagnosticOrder.search.orderer
        DiagnosticOrder.search.patient
        DiagnosticOrder.search.specimen
        DiagnosticOrder.search.status
        DiagnosticOrder.search.subject
    '''
    # search parameters
    par = [("actor", "reference"),
           ("bodysite", "token"),
           ("code", "token"),
           ("encounter", "reference"),
           ("event-date", "date"),
           ("event-status", "token"),
           ("event-status-date", "None"),
           ("identifier", "token"),
           ("item-date", "date"),
           ("item-past-status", "token"),
           ("item-status", "token"),
           ("item-status-date", "None"),
           ("orderer", "reference"),
           ("patient", "reference"),
           ("specimen", "reference"),
           ("status", "token"),
           ("subject", "reference")]

    search = Params(par, "DiagnosticOrder")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'identifier':
                    list_to_add.append(Identifier(obj))
                elif key == 'reason':
                    list_to_add.append(CodeableConcept(obj))
                elif key == 'supportingInformation':
                    list_to_add.append(Reference(obj))
                elif key == 'specimen':
                    list_to_add.append(Reference(obj))
                elif key == 'event':
                    list_to_add.append(DiagnosticOrderEventComponent(obj))
                elif key == 'item':
                    list_to_add.append(DiagnosticOrderItemComponent(obj))
                elif key == 'note':
                    list_to_add.append(Annotation(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR DiagnosticOrder __new__
        '''
        if json == None:
            return None
        else:
            return super(DiagnosticOrder, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR DiagnosticOrder constructor
        '''
        logging.info("FHIR DiagnosticOrder: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "DiagnosticOrder"
        if 'identifier' in self.__json:
            if isinstance(self.__json['identifier'], list):
                self.identifier = self.__add_list('identifier')
            else:
                self.identifier = Identifier(self.__add('identifier'))
        else:
            self.identifier = None
        self.status = self.__add('status')
        self.priority = self.__add('priority')
        self.subject = Reference(self.__add('subject'))
        self.encounter = Reference(self.__add('encounter'))
        self.orderer = Reference(self.__add('orderer'))
        if 'reason' in self.__json:
            if isinstance(self.__json['reason'], list):
                self.reason = self.__add_list('reason')
            else:
                self.reason = CodeableConcept(self.__add('reason'))
        else:
            self.reason = None
        if 'supportingInformation' in self.__json:
            if isinstance(self.__json['supportingInformation'], list):
                self.supportingInformation = self.__add_list('supportingInformation')
            else:
                self.supportingInformation = Reference(self.__add('supportingInformation'))
        else:
            self.supportingInformation = None
        if 'specimen' in self.__json:
            if isinstance(self.__json['specimen'], list):
                self.specimen = self.__add_list('specimen')
            else:
                self.specimen = Reference(self.__add('specimen'))
        else:
            self.specimen = None
        if 'event' in self.__json:
            if isinstance(self.__json['event'], list):
                self.event = self.__add_list('event')
            else:
                self.event = DiagnosticOrderEventComponent(self.__add('event'))
        else:
            self.event = None
        if 'item' in self.__json:
            if isinstance(self.__json['item'], list):
                self.item = self.__add_list('item')
            else:
                self.item = DiagnosticOrderItemComponent(self.__add('item'))
        else:
            self.item = None
        if 'note' in self.__json:
            if isinstance(self.__json['note'], list):
                self.note = self.__add_list('note')
            else:
                self.note = Annotation(self.__add('note'))
        else:
            self.note = None


        # Parent Resource Init
        super(DiagnosticOrder, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identifier:
            self.__json['identifier'] = self.__get_list(self.identifier)
        if self.status:
            self.__json['status'] = self.status
        if self.priority:
            self.__json['priority'] = self.priority
        if self.subject:
            self.__json['subject'] = self.subject.json
        if self.encounter:
            self.__json['encounter'] = self.encounter.json
        if self.orderer:
            self.__json['orderer'] = self.orderer.json
        if self.reason:
            self.__json['reason'] = self.__get_list(self.reason)
        if self.supportingInformation:
            self.__json['supportingInformation'] = self.__get_list(self.supportingInformation)
        if self.specimen:
            self.__json['specimen'] = self.__get_list(self.specimen)
        if self.event:
            self.__json['event'] = self.__get_list(self.event)
        if self.item:
            self.__json['item'] = self.__get_list(self.item)
        if self.note:
            self.__json['note'] = self.__get_list(self.note)

        # Add json attributes
        self.__json = super(DiagnosticOrder, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR DiagnosticOrder string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class DiagnosticReportImageComponent(BackboneElement):
    '''
    FHIR DiagnosticReportImageComponent resource

     A list of key images associated with this report. The images are generally created during the diagnostic process, and may be directly of the patient, or of treated specimens (i.e. slides of interest).

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR DiagnosticReportImageComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(DiagnosticReportImageComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR DiagnosticReportImageComponent constructor
        '''
        logging.info("FHIR DiagnosticReportImageComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.comment = self.__add('comment')
        self.link = Reference(self.__add('link'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.comment:
            self.__json['comment'] = self.comment
        if self.link:
            self.__json['link'] = self.link.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR DiagnosticReportImageComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class DiagnosticReport(DomainResource):
    '''
    FHIR DiagnosticReport resource

     The findings and interpretation of diagnostic  tests performed on patients, groups of patients, devices, and locations, and/or specimens derived from these. The report includes clinical context such as requesting and provider information, and some mix of atomic results, images, textual and coded interpretations, and formatted representation of diagnostic reports. If the element is present, it must have either a @value, an @id, or extensions

    identifier ->  The local ID assigned to the report by the order filler, usually by the Information System of the diagnostic service provider.
    status ->  The status of the diagnostic report as a whole. 
    category ->  A code that classifies the clinical discipline, department or diagnostic service that created the report (e.g. cardiology, biochemistry, hematology, MRI). This is used for searching, sorting and display purposes.
    code ->  A code or name that describes this diagnostic report.
    subject ->  The subject of the report. Usually, but not always, this is a patient. However diagnostic services also perform analyses on specimens collected from a variety of other sources.
    encounter ->  The link to the health care event (encounter) when the order was made.
    issued ->  The date and time that this version of the report was released from the source diagnostic service.
    performer ->  The diagnostic service that is responsible for issuing the report.
    request ->  Details concerning a test or procedure requested.
    specimen ->  Details about the specimens on which this diagnostic report is based.
    result ->  Observations that are part of this diagnostic report. Observations can be simple name/value pairs (e.g. "atomic" results), or they can be grouping observations that include references to other members of the group (e.g. "panels").
    imagingStudy ->  One or more links to full details of any imaging performed during the diagnostic investigation. Typically, this is imaging performed by DICOM enabled modalities, but this is not required. A fully enabled PACS viewer can use this information to provide views of the source images.
    image ->  A list of key images associated with this report. The images are generally created during the diagnostic process, and may be directly of the patient, or of treated specimens (i.e. slides of interest).
    conclusion ->  Concise and clinically contextualized narrative interpretation of the diagnostic report.
    codedDiagnosis ->  Codes for the conclusion.
    presentedForm ->  Rich text representation of the entire result as issued by the diagnostic service. Multiple formats are allowed but they SHALL be semantically equivalent.
    effectiveDateTime ->  The time or time-period the observed values are related to. When the subject of the report is a patient, this is usually either the time of the procedure or of specimen collection(s), but very often the source of the date/time is not known, only the date/time itself.
    effectivePeriod ->  The time or time-period the observed values are related to. When the subject of the report is a patient, this is usually either the time of the procedure or of specimen collection(s), but very often the source of the date/time is not known, only the date/time itself.

    # Search parameters
        DiagnosticReport.search.category
        DiagnosticReport.search.code
        DiagnosticReport.search.date
        DiagnosticReport.search.diagnosis
        DiagnosticReport.search.encounter
        DiagnosticReport.search.identifier
        DiagnosticReport.search.image
        DiagnosticReport.search.issued
        DiagnosticReport.search.patient
        DiagnosticReport.search.performer
        DiagnosticReport.search.request
        DiagnosticReport.search.result
        DiagnosticReport.search.specimen
        DiagnosticReport.search.status
        DiagnosticReport.search.subject
    '''
    # search parameters
    par = [("category", "token"),
           ("code", "token"),
           ("date", "date"),
           ("diagnosis", "token"),
           ("encounter", "reference"),
           ("identifier", "token"),
           ("image", "reference"),
           ("issued", "date"),
           ("patient", "reference"),
           ("performer", "reference"),
           ("request", "reference"),
           ("result", "reference"),
           ("specimen", "reference"),
           ("status", "token"),
           ("subject", "reference")]

    search = Params(par, "DiagnosticReport")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'identifier':
                    list_to_add.append(Identifier(obj))
                elif key == 'request':
                    list_to_add.append(Reference(obj))
                elif key == 'specimen':
                    list_to_add.append(Reference(obj))
                elif key == 'result':
                    list_to_add.append(Reference(obj))
                elif key == 'imagingStudy':
                    list_to_add.append(Reference(obj))
                elif key == 'image':
                    list_to_add.append(DiagnosticReportImageComponent(obj))
                elif key == 'codedDiagnosis':
                    list_to_add.append(CodeableConcept(obj))
                elif key == 'presentedForm':
                    list_to_add.append(Attachment(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR DiagnosticReport __new__
        '''
        if json == None:
            return None
        else:
            return super(DiagnosticReport, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR DiagnosticReport constructor
        '''
        logging.info("FHIR DiagnosticReport: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "DiagnosticReport"
        if 'identifier' in self.__json:
            if isinstance(self.__json['identifier'], list):
                self.identifier = self.__add_list('identifier')
            else:
                self.identifier = Identifier(self.__add('identifier'))
        else:
            self.identifier = None
        self.status = self.__add('status')
        self.category = CodeableConcept(self.__add('category'))
        self.code = CodeableConcept(self.__add('code'))
        self.subject = Reference(self.__add('subject'))
        self.encounter = Reference(self.__add('encounter'))
        self.issued = self.__add('issued')
        self.performer = Reference(self.__add('performer'))
        if 'request' in self.__json:
            if isinstance(self.__json['request'], list):
                self.request = self.__add_list('request')
            else:
                self.request = Reference(self.__add('request'))
        else:
            self.request = None
        if 'specimen' in self.__json:
            if isinstance(self.__json['specimen'], list):
                self.specimen = self.__add_list('specimen')
            else:
                self.specimen = Reference(self.__add('specimen'))
        else:
            self.specimen = None
        if 'result' in self.__json:
            if isinstance(self.__json['result'], list):
                self.result = self.__add_list('result')
            else:
                self.result = Reference(self.__add('result'))
        else:
            self.result = None
        if 'imagingStudy' in self.__json:
            if isinstance(self.__json['imagingStudy'], list):
                self.imagingStudy = self.__add_list('imagingStudy')
            else:
                self.imagingStudy = Reference(self.__add('imagingStudy'))
        else:
            self.imagingStudy = None
        if 'image' in self.__json:
            if isinstance(self.__json['image'], list):
                self.image = self.__add_list('image')
            else:
                self.image = DiagnosticReportImageComponent(self.__add('image'))
        else:
            self.image = None
        self.conclusion = self.__add('conclusion')
        if 'codedDiagnosis' in self.__json:
            if isinstance(self.__json['codedDiagnosis'], list):
                self.codedDiagnosis = self.__add_list('codedDiagnosis')
            else:
                self.codedDiagnosis = CodeableConcept(self.__add('codedDiagnosis'))
        else:
            self.codedDiagnosis = None
        if 'presentedForm' in self.__json:
            if isinstance(self.__json['presentedForm'], list):
                self.presentedForm = self.__add_list('presentedForm')
            else:
                self.presentedForm = Attachment(self.__add('presentedForm'))
        else:
            self.presentedForm = None
        self.effectiveDateTime = DateTime(self.__add('effectiveDateTime'))
        self.effectivePeriod = Period(self.__add('effectivePeriod'))


        # Parent Resource Init
        super(DiagnosticReport, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identifier:
            self.__json['identifier'] = self.__get_list(self.identifier)
        if self.status:
            self.__json['status'] = self.status
        if self.category:
            self.__json['category'] = self.category.json
        if self.code:
            self.__json['code'] = self.code.json
        if self.subject:
            self.__json['subject'] = self.subject.json
        if self.encounter:
            self.__json['encounter'] = self.encounter.json
        if self.issued:
            self.__json['issued'] = self.issued
        if self.performer:
            self.__json['performer'] = self.performer.json
        if self.request:
            self.__json['request'] = self.__get_list(self.request)
        if self.specimen:
            self.__json['specimen'] = self.__get_list(self.specimen)
        if self.result:
            self.__json['result'] = self.__get_list(self.result)
        if self.imagingStudy:
            self.__json['imagingStudy'] = self.__get_list(self.imagingStudy)
        if self.image:
            self.__json['image'] = self.__get_list(self.image)
        if self.conclusion:
            self.__json['conclusion'] = self.conclusion
        if self.codedDiagnosis:
            self.__json['codedDiagnosis'] = self.__get_list(self.codedDiagnosis)
        if self.presentedForm:
            self.__json['presentedForm'] = self.__get_list(self.presentedForm)
        if self.effectiveDateTime:
            self.__json['effectiveDateTime'] = self.effectiveDateTime.json
        if self.effectivePeriod:
            self.__json['effectivePeriod'] = self.effectivePeriod.json

        # Add json attributes
        self.__json = super(DiagnosticReport, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR DiagnosticReport string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class DocumentManifestContentComponent(BackboneElement):
    '''
    FHIR DocumentManifestContentComponent resource

     The list of Documents included in the manifest.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR DocumentManifestContentComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(DocumentManifestContentComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR DocumentManifestContentComponent constructor
        '''
        logging.info("FHIR DocumentManifestContentComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.pAttachment = Attachment(self.__add('pAttachment'))
        self.pReference = Reference(self.__add('pReference'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.pAttachment:
            self.__json['pAttachment'] = self.pAttachment.json
        if self.pReference:
            self.__json['pReference'] = self.pReference.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR DocumentManifestContentComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class DocumentManifestRelatedComponent(BackboneElement):
    '''
    FHIR DocumentManifestRelatedComponent resource

     Related identifiers or resources associated with the DocumentManifest.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR DocumentManifestRelatedComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(DocumentManifestRelatedComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR DocumentManifestRelatedComponent constructor
        '''
        logging.info("FHIR DocumentManifestRelatedComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.identifier = Identifier(self.__add('identifier'))
        self.ref = Reference(self.__add('ref'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identifier:
            self.__json['identifier'] = self.identifier.json
        if self.ref:
            self.__json['ref'] = self.ref.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR DocumentManifestRelatedComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class DocumentManifest(DomainResource):
    '''
    FHIR DocumentManifest resource

     A manifest that defines a set of documents. If the element is present, it must have either a @value, an @id, or extensions

    masterIdentifier ->  A single identifier that uniquely identifies this manifest. Principally used to refer to the manifest in non-FHIR contexts.
    identifier ->  Other identifiers associated with the document manifest, including version independent  identifiers.
    subject ->  Who or what the set of documents is about. The documents can be about a person, (patient or healthcare practitioner), a device (i.e. machine) or even a group of subjects (such as a document about a herd of farm animals, or a set of patients that share a common exposure). If the documents cross more than one subject, then more than one subject is allowed here (unusual use case).
    recipient ->  A patient, practitioner, or organization for which this set of documents is intended.
    type ->  Specifies the kind of this set of documents (e.g. Patient Summary, Discharge Summary, Prescription, etc.). The type of a set of documents may be the same as one of the documents in it - especially if there is only one - but it may be wider.
    author ->  Identifies who is responsible for creating the manifest, and adding  documents to it.
    created ->  When the document manifest was created for submission to the server (not necessarily the same thing as the actual resource last modified time, since it may be modified, replicated, etc.).
    source ->  Identifies the source system, application, or software that produced the document manifest.
    status ->  The status of this document manifest. 
    description ->  Human-readable description of the source document. This is sometimes known as the "title".
    content ->  The list of Documents included in the manifest.
    related ->  Related identifiers or resources associated with the DocumentManifest.

    # Search parameters
        DocumentManifest.search.author
        DocumentManifest.search.content-ref
        DocumentManifest.search.created
        DocumentManifest.search.description
        DocumentManifest.search.identifier
        DocumentManifest.search.patient
        DocumentManifest.search.recipient
        DocumentManifest.search.related-id
        DocumentManifest.search.related-ref
        DocumentManifest.search.source
        DocumentManifest.search.status
        DocumentManifest.search.subject
        DocumentManifest.search.type
    '''
    # search parameters
    par = [("author", "reference"),
           ("content-ref", "reference"),
           ("created", "date"),
           ("description", "string"),
           ("identifier", "token"),
           ("patient", "reference"),
           ("recipient", "reference"),
           ("related-id", "token"),
           ("related-ref", "reference"),
           ("source", "uri"),
           ("status", "token"),
           ("subject", "reference"),
           ("type", "token")]

    search = Params(par, "DocumentManifest")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'identifier':
                    list_to_add.append(Identifier(obj))
                elif key == 'recipient':
                    list_to_add.append(Reference(obj))
                elif key == 'author':
                    list_to_add.append(Reference(obj))
                elif key == 'content':
                    list_to_add.append(DocumentManifestContentComponent(obj))
                elif key == 'related':
                    list_to_add.append(DocumentManifestRelatedComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR DocumentManifest __new__
        '''
        if json == None:
            return None
        else:
            return super(DocumentManifest, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR DocumentManifest constructor
        '''
        logging.info("FHIR DocumentManifest: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "DocumentManifest"
        self.masterIdentifier = Identifier(self.__add('masterIdentifier'))
        if 'identifier' in self.__json:
            if isinstance(self.__json['identifier'], list):
                self.identifier = self.__add_list('identifier')
            else:
                self.identifier = Identifier(self.__add('identifier'))
        else:
            self.identifier = None
        self.subject = Reference(self.__add('subject'))
        if 'recipient' in self.__json:
            if isinstance(self.__json['recipient'], list):
                self.recipient = self.__add_list('recipient')
            else:
                self.recipient = Reference(self.__add('recipient'))
        else:
            self.recipient = None
        self.type = CodeableConcept(self.__add('type'))
        if 'author' in self.__json:
            if isinstance(self.__json['author'], list):
                self.author = self.__add_list('author')
            else:
                self.author = Reference(self.__add('author'))
        else:
            self.author = None
        self.created = DateTime(self.__add('created'))
        self.source = self.__add('source')
        self.status = self.__add('status')
        self.description = self.__add('description')
        if 'content' in self.__json:
            if isinstance(self.__json['content'], list):
                self.content = self.__add_list('content')
            else:
                self.content = DocumentManifestContentComponent(self.__add('content'))
        else:
            self.content = None
        if 'related' in self.__json:
            if isinstance(self.__json['related'], list):
                self.related = self.__add_list('related')
            else:
                self.related = DocumentManifestRelatedComponent(self.__add('related'))
        else:
            self.related = None


        # Parent Resource Init
        super(DocumentManifest, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.masterIdentifier:
            self.__json['masterIdentifier'] = self.masterIdentifier.json
        if self.identifier:
            self.__json['identifier'] = self.__get_list(self.identifier)
        if self.subject:
            self.__json['subject'] = self.subject.json
        if self.recipient:
            self.__json['recipient'] = self.__get_list(self.recipient)
        if self.type:
            self.__json['type'] = self.type.json
        if self.author:
            self.__json['author'] = self.__get_list(self.author)
        if self.created:
            self.__json['created'] = self.created.json
        if self.source:
            self.__json['source'] = self.source
        if self.status:
            self.__json['status'] = self.status
        if self.description:
            self.__json['description'] = self.description
        if self.content:
            self.__json['content'] = self.__get_list(self.content)
        if self.related:
            self.__json['related'] = self.__get_list(self.related)

        # Add json attributes
        self.__json = super(DocumentManifest, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR DocumentManifest string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class DocumentReferenceRelatesToComponent(BackboneElement):
    '''
    FHIR DocumentReferenceRelatesToComponent resource

     Relationships that this document has with other document references that already exist.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR DocumentReferenceRelatesToComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(DocumentReferenceRelatesToComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR DocumentReferenceRelatesToComponent constructor
        '''
        logging.info("FHIR DocumentReferenceRelatesToComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.code = self.__add('code')
        self.target = Reference(self.__add('target'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.code:
            self.__json['code'] = self.code
        if self.target:
            self.__json['target'] = self.target.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR DocumentReferenceRelatesToComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class DocumentReferenceContentComponent(BackboneElement):
    '''
    FHIR DocumentReferenceContentComponent resource

     The document and format referenced. There may be multiple content element repetitions, each with a different format.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'format':
                    list_to_add.append(Coding(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR DocumentReferenceContentComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(DocumentReferenceContentComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR DocumentReferenceContentComponent constructor
        '''
        logging.info("FHIR DocumentReferenceContentComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.attachment = Attachment(self.__add('attachment'))
        if 'format' in self.__json:
            if isinstance(self.__json['format'], list):
                self.format = self.__add_list('format')
            else:
                self.format = Coding(self.__add('format'))
        else:
            self.format = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.attachment:
            self.__json['attachment'] = self.attachment.json
        if self.format:
            self.__json['format'] = self.__get_list(self.format)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR DocumentReferenceContentComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class DocumentReferenceRelatedComponent(BackboneElement):
    '''
    FHIR DocumentReferenceRelatedComponent resource

     Related identifiers or resources associated with the DocumentReference.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR DocumentReferenceRelatedComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(DocumentReferenceRelatedComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR DocumentReferenceRelatedComponent constructor
        '''
        logging.info("FHIR DocumentReferenceRelatedComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType


        return self.__json
        
    def __repr__(self):
        '''
        FHIR DocumentReferenceRelatedComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class DocumentReferenceContextComponent(BackboneElement):
    '''
    FHIR DocumentReferenceContextComponent resource

     The clinical context in which the document was prepared.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'event':
                    list_to_add.append(CodeableConcept(obj))
                elif key == 'related':
                    list_to_add.append(DocumentReferenceRelatedComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR DocumentReferenceContextComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(DocumentReferenceContextComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR DocumentReferenceContextComponent constructor
        '''
        logging.info("FHIR DocumentReferenceContextComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.encounter = Reference(self.__add('encounter'))
        if 'event' in self.__json:
            if isinstance(self.__json['event'], list):
                self.event = self.__add_list('event')
            else:
                self.event = CodeableConcept(self.__add('event'))
        else:
            self.event = None
        self.period = Period(self.__add('period'))
        self.facilityType = CodeableConcept(self.__add('facilityType'))
        self.practiceSetting = CodeableConcept(self.__add('practiceSetting'))
        self.sourcePatientInfo = Reference(self.__add('sourcePatientInfo'))
        if 'related' in self.__json:
            if isinstance(self.__json['related'], list):
                self.related = self.__add_list('related')
            else:
                self.related = DocumentReferenceRelatedComponent(self.__add('related'))
        else:
            self.related = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.encounter:
            self.__json['encounter'] = self.encounter.json
        if self.event:
            self.__json['event'] = self.__get_list(self.event)
        if self.period:
            self.__json['period'] = self.period.json
        if self.facilityType:
            self.__json['facilityType'] = self.facilityType.json
        if self.practiceSetting:
            self.__json['practiceSetting'] = self.practiceSetting.json
        if self.sourcePatientInfo:
            self.__json['sourcePatientInfo'] = self.sourcePatientInfo.json
        if self.related:
            self.__json['related'] = self.__get_list(self.related)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR DocumentReferenceContextComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class DocumentReference(DomainResource):
    '''
    FHIR DocumentReference resource

     A reference to a document . If the element is present, it must have either a @value, an @id, or extensions

    masterIdentifier ->  Document identifier as assigned by the source of the document. This identifier is specific to this version of the document. This unique identifier may be used elsewhere to identify this version of the document.
    identifier ->  Other identifiers associated with the document, including version independent identifiers.
    subject ->  Who or what the document is about. The document can be about a person, (patient or healthcare practitioner), a device (e.g. a machine) or even a group of subjects (such as a document about a herd of farm animals, or a set of patients that share a common exposure).
    type ->  Specifies the particular kind of document referenced  (e.g. History and Physical, Discharge Summary, Progress Note). This usually equates to the purpose of making the document referenced.
    class_ ->  A categorization for the type of document referenced - helps for indexing and searching. This may be implied by or derived from the code specified in the DocumentReference.type.
    author ->  Identifies who is responsible for adding the information to the document.
    custodian ->  Identifies the organization or group who is responsible for ongoing maintenance of and access to the document.
    authenticator ->  Which person or organization authenticates that this document is valid.
    created ->  When the document was created.
    indexed ->  When the document reference was created.
    status ->  The status of this document reference. 
    docStatus ->  The status of the underlying document.
    relatesTo ->  Relationships that this document has with other document references that already exist.
    description ->  Human-readable description of the source document. This is sometimes known as the "title".
    securityLabel ->  A set of Security-Tag codes specifying the level of privacy/security of the Document. Note that DocumentReference.meta.security contains the security labels of the "reference" to the document, while DocumentReference.securityLabel contains a snapshot of the security labels on the document the reference refers to.
    content ->  The document and format referenced. There may be multiple content element repetitions, each with a different format.
    context ->  The clinical context in which the document was prepared.

    # Search parameters
        DocumentReference.search.authenticator
        DocumentReference.search.author
        DocumentReference.search.class
        DocumentReference.search.created
        DocumentReference.search.custodian
        DocumentReference.search.description
        DocumentReference.search.encounter
        DocumentReference.search.event
        DocumentReference.search.facility
        DocumentReference.search.format
        DocumentReference.search.identifier
        DocumentReference.search.indexed
        DocumentReference.search.language
        DocumentReference.search.location
        DocumentReference.search.patient
        DocumentReference.search.period
        DocumentReference.search.related-id
        DocumentReference.search.related-ref
        DocumentReference.search.relatesto
        DocumentReference.search.relation
        DocumentReference.search.relationship
        DocumentReference.search.securitylabel
        DocumentReference.search.setting
        DocumentReference.search.status
        DocumentReference.search.subject
        DocumentReference.search.type
    '''
    # search parameters
    par = [("authenticator", "reference"),
           ("author", "reference"),
           ("class", "token"),
           ("created", "date"),
           ("custodian", "reference"),
           ("description", "string"),
           ("encounter", "reference"),
           ("event", "token"),
           ("facility", "token"),
           ("format", "token"),
           ("identifier", "token"),
           ("indexed", "date"),
           ("language", "token"),
           ("location", "uri"),
           ("patient", "reference"),
           ("period", "date"),
           ("related-id", "token"),
           ("related-ref", "reference"),
           ("relatesto", "reference"),
           ("relation", "token"),
           ("relationship", "None"),
           ("securitylabel", "token"),
           ("setting", "token"),
           ("status", "token"),
           ("subject", "reference"),
           ("type", "token")]

    search = Params(par, "DocumentReference")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'identifier':
                    list_to_add.append(Identifier(obj))
                elif key == 'author':
                    list_to_add.append(Reference(obj))
                elif key == 'relatesTo':
                    list_to_add.append(DocumentReferenceRelatesToComponent(obj))
                elif key == 'securityLabel':
                    list_to_add.append(CodeableConcept(obj))
                elif key == 'content':
                    list_to_add.append(DocumentReferenceContentComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR DocumentReference __new__
        '''
        if json == None:
            return None
        else:
            return super(DocumentReference, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR DocumentReference constructor
        '''
        logging.info("FHIR DocumentReference: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "DocumentReference"
        self.masterIdentifier = Identifier(self.__add('masterIdentifier'))
        if 'identifier' in self.__json:
            if isinstance(self.__json['identifier'], list):
                self.identifier = self.__add_list('identifier')
            else:
                self.identifier = Identifier(self.__add('identifier'))
        else:
            self.identifier = None
        self.subject = Reference(self.__add('subject'))
        self.type = CodeableConcept(self.__add('type'))
        self.class_ = CodeableConcept(self.__add('class_'))
        if 'author' in self.__json:
            if isinstance(self.__json['author'], list):
                self.author = self.__add_list('author')
            else:
                self.author = Reference(self.__add('author'))
        else:
            self.author = None
        self.custodian = Reference(self.__add('custodian'))
        self.authenticator = Reference(self.__add('authenticator'))
        self.created = DateTime(self.__add('created'))
        self.indexed = self.__add('indexed')
        self.status = self.__add('status')
        self.docStatus = CodeableConcept(self.__add('docStatus'))
        if 'relatesTo' in self.__json:
            if isinstance(self.__json['relatesTo'], list):
                self.relatesTo = self.__add_list('relatesTo')
            else:
                self.relatesTo = DocumentReferenceRelatesToComponent(self.__add('relatesTo'))
        else:
            self.relatesTo = None
        self.description = self.__add('description')
        if 'securityLabel' in self.__json:
            if isinstance(self.__json['securityLabel'], list):
                self.securityLabel = self.__add_list('securityLabel')
            else:
                self.securityLabel = CodeableConcept(self.__add('securityLabel'))
        else:
            self.securityLabel = None
        if 'content' in self.__json:
            if isinstance(self.__json['content'], list):
                self.content = self.__add_list('content')
            else:
                self.content = DocumentReferenceContentComponent(self.__add('content'))
        else:
            self.content = None
        self.context = DocumentReferenceContextComponent(self.__add('context'))


        # Parent Resource Init
        super(DocumentReference, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.masterIdentifier:
            self.__json['masterIdentifier'] = self.masterIdentifier.json
        if self.identifier:
            self.__json['identifier'] = self.__get_list(self.identifier)
        if self.subject:
            self.__json['subject'] = self.subject.json
        if self.type:
            self.__json['type'] = self.type.json
        if self.class_:
            self.__json['class_'] = self.class_.json
        if self.author:
            self.__json['author'] = self.__get_list(self.author)
        if self.custodian:
            self.__json['custodian'] = self.custodian.json
        if self.authenticator:
            self.__json['authenticator'] = self.authenticator.json
        if self.created:
            self.__json['created'] = self.created.json
        if self.indexed:
            self.__json['indexed'] = self.indexed
        if self.status:
            self.__json['status'] = self.status
        if self.docStatus:
            self.__json['docStatus'] = self.docStatus.json
        if self.relatesTo:
            self.__json['relatesTo'] = self.__get_list(self.relatesTo)
        if self.description:
            self.__json['description'] = self.description
        if self.securityLabel:
            self.__json['securityLabel'] = self.__get_list(self.securityLabel)
        if self.content:
            self.__json['content'] = self.__get_list(self.content)
        if self.context:
            self.__json['context'] = self.context.json

        # Add json attributes
        self.__json = super(DocumentReference, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR DocumentReference string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class EligibilityRequest(DomainResource):
    '''
    FHIR EligibilityRequest resource

     This resource provides the insurance eligibility details from the insurer regarding a specified coverage and optionally some class of service. If the element is present, it must have either a @value, an @id, or extensions

    identifier ->  The Response business identifier.
    ruleset ->  The version of the style of resource contents. This should be mapped to the allowable profiles for this and supporting resources.
    originalRuleset ->  The style (standard) and version of the original material which was converted into this resource.
    created ->  The date when this resource was created.
    priority ->  Immediate (STAT), best effort (NORMAL), deferred (DEFER).
    businessArrangement ->  The contract number of a business agreement which describes the terms and conditions.
    benefitCategory ->  Dental, Vision, Medical, Pharmacy, Rehab etc.
    benefitSubCategory ->  Dental: basic, major, ortho; Vision exam, glasses, contacts; etc.
    targetIdentifier ->  The Insurer who is target  of the request.
    targetReference ->  The Insurer who is target  of the request.
    providerIdentifier ->  The practitioner who is responsible for the services rendered to the patient.
    providerReference ->  The practitioner who is responsible for the services rendered to the patient.
    organizationIdentifier ->  The organization which is responsible for the services rendered to the patient.
    organizationReference ->  The organization which is responsible for the services rendered to the patient.
    entererIdentifier ->  Person who created the invoice/claim/pre-determination or pre-authorization.
    entererReference ->  Person who created the invoice/claim/pre-determination or pre-authorization.
    facilityIdentifier ->  Facility where the services were provided.
    facilityReference ->  Facility where the services were provided.
    patientIdentifier ->  Patient Resource.
    patientReference ->  Patient Resource.
    coverageIdentifier ->  Financial instrument by which payment information for health care.
    coverageReference ->  Financial instrument by which payment information for health care.
    servicedDate ->  The date or dates when the enclosed suite of services were performed or completed.
    servicedPeriod ->  The date or dates when the enclosed suite of services were performed or completed.

    # Search parameters
        EligibilityRequest.search.identifier
    '''
    # search parameters
    par = [("identifier", "token")]

    search = Params(par, "EligibilityRequest")


    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'identifier':
                    list_to_add.append(Identifier(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR EligibilityRequest __new__
        '''
        if json == None:
            return None
        else:
            return super(EligibilityRequest, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR EligibilityRequest constructor
        '''
        logging.info("FHIR EligibilityRequest: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "EligibilityRequest"
        if 'identifier' in self.__json:
            if isinstance(self.__json['identifier'], list):
                self.identifier = self.__add_list('identifier')
            else:
                self.identifier = Identifier(self.__add('identifier'))
        else:
            self.identifier = None
        self.ruleset = Coding(self.__add('ruleset'))
        self.originalRuleset = Coding(self.__add('originalRuleset'))
        self.created = DateTime(self.__add('created'))
        self.priority = Coding(self.__add('priority'))
        self.businessArrangement = self.__add('businessArrangement')
        self.benefitCategory = Coding(self.__add('benefitCategory'))
        self.benefitSubCategory = Coding(self.__add('benefitSubCategory'))
        self.targetIdentifier = Identifier(self.__add('targetIdentifier'))
        self.targetReference = Reference(self.__add('targetReference'))
        self.providerIdentifier = Identifier(self.__add('providerIdentifier'))
        self.providerReference = Reference(self.__add('providerReference'))
        self.organizationIdentifier = Identifier(self.__add('organizationIdentifier'))
        self.organizationReference = Reference(self.__add('organizationReference'))
        self.entererIdentifier = Identifier(self.__add('entererIdentifier'))
        self.entererReference = Reference(self.__add('entererReference'))
        self.facilityIdentifier = Identifier(self.__add('facilityIdentifier'))
        self.facilityReference = Reference(self.__add('facilityReference'))
        self.patientIdentifier = Identifier(self.__add('patientIdentifier'))
        self.patientReference = Reference(self.__add('patientReference'))
        self.coverageIdentifier = Identifier(self.__add('coverageIdentifier'))
        self.coverageReference = Reference(self.__add('coverageReference'))
        self.servicedDate = Date(self.__add('servicedDate'))
        self.servicedPeriod = Period(self.__add('servicedPeriod'))


        # Parent Resource Init
        super(EligibilityRequest, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identifier:
            self.__json['identifier'] = self.__get_list(self.identifier)
        if self.ruleset:
            self.__json['ruleset'] = self.ruleset.json
        if self.originalRuleset:
            self.__json['originalRuleset'] = self.originalRuleset.json
        if self.created:
            self.__json['created'] = self.created.json
        if self.priority:
            self.__json['priority'] = self.priority.json
        if self.businessArrangement:
            self.__json['businessArrangement'] = self.businessArrangement
        if self.benefitCategory:
            self.__json['benefitCategory'] = self.benefitCategory.json
        if self.benefitSubCategory:
            self.__json['benefitSubCategory'] = self.benefitSubCategory.json
        if self.targetIdentifier:
            self.__json['targetIdentifier'] = self.targetIdentifier.json
        if self.targetReference:
            self.__json['targetReference'] = self.targetReference.json
        if self.providerIdentifier:
            self.__json['providerIdentifier'] = self.providerIdentifier.json
        if self.providerReference:
            self.__json['providerReference'] = self.providerReference.json
        if self.organizationIdentifier:
            self.__json['organizationIdentifier'] = self.organizationIdentifier.json
        if self.organizationReference:
            self.__json['organizationReference'] = self.organizationReference.json
        if self.entererIdentifier:
            self.__json['entererIdentifier'] = self.entererIdentifier.json
        if self.entererReference:
            self.__json['entererReference'] = self.entererReference.json
        if self.facilityIdentifier:
            self.__json['facilityIdentifier'] = self.facilityIdentifier.json
        if self.facilityReference:
            self.__json['facilityReference'] = self.facilityReference.json
        if self.patientIdentifier:
            self.__json['patientIdentifier'] = self.patientIdentifier.json
        if self.patientReference:
            self.__json['patientReference'] = self.patientReference.json
        if self.coverageIdentifier:
            self.__json['coverageIdentifier'] = self.coverageIdentifier.json
        if self.coverageReference:
            self.__json['coverageReference'] = self.coverageReference.json
        if self.servicedDate:
            self.__json['servicedDate'] = self.servicedDate.json
        if self.servicedPeriod:
            self.__json['servicedPeriod'] = self.servicedPeriod.json

        # Add json attributes
        self.__json = super(EligibilityRequest, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR EligibilityRequest string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class EligibilityResponseFinancialComponent(BackboneElement):
    '''
    FHIR EligibilityResponseFinancialComponent resource

     Benefits Used to date.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR EligibilityResponseFinancialComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(EligibilityResponseFinancialComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR EligibilityResponseFinancialComponent constructor
        '''
        logging.info("FHIR EligibilityResponseFinancialComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType


        return self.__json
        
    def __repr__(self):
        '''
        FHIR EligibilityResponseFinancialComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class EligibilityResponseBenefitBalanceComponent(BackboneElement):
    '''
    FHIR EligibilityResponseBenefitBalanceComponent resource

     Benefits and optionally current balances by Category.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'financial':
                    list_to_add.append(EligibilityResponseFinancialComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR EligibilityResponseBenefitBalanceComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(EligibilityResponseBenefitBalanceComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR EligibilityResponseBenefitBalanceComponent constructor
        '''
        logging.info("FHIR EligibilityResponseBenefitBalanceComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.category = Coding(self.__add('category'))
        self.subCategory = Coding(self.__add('subCategory'))
        self.network = Coding(self.__add('network'))
        self.unit = Coding(self.__add('unit'))
        self.term = Coding(self.__add('term'))
        if 'financial' in self.__json:
            if isinstance(self.__json['financial'], list):
                self.financial = self.__add_list('financial')
            else:
                self.financial = EligibilityResponseFinancialComponent(self.__add('financial'))
        else:
            self.financial = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.category:
            self.__json['category'] = self.category.json
        if self.subCategory:
            self.__json['subCategory'] = self.subCategory.json
        if self.network:
            self.__json['network'] = self.network.json
        if self.unit:
            self.__json['unit'] = self.unit.json
        if self.term:
            self.__json['term'] = self.term.json
        if self.financial:
            self.__json['financial'] = self.__get_list(self.financial)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR EligibilityResponseBenefitBalanceComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class EligibilityResponseErrorComponent(BackboneElement):
    '''
    FHIR EligibilityResponseErrorComponent resource

     Mutually exclusive with Services Provided (Item).

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR EligibilityResponseErrorComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(EligibilityResponseErrorComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR EligibilityResponseErrorComponent constructor
        '''
        logging.info("FHIR EligibilityResponseErrorComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.code = Coding(self.__add('code'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.code:
            self.__json['code'] = self.code.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR EligibilityResponseErrorComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class EligibilityResponse(DomainResource):
    '''
    FHIR EligibilityResponse resource

     This resource provides eligibility and plan details from the processing of an Eligibility resource. If the element is present, it must have either a @value, an @id, or extensions

    identifier ->  The Response business identifier.
    outcome ->  Transaction status: error, complete. 
    disposition ->  A description of the status of the adjudication.
    ruleset ->  The version of the style of resource contents. This should be mapped to the allowable profiles for this and supporting resources.
    originalRuleset ->  The style (standard) and version of the original material which was converted into this resource.
    created ->  The date when the enclosed suite of services were performed or completed.
    inforce ->  Flag indicating if the coverage provided is inforce currently  if no service date(s) specified or for the whole duration of the service dates.
    contract ->  The contract resource which may provide more detailed information.
    form ->  The form to be used for printing the content.
    benefitBalance ->  Benefits and optionally current balances by Category.
    error ->  Mutually exclusive with Services Provided (Item).
    requestIdentifier ->  Original request resource reference.
    requestReference ->  Original request resource reference.
    organizationIdentifier ->  The Insurer who produced this adjudicated response.
    organizationReference ->  The Insurer who produced this adjudicated response.
    requestProviderIdentifier ->  The practitioner who is responsible for the services rendered to the patient.
    requestProviderReference ->  The practitioner who is responsible for the services rendered to the patient.
    requestOrganizationIdentifier ->  The organization which is responsible for the services rendered to the patient.
    requestOrganizationReference ->  The organization which is responsible for the services rendered to the patient.

    # Search parameters
        EligibilityResponse.search.identifier
    '''
    # search parameters
    par = [("identifier", "token")]

    search = Params(par, "EligibilityResponse")


    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'identifier':
                    list_to_add.append(Identifier(obj))
                elif key == 'benefitBalance':
                    list_to_add.append(EligibilityResponseBenefitBalanceComponent(obj))
                elif key == 'error':
                    list_to_add.append(EligibilityResponseErrorComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR EligibilityResponse __new__
        '''
        if json == None:
            return None
        else:
            return super(EligibilityResponse, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR EligibilityResponse constructor
        '''
        logging.info("FHIR EligibilityResponse: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "EligibilityResponse"
        if 'identifier' in self.__json:
            if isinstance(self.__json['identifier'], list):
                self.identifier = self.__add_list('identifier')
            else:
                self.identifier = Identifier(self.__add('identifier'))
        else:
            self.identifier = None
        self.outcome = self.__add('outcome')
        self.disposition = self.__add('disposition')
        self.ruleset = Coding(self.__add('ruleset'))
        self.originalRuleset = Coding(self.__add('originalRuleset'))
        self.created = DateTime(self.__add('created'))
        self.inforce = Boolean(self.__add('inforce'))
        self.contract = Reference(self.__add('contract'))
        self.form = Coding(self.__add('form'))
        if 'benefitBalance' in self.__json:
            if isinstance(self.__json['benefitBalance'], list):
                self.benefitBalance = self.__add_list('benefitBalance')
            else:
                self.benefitBalance = EligibilityResponseBenefitBalanceComponent(self.__add('benefitBalance'))
        else:
            self.benefitBalance = None
        if 'error' in self.__json:
            if isinstance(self.__json['error'], list):
                self.error = self.__add_list('error')
            else:
                self.error = EligibilityResponseErrorComponent(self.__add('error'))
        else:
            self.error = None
        self.requestIdentifier = Identifier(self.__add('requestIdentifier'))
        self.requestReference = Reference(self.__add('requestReference'))
        self.organizationIdentifier = Identifier(self.__add('organizationIdentifier'))
        self.organizationReference = Reference(self.__add('organizationReference'))
        self.requestProviderIdentifier = Identifier(self.__add('requestProviderIdentifier'))
        self.requestProviderReference = Reference(self.__add('requestProviderReference'))
        self.requestOrganizationIdentifier = Identifier(self.__add('requestOrganizationIdentifier'))
        self.requestOrganizationReference = Reference(self.__add('requestOrganizationReference'))


        # Parent Resource Init
        super(EligibilityResponse, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identifier:
            self.__json['identifier'] = self.__get_list(self.identifier)
        if self.outcome:
            self.__json['outcome'] = self.outcome
        if self.disposition:
            self.__json['disposition'] = self.disposition
        if self.ruleset:
            self.__json['ruleset'] = self.ruleset.json
        if self.originalRuleset:
            self.__json['originalRuleset'] = self.originalRuleset.json
        if self.created:
            self.__json['created'] = self.created.json
        if self.inforce:
            self.__json['inforce'] = self.inforce.json
        if self.contract:
            self.__json['contract'] = self.contract.json
        if self.form:
            self.__json['form'] = self.form.json
        if self.benefitBalance:
            self.__json['benefitBalance'] = self.__get_list(self.benefitBalance)
        if self.error:
            self.__json['error'] = self.__get_list(self.error)
        if self.requestIdentifier:
            self.__json['requestIdentifier'] = self.requestIdentifier.json
        if self.requestReference:
            self.__json['requestReference'] = self.requestReference.json
        if self.organizationIdentifier:
            self.__json['organizationIdentifier'] = self.organizationIdentifier.json
        if self.organizationReference:
            self.__json['organizationReference'] = self.organizationReference.json
        if self.requestProviderIdentifier:
            self.__json['requestProviderIdentifier'] = self.requestProviderIdentifier.json
        if self.requestProviderReference:
            self.__json['requestProviderReference'] = self.requestProviderReference.json
        if self.requestOrganizationIdentifier:
            self.__json['requestOrganizationIdentifier'] = self.requestOrganizationIdentifier.json
        if self.requestOrganizationReference:
            self.__json['requestOrganizationReference'] = self.requestOrganizationReference.json

        # Add json attributes
        self.__json = super(EligibilityResponse, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR EligibilityResponse string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class EncounterStatusHistoryComponent(BackboneElement):
    '''
    FHIR EncounterStatusHistoryComponent resource

     The status history permits the encounter resource to contain the status history without needing to read through the historical versions of the resource, or even have the server store them.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR EncounterStatusHistoryComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(EncounterStatusHistoryComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR EncounterStatusHistoryComponent constructor
        '''
        logging.info("FHIR EncounterStatusHistoryComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.status = self.__add('status')
        self.period = Period(self.__add('period'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.status:
            self.__json['status'] = self.status
        if self.period:
            self.__json['period'] = self.period.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR EncounterStatusHistoryComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class EncounterParticipantComponent(BackboneElement):
    '''
    FHIR EncounterParticipantComponent resource

     Thelist ofpeopleresponsible for providing the service.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'type':
                    list_to_add.append(CodeableConcept(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR EncounterParticipantComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(EncounterParticipantComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR EncounterParticipantComponent constructor
        '''
        logging.info("FHIR EncounterParticipantComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        if 'type' in self.__json:
            if isinstance(self.__json['type'], list):
                self.type = self.__add_list('type')
            else:
                self.type = CodeableConcept(self.__add('type'))
        else:
            self.type = None
        self.period = Period(self.__add('period'))
        self.individual = Reference(self.__add('individual'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.type:
            self.__json['type'] = self.__get_list(self.type)
        if self.period:
            self.__json['period'] = self.period.json
        if self.individual:
            self.__json['individual'] = self.individual.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR EncounterParticipantComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class EncounterHospitalizationComponent(BackboneElement):
    '''
    FHIR EncounterHospitalizationComponent resource

     Details about the admission to a healthcare service.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'admittingDiagnosis':
                    list_to_add.append(Reference(obj))
                elif key == 'dietPreference':
                    list_to_add.append(CodeableConcept(obj))
                elif key == 'specialCourtesy':
                    list_to_add.append(CodeableConcept(obj))
                elif key == 'specialArrangement':
                    list_to_add.append(CodeableConcept(obj))
                elif key == 'dischargeDiagnosis':
                    list_to_add.append(Reference(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR EncounterHospitalizationComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(EncounterHospitalizationComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR EncounterHospitalizationComponent constructor
        '''
        logging.info("FHIR EncounterHospitalizationComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.preAdmissionIdentifier = Identifier(self.__add('preAdmissionIdentifier'))
        self.origin = Reference(self.__add('origin'))
        self.admitSource = CodeableConcept(self.__add('admitSource'))
        if 'admittingDiagnosis' in self.__json:
            if isinstance(self.__json['admittingDiagnosis'], list):
                self.admittingDiagnosis = self.__add_list('admittingDiagnosis')
            else:
                self.admittingDiagnosis = Reference(self.__add('admittingDiagnosis'))
        else:
            self.admittingDiagnosis = None
        self.reAdmission = CodeableConcept(self.__add('reAdmission'))
        if 'dietPreference' in self.__json:
            if isinstance(self.__json['dietPreference'], list):
                self.dietPreference = self.__add_list('dietPreference')
            else:
                self.dietPreference = CodeableConcept(self.__add('dietPreference'))
        else:
            self.dietPreference = None
        if 'specialCourtesy' in self.__json:
            if isinstance(self.__json['specialCourtesy'], list):
                self.specialCourtesy = self.__add_list('specialCourtesy')
            else:
                self.specialCourtesy = CodeableConcept(self.__add('specialCourtesy'))
        else:
            self.specialCourtesy = None
        if 'specialArrangement' in self.__json:
            if isinstance(self.__json['specialArrangement'], list):
                self.specialArrangement = self.__add_list('specialArrangement')
            else:
                self.specialArrangement = CodeableConcept(self.__add('specialArrangement'))
        else:
            self.specialArrangement = None
        self.destination = Reference(self.__add('destination'))
        self.dischargeDisposition = CodeableConcept(self.__add('dischargeDisposition'))
        if 'dischargeDiagnosis' in self.__json:
            if isinstance(self.__json['dischargeDiagnosis'], list):
                self.dischargeDiagnosis = self.__add_list('dischargeDiagnosis')
            else:
                self.dischargeDiagnosis = Reference(self.__add('dischargeDiagnosis'))
        else:
            self.dischargeDiagnosis = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.preAdmissionIdentifier:
            self.__json['preAdmissionIdentifier'] = self.preAdmissionIdentifier.json
        if self.origin:
            self.__json['origin'] = self.origin.json
        if self.admitSource:
            self.__json['admitSource'] = self.admitSource.json
        if self.admittingDiagnosis:
            self.__json['admittingDiagnosis'] = self.__get_list(self.admittingDiagnosis)
        if self.reAdmission:
            self.__json['reAdmission'] = self.reAdmission.json
        if self.dietPreference:
            self.__json['dietPreference'] = self.__get_list(self.dietPreference)
        if self.specialCourtesy:
            self.__json['specialCourtesy'] = self.__get_list(self.specialCourtesy)
        if self.specialArrangement:
            self.__json['specialArrangement'] = self.__get_list(self.specialArrangement)
        if self.destination:
            self.__json['destination'] = self.destination.json
        if self.dischargeDisposition:
            self.__json['dischargeDisposition'] = self.dischargeDisposition.json
        if self.dischargeDiagnosis:
            self.__json['dischargeDiagnosis'] = self.__get_list(self.dischargeDiagnosis)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR EncounterHospitalizationComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class EncounterLocationComponent(BackboneElement):
    '''
    FHIR EncounterLocationComponent resource

     List of locations where  the patient has been during this encounter.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR EncounterLocationComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(EncounterLocationComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR EncounterLocationComponent constructor
        '''
        logging.info("FHIR EncounterLocationComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.location = Reference(self.__add('location'))
        self.status = self.__add('status')
        self.period = Period(self.__add('period'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.location:
            self.__json['location'] = self.location.json
        if self.status:
            self.__json['status'] = self.status
        if self.period:
            self.__json['period'] = self.period.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR EncounterLocationComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class Encounter(DomainResource):
    '''
    FHIR Encounter resource

     An interaction between a patient and healthcare provider(s) for the purpose of providing healthcare service(s) or assessing the health status of a patient. If the element is present, it must have either a @value, an @id, or extensions

    identifier ->  Identifier(s) by which this encounter is known.
    status ->  planned | arrived | in-progress | onleave | finished | cancelled. 
    statusHistory ->  The status history permits the encounter resource to contain the status history without needing to read through the historical versions of the resource, or even have the server store them.
    class_ ->  inpatient | outpatient | ambulatory | emergency +. 
    type ->  Specific type of encounter (e.g. e-mail consultation, surgical day-care, skilled nursing, rehabilitation).
    priority ->  Indicates the urgency of the encounter.
    patient ->  The patient present at the encounter.
    episodeOfCare ->  Where a specific encounter should be classified as a part of a specific episode(s) of care this field should be used. This association can facilitate grouping of related encounters together for a specific purpose, such as government reporting, issue tracking, association via a common problem.  The association is recorded on the encounter as these are typically created after the episode of care, and grouped on entry rather than editing the episode of care to append another encounter to it (the episode of care could span years).
    incomingReferral ->  The referral request this encounter satisfies (incoming referral).
    participant ->  Thelist ofpeopleresponsible for providing the service.
    appointment ->  The appointment that scheduled this encounter.
    period ->  The start and end time of the encounter.
    length ->  Quantity of time the encounter lasted. This excludes the time during leaves of absence.
    reason ->  Reason the encounter takes place, expressed as a code. For admissions, this can be used for a coded admission diagnosis.
    indication ->  Reason the encounter takes place, as specified using information from another resource. For admissions, this is the admission diagnosis. The indication will typically be a Condition (with other resources referenced in the evidence.detail), or a Procedure.
    hospitalization ->  Details about the admission to a healthcare service.
    location ->  List of locations where  the patient has been during this encounter.
    serviceProvider ->  An organization that is in charge of maintaining the information of this Encounter (e.g. who maintains the report or the master service catalog item, etc.). This MAY be the same as the organization on the Patient record, however it could be different. This MAY not be not the Service Delivery Location's Organization.
    partOf ->  Another Encounter of which this encounter is a part of (administratively or in time).

    # Search parameters
        Encounter.search.appointment
        Encounter.search.condition
        Encounter.search.date
        Encounter.search.episodeofcare
        Encounter.search.identifier
        Encounter.search.incomingreferral
        Encounter.search.indication
        Encounter.search.length
        Encounter.search.location
        Encounter.search.location-period
        Encounter.search.part-of
        Encounter.search.participant
        Encounter.search.participant-type
        Encounter.search.patient
        Encounter.search.practitioner
        Encounter.search.procedure
        Encounter.search.reason
        Encounter.search.special-arrangement
        Encounter.search.status
        Encounter.search.type
    '''
    # search parameters
    par = [("appointment", "reference"),
           ("condition", "reference"),
           ("date", "date"),
           ("episodeofcare", "reference"),
           ("identifier", "token"),
           ("incomingreferral", "reference"),
           ("indication", "reference"),
           ("length", "number"),
           ("location", "reference"),
           ("location-period", "date"),
           ("part-of", "reference"),
           ("participant", "reference"),
           ("participant-type", "token"),
           ("patient", "reference"),
           ("practitioner", "reference"),
           ("procedure", "reference"),
           ("reason", "token"),
           ("special-arrangement", "token"),
           ("status", "token"),
           ("type", "token")]

    search = Params(par, "Encounter")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'identifier':
                    list_to_add.append(Identifier(obj))
                elif key == 'statusHistory':
                    list_to_add.append(EncounterStatusHistoryComponent(obj))
                elif key == 'type':
                    list_to_add.append(CodeableConcept(obj))
                elif key == 'episodeOfCare':
                    list_to_add.append(Reference(obj))
                elif key == 'incomingReferral':
                    list_to_add.append(Reference(obj))
                elif key == 'participant':
                    list_to_add.append(EncounterParticipantComponent(obj))
                elif key == 'reason':
                    list_to_add.append(CodeableConcept(obj))
                elif key == 'indication':
                    list_to_add.append(Reference(obj))
                elif key == 'location':
                    list_to_add.append(EncounterLocationComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR Encounter __new__
        '''
        if json == None:
            return None
        else:
            return super(Encounter, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR Encounter constructor
        '''
        logging.info("FHIR Encounter: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "Encounter"
        if 'identifier' in self.__json:
            if isinstance(self.__json['identifier'], list):
                self.identifier = self.__add_list('identifier')
            else:
                self.identifier = Identifier(self.__add('identifier'))
        else:
            self.identifier = None
        self.status = self.__add('status')
        if 'statusHistory' in self.__json:
            if isinstance(self.__json['statusHistory'], list):
                self.statusHistory = self.__add_list('statusHistory')
            else:
                self.statusHistory = EncounterStatusHistoryComponent(self.__add('statusHistory'))
        else:
            self.statusHistory = None
        self.class_ = self.__add('class_')
        if 'type' in self.__json:
            if isinstance(self.__json['type'], list):
                self.type = self.__add_list('type')
            else:
                self.type = CodeableConcept(self.__add('type'))
        else:
            self.type = None
        self.priority = CodeableConcept(self.__add('priority'))
        self.patient = Reference(self.__add('patient'))
        if 'episodeOfCare' in self.__json:
            if isinstance(self.__json['episodeOfCare'], list):
                self.episodeOfCare = self.__add_list('episodeOfCare')
            else:
                self.episodeOfCare = Reference(self.__add('episodeOfCare'))
        else:
            self.episodeOfCare = None
        if 'incomingReferral' in self.__json:
            if isinstance(self.__json['incomingReferral'], list):
                self.incomingReferral = self.__add_list('incomingReferral')
            else:
                self.incomingReferral = Reference(self.__add('incomingReferral'))
        else:
            self.incomingReferral = None
        if 'participant' in self.__json:
            if isinstance(self.__json['participant'], list):
                self.participant = self.__add_list('participant')
            else:
                self.participant = EncounterParticipantComponent(self.__add('participant'))
        else:
            self.participant = None
        self.appointment = Reference(self.__add('appointment'))
        self.period = Period(self.__add('period'))
        self.length = Duration(self.__add('length'))
        if 'reason' in self.__json:
            if isinstance(self.__json['reason'], list):
                self.reason = self.__add_list('reason')
            else:
                self.reason = CodeableConcept(self.__add('reason'))
        else:
            self.reason = None
        if 'indication' in self.__json:
            if isinstance(self.__json['indication'], list):
                self.indication = self.__add_list('indication')
            else:
                self.indication = Reference(self.__add('indication'))
        else:
            self.indication = None
        self.hospitalization = EncounterHospitalizationComponent(self.__add('hospitalization'))
        if 'location' in self.__json:
            if isinstance(self.__json['location'], list):
                self.location = self.__add_list('location')
            else:
                self.location = EncounterLocationComponent(self.__add('location'))
        else:
            self.location = None
        self.serviceProvider = Reference(self.__add('serviceProvider'))
        self.partOf = Reference(self.__add('partOf'))


        # Parent Resource Init
        super(Encounter, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identifier:
            self.__json['identifier'] = self.__get_list(self.identifier)
        if self.status:
            self.__json['status'] = self.status
        if self.statusHistory:
            self.__json['statusHistory'] = self.__get_list(self.statusHistory)
        if self.class_:
            self.__json['class_'] = self.class_
        if self.type:
            self.__json['type'] = self.__get_list(self.type)
        if self.priority:
            self.__json['priority'] = self.priority.json
        if self.patient:
            self.__json['patient'] = self.patient.json
        if self.episodeOfCare:
            self.__json['episodeOfCare'] = self.__get_list(self.episodeOfCare)
        if self.incomingReferral:
            self.__json['incomingReferral'] = self.__get_list(self.incomingReferral)
        if self.participant:
            self.__json['participant'] = self.__get_list(self.participant)
        if self.appointment:
            self.__json['appointment'] = self.appointment.json
        if self.period:
            self.__json['period'] = self.period.json
        if self.length:
            self.__json['length'] = self.length.json
        if self.reason:
            self.__json['reason'] = self.__get_list(self.reason)
        if self.indication:
            self.__json['indication'] = self.__get_list(self.indication)
        if self.hospitalization:
            self.__json['hospitalization'] = self.hospitalization.json
        if self.location:
            self.__json['location'] = self.__get_list(self.location)
        if self.serviceProvider:
            self.__json['serviceProvider'] = self.serviceProvider.json
        if self.partOf:
            self.__json['partOf'] = self.partOf.json

        # Add json attributes
        self.__json = super(Encounter, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR Encounter string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class EnrollmentRequest(DomainResource):
    '''
    FHIR EnrollmentRequest resource

     This resource provides the insurance enrollment details to the insurer regarding a specified coverage. If the element is present, it must have either a @value, an @id, or extensions

    identifier ->  The Response business identifier.
    ruleset ->  The version of the style of resource contents. This should be mapped to the allowable profiles for this and supporting resources.
    originalRuleset ->  The style (standard) and version of the original material which was converted into this resource.
    created ->  The date when this resource was created.
    target ->  The Insurer who is target  of the request.
    provider ->  The practitioner who is responsible for the services rendered to the patient.
    organization ->  The organization which is responsible for the services rendered to the patient.
    subject ->  Patient Resource.
    coverage ->  Reference to the program or plan identification, underwriter or payor.
    relationship ->  The relationship of the patient to the subscriber.

    # Search parameters
        EnrollmentRequest.search.identifier
        EnrollmentRequest.search.patient
        EnrollmentRequest.search.subject
    '''
    # search parameters
    par = [("identifier", "token"),
           ("patient", "reference"),
           ("subject", "reference")]

    search = Params(par, "EnrollmentRequest")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'identifier':
                    list_to_add.append(Identifier(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR EnrollmentRequest __new__
        '''
        if json == None:
            return None
        else:
            return super(EnrollmentRequest, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR EnrollmentRequest constructor
        '''
        logging.info("FHIR EnrollmentRequest: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "EnrollmentRequest"
        if 'identifier' in self.__json:
            if isinstance(self.__json['identifier'], list):
                self.identifier = self.__add_list('identifier')
            else:
                self.identifier = Identifier(self.__add('identifier'))
        else:
            self.identifier = None
        self.ruleset = Coding(self.__add('ruleset'))
        self.originalRuleset = Coding(self.__add('originalRuleset'))
        self.created = DateTime(self.__add('created'))
        self.target = Reference(self.__add('target'))
        self.provider = Reference(self.__add('provider'))
        self.organization = Reference(self.__add('organization'))
        self.subject = Reference(self.__add('subject'))
        self.coverage = Reference(self.__add('coverage'))
        self.relationship = Coding(self.__add('relationship'))


        # Parent Resource Init
        super(EnrollmentRequest, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identifier:
            self.__json['identifier'] = self.__get_list(self.identifier)
        if self.ruleset:
            self.__json['ruleset'] = self.ruleset.json
        if self.originalRuleset:
            self.__json['originalRuleset'] = self.originalRuleset.json
        if self.created:
            self.__json['created'] = self.created.json
        if self.target:
            self.__json['target'] = self.target.json
        if self.provider:
            self.__json['provider'] = self.provider.json
        if self.organization:
            self.__json['organization'] = self.organization.json
        if self.subject:
            self.__json['subject'] = self.subject.json
        if self.coverage:
            self.__json['coverage'] = self.coverage.json
        if self.relationship:
            self.__json['relationship'] = self.relationship.json

        # Add json attributes
        self.__json = super(EnrollmentRequest, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR EnrollmentRequest string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class EnrollmentResponse(DomainResource):
    '''
    FHIR EnrollmentResponse resource

     This resource provides enrollment and plan details from the processing of an Enrollment resource. If the element is present, it must have either a @value, an @id, or extensions

    identifier ->  The Response business identifier.
    request ->  Original request resource reference.
    outcome ->  Transaction status: error, complete. 
    disposition ->  A description of the status of the adjudication.
    ruleset ->  The version of the style of resource contents. This should be mapped to the allowable profiles for this and supporting resources.
    originalRuleset ->  The style (standard) and version of the original material which was converted into this resource.
    created ->  The date when the enclosed suite of services were performed or completed.
    organization ->  The Insurer who produced this adjudicated response.
    requestProvider ->  The practitioner who is responsible for the services rendered to the patient.
    requestOrganization ->  The organization which is responsible for the services rendered to the patient.

    # Search parameters
        EnrollmentResponse.search.identifier
    '''
    # search parameters
    par = [("identifier", "token")]

    search = Params(par, "EnrollmentResponse")


    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'identifier':
                    list_to_add.append(Identifier(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR EnrollmentResponse __new__
        '''
        if json == None:
            return None
        else:
            return super(EnrollmentResponse, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR EnrollmentResponse constructor
        '''
        logging.info("FHIR EnrollmentResponse: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "EnrollmentResponse"
        if 'identifier' in self.__json:
            if isinstance(self.__json['identifier'], list):
                self.identifier = self.__add_list('identifier')
            else:
                self.identifier = Identifier(self.__add('identifier'))
        else:
            self.identifier = None
        self.request = Reference(self.__add('request'))
        self.outcome = self.__add('outcome')
        self.disposition = self.__add('disposition')
        self.ruleset = Coding(self.__add('ruleset'))
        self.originalRuleset = Coding(self.__add('originalRuleset'))
        self.created = DateTime(self.__add('created'))
        self.organization = Reference(self.__add('organization'))
        self.requestProvider = Reference(self.__add('requestProvider'))
        self.requestOrganization = Reference(self.__add('requestOrganization'))


        # Parent Resource Init
        super(EnrollmentResponse, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identifier:
            self.__json['identifier'] = self.__get_list(self.identifier)
        if self.request:
            self.__json['request'] = self.request.json
        if self.outcome:
            self.__json['outcome'] = self.outcome
        if self.disposition:
            self.__json['disposition'] = self.disposition
        if self.ruleset:
            self.__json['ruleset'] = self.ruleset.json
        if self.originalRuleset:
            self.__json['originalRuleset'] = self.originalRuleset.json
        if self.created:
            self.__json['created'] = self.created.json
        if self.organization:
            self.__json['organization'] = self.organization.json
        if self.requestProvider:
            self.__json['requestProvider'] = self.requestProvider.json
        if self.requestOrganization:
            self.__json['requestOrganization'] = self.requestOrganization.json

        # Add json attributes
        self.__json = super(EnrollmentResponse, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR EnrollmentResponse string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class EpisodeOfCareStatusHistoryComponent(BackboneElement):
    '''
    FHIR EpisodeOfCareStatusHistoryComponent resource

     The history of statuses that the EpisodeOfCare has been through (without requiring processing the history of the resource).

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR EpisodeOfCareStatusHistoryComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(EpisodeOfCareStatusHistoryComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR EpisodeOfCareStatusHistoryComponent constructor
        '''
        logging.info("FHIR EpisodeOfCareStatusHistoryComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.status = self.__add('status')
        self.period = Period(self.__add('period'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.status:
            self.__json['status'] = self.status
        if self.period:
            self.__json['period'] = self.period.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR EpisodeOfCareStatusHistoryComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class EpisodeOfCare(DomainResource):
    '''
    FHIR EpisodeOfCare resource

     An association between a patient and an organization / healthcare provider(s) during which time encounters may occur. The managing organization assumes a level of responsibility for the patient during this time. If the element is present, it must have either a @value, an @id, or extensions

    identifier ->  Identifier(s) by which this EpisodeOfCare is known.
    status ->  planned | waitlist | active | onhold | finished | cancelled. 
    statusHistory ->  The history of statuses that the EpisodeOfCare has been through (without requiring processing the history of the resource).
    type ->  A classification of the type of episode of care; e.g. specialist referral, disease management, type of funded care.
    condition ->  A list of conditions/problems/diagnoses that this episode of care is intended to be providing care for.
    patient ->  The patient that this EpisodeOfCare applies to.
    managingOrganization ->  The organization that has assumed the specific responsibilities for the specified duration.
    period ->  The interval during which the managing organization assumes the defined responsibility.
    referralRequest ->  Referral Request(s) that are fulfilled by this EpisodeOfCare, incoming referrals.
    careManager ->  The practitioner that is the care manager/care co-ordinator for this patient.
    team ->  The list of practitioners that may be facilitating this episode of care for specific purposes.

    # Search parameters
        EpisodeOfCare.search.care-manager
        EpisodeOfCare.search.condition
        EpisodeOfCare.search.date
        EpisodeOfCare.search.identifier
        EpisodeOfCare.search.incomingreferral
        EpisodeOfCare.search.organization
        EpisodeOfCare.search.patient
        EpisodeOfCare.search.status
        EpisodeOfCare.search.team-member
        EpisodeOfCare.search.type
    '''
    # search parameters
    par = [("care-manager", "reference"),
           ("condition", "reference"),
           ("date", "date"),
           ("identifier", "token"),
           ("incomingreferral", "reference"),
           ("organization", "reference"),
           ("patient", "reference"),
           ("status", "token"),
           ("team-member", "reference"),
           ("type", "token")]

    search = Params(par, "EpisodeOfCare")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'identifier':
                    list_to_add.append(Identifier(obj))
                elif key == 'statusHistory':
                    list_to_add.append(EpisodeOfCareStatusHistoryComponent(obj))
                elif key == 'type':
                    list_to_add.append(CodeableConcept(obj))
                elif key == 'condition':
                    list_to_add.append(Reference(obj))
                elif key == 'referralRequest':
                    list_to_add.append(Reference(obj))
                elif key == 'team':
                    list_to_add.append(Reference(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR EpisodeOfCare __new__
        '''
        if json == None:
            return None
        else:
            return super(EpisodeOfCare, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR EpisodeOfCare constructor
        '''
        logging.info("FHIR EpisodeOfCare: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "EpisodeOfCare"
        if 'identifier' in self.__json:
            if isinstance(self.__json['identifier'], list):
                self.identifier = self.__add_list('identifier')
            else:
                self.identifier = Identifier(self.__add('identifier'))
        else:
            self.identifier = None
        self.status = self.__add('status')
        if 'statusHistory' in self.__json:
            if isinstance(self.__json['statusHistory'], list):
                self.statusHistory = self.__add_list('statusHistory')
            else:
                self.statusHistory = EpisodeOfCareStatusHistoryComponent(self.__add('statusHistory'))
        else:
            self.statusHistory = None
        if 'type' in self.__json:
            if isinstance(self.__json['type'], list):
                self.type = self.__add_list('type')
            else:
                self.type = CodeableConcept(self.__add('type'))
        else:
            self.type = None
        if 'condition' in self.__json:
            if isinstance(self.__json['condition'], list):
                self.condition = self.__add_list('condition')
            else:
                self.condition = Reference(self.__add('condition'))
        else:
            self.condition = None
        self.patient = Reference(self.__add('patient'))
        self.managingOrganization = Reference(self.__add('managingOrganization'))
        self.period = Period(self.__add('period'))
        if 'referralRequest' in self.__json:
            if isinstance(self.__json['referralRequest'], list):
                self.referralRequest = self.__add_list('referralRequest')
            else:
                self.referralRequest = Reference(self.__add('referralRequest'))
        else:
            self.referralRequest = None
        self.careManager = Reference(self.__add('careManager'))
        if 'team' in self.__json:
            if isinstance(self.__json['team'], list):
                self.team = self.__add_list('team')
            else:
                self.team = Reference(self.__add('team'))
        else:
            self.team = None


        # Parent Resource Init
        super(EpisodeOfCare, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identifier:
            self.__json['identifier'] = self.__get_list(self.identifier)
        if self.status:
            self.__json['status'] = self.status
        if self.statusHistory:
            self.__json['statusHistory'] = self.__get_list(self.statusHistory)
        if self.type:
            self.__json['type'] = self.__get_list(self.type)
        if self.condition:
            self.__json['condition'] = self.__get_list(self.condition)
        if self.patient:
            self.__json['patient'] = self.patient.json
        if self.managingOrganization:
            self.__json['managingOrganization'] = self.managingOrganization.json
        if self.period:
            self.__json['period'] = self.period.json
        if self.referralRequest:
            self.__json['referralRequest'] = self.__get_list(self.referralRequest)
        if self.careManager:
            self.__json['careManager'] = self.careManager.json
        if self.team:
            self.__json['team'] = self.__get_list(self.team)

        # Add json attributes
        self.__json = super(EpisodeOfCare, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR EpisodeOfCare string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ExpansionProfileContactComponent(BackboneElement):
    '''
    FHIR ExpansionProfileContactComponent resource

     Contacts to assist a user in finding and communicating with the publisher.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'telecom':
                    list_to_add.append(ContactPoint(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ExpansionProfileContactComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ExpansionProfileContactComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ExpansionProfileContactComponent constructor
        '''
        logging.info("FHIR ExpansionProfileContactComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.name = self.__add('name')
        if 'telecom' in self.__json:
            if isinstance(self.__json['telecom'], list):
                self.telecom = self.__add_list('telecom')
            else:
                self.telecom = ContactPoint(self.__add('telecom'))
        else:
            self.telecom = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.name:
            self.__json['name'] = self.name
        if self.telecom:
            self.__json['telecom'] = self.__get_list(self.telecom)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ExpansionProfileContactComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ExpansionProfileIncludeComponent(BackboneElement):
    '''
    FHIR ExpansionProfileIncludeComponent resource

     Code systems to be included in value set expansions.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ExpansionProfileIncludeComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ExpansionProfileIncludeComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ExpansionProfileIncludeComponent constructor
        '''
        logging.info("FHIR ExpansionProfileIncludeComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ExpansionProfileIncludeComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ExpansionProfileExcludeComponent(BackboneElement):
    '''
    FHIR ExpansionProfileExcludeComponent resource

     Code systems to be excluded from value set expansions.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ExpansionProfileExcludeComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ExpansionProfileExcludeComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ExpansionProfileExcludeComponent constructor
        '''
        logging.info("FHIR ExpansionProfileExcludeComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ExpansionProfileExcludeComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ExpansionProfileCodeSystemComponent(BackboneElement):
    '''
    FHIR ExpansionProfileCodeSystemComponent resource

     A set of criteria that provide the constraints imposed on the value set expansion by including or excluding codes from specific code systems (or versions).

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ExpansionProfileCodeSystemComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ExpansionProfileCodeSystemComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ExpansionProfileCodeSystemComponent constructor
        '''
        logging.info("FHIR ExpansionProfileCodeSystemComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.include = ExpansionProfileIncludeComponent(self.__add('include'))
        self.exclude = ExpansionProfileExcludeComponent(self.__add('exclude'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.include:
            self.__json['include'] = self.include.json
        if self.exclude:
            self.__json['exclude'] = self.exclude.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ExpansionProfileCodeSystemComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ExpansionProfileInclude1Component(BackboneElement):
    '''
    FHIR ExpansionProfileInclude1Component resource

     Designations to be included.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ExpansionProfileInclude1Component __new__
        '''
        if json == None:
            return None
        else:
            return super(ExpansionProfileInclude1Component, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ExpansionProfileInclude1Component constructor
        '''
        logging.info("FHIR ExpansionProfileInclude1Component: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ExpansionProfileInclude1Component string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ExpansionProfileExclude1Component(BackboneElement):
    '''
    FHIR ExpansionProfileExclude1Component resource

     Designations to be excluded.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ExpansionProfileExclude1Component __new__
        '''
        if json == None:
            return None
        else:
            return super(ExpansionProfileExclude1Component, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ExpansionProfileExclude1Component constructor
        '''
        logging.info("FHIR ExpansionProfileExclude1Component: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ExpansionProfileExclude1Component string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ExpansionProfileDesignationComponent(BackboneElement):
    '''
    FHIR ExpansionProfileDesignationComponent resource

     A set of criteria that provide the constraints imposed on the value set expansion by including or excluding designations.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ExpansionProfileDesignationComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ExpansionProfileDesignationComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ExpansionProfileDesignationComponent constructor
        '''
        logging.info("FHIR ExpansionProfileDesignationComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.include = ExpansionProfileInclude1Component(self.__add('include'))
        self.exclude = ExpansionProfileExclude1Component(self.__add('exclude'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.include:
            self.__json['include'] = self.include.json
        if self.exclude:
            self.__json['exclude'] = self.exclude.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ExpansionProfileDesignationComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ExpansionProfile(DomainResource):
    '''
    FHIR ExpansionProfile resource

     Resource to define constraints on the Expansion of a FHIR ValueSet. If the element is present, it must have either a @value, an @id, or extensions

    url ->  An absolute URL that is used to identify this expansion profile when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this expansion profile is (or will be) published.
    identifier ->  Formal identifier that is used to identify this expansion profile when it is represented in other formats, or referenced in a specification, model, design or an instance.
    version ->  Used to identify this version of the expansion profile when it is referenced in a specification, model, design or instance.
    name ->  A free text natural language name for the expansion profile.
    status ->  The status of the expansion profile. 
    experimental ->  This expansion profile was authored for testing purposes (or education/evaluation/marketing), and is not intended for genuine production usage.
    publisher ->  The name of the individual or organization that published the expansion profile.
    contact ->  Contacts to assist a user in finding and communicating with the publisher.
    date ->  The date that the expansion profile status was last changed. The date must change when the business version changes, if it does, and it must change if the status code changes.
    description ->  A free text natural language description of the use of the expansion profile - reason for definition,  conditions of use, etc. The description may include a list of expected usages for the expansion profile and can also describe the approach taken to build the expansion profile.
    codeSystem ->  A set of criteria that provide the constraints imposed on the value set expansion by including or excluding codes from specific code systems (or versions).
    includeDesignations ->  Controls whether concept designations are to be included or excluded in value set expansions.
    designation ->  A set of criteria that provide the constraints imposed on the value set expansion by including or excluding designations.
    includeDefinition ->  Controls whether the value set definition is included or excluded in value set expansions.
    includeInactive ->  Controls whether inactive concepts are included or excluded in value set expansions.
    excludeNested ->  Controls whether or not the value set expansion includes nested codes (i.e. ValueSet.expansion.contains.contains).
    excludeNotForUI ->  Controls whether or not the value set expansion includes codes which cannot be displayed in user interfaces.
    excludePostCoordinated ->  Controls whether or not the value set expansion includes post coordinated codes.
    displayLanguage ->  Specifies the language to be used for description in the expansions i.e. the language to be used for ValueSet.expansion.contains.display.
    limitedExpansion ->  If the value set being expanded is incomplete (because it is too big to expand), return a limited expansion (a subset) with an indicator that expansion is incomplete.

    
    '''
    

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'contact':
                    list_to_add.append(ExpansionProfileContactComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ExpansionProfile __new__
        '''
        if json == None:
            return None
        else:
            return super(ExpansionProfile, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ExpansionProfile constructor
        '''
        logging.info("FHIR ExpansionProfile: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "ExpansionProfile"
        self.url = self.__add('url')
        self.identifier = Identifier(self.__add('identifier'))
        self.version = self.__add('version')
        self.name = self.__add('name')
        self.status = self.__add('status')
        self.experimental = Boolean(self.__add('experimental'))
        self.publisher = self.__add('publisher')
        if 'contact' in self.__json:
            if isinstance(self.__json['contact'], list):
                self.contact = self.__add_list('contact')
            else:
                self.contact = ExpansionProfileContactComponent(self.__add('contact'))
        else:
            self.contact = None
        self.date = DateTime(self.__add('date'))
        self.description = self.__add('description')
        self.codeSystem = ExpansionProfileCodeSystemComponent(self.__add('codeSystem'))
        self.includeDesignations = Boolean(self.__add('includeDesignations'))
        self.designation = ExpansionProfileDesignationComponent(self.__add('designation'))
        self.includeDefinition = Boolean(self.__add('includeDefinition'))
        self.includeInactive = Boolean(self.__add('includeInactive'))
        self.excludeNested = Boolean(self.__add('excludeNested'))
        self.excludeNotForUI = Boolean(self.__add('excludeNotForUI'))
        self.excludePostCoordinated = Boolean(self.__add('excludePostCoordinated'))
        self.displayLanguage = self.__add('displayLanguage')
        self.limitedExpansion = Boolean(self.__add('limitedExpansion'))


        # Parent Resource Init
        super(ExpansionProfile, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.url:
            self.__json['url'] = self.url
        if self.identifier:
            self.__json['identifier'] = self.identifier.json
        if self.version:
            self.__json['version'] = self.version
        if self.name:
            self.__json['name'] = self.name
        if self.status:
            self.__json['status'] = self.status
        if self.experimental:
            self.__json['experimental'] = self.experimental.json
        if self.publisher:
            self.__json['publisher'] = self.publisher
        if self.contact:
            self.__json['contact'] = self.__get_list(self.contact)
        if self.date:
            self.__json['date'] = self.date.json
        if self.description:
            self.__json['description'] = self.description
        if self.codeSystem:
            self.__json['codeSystem'] = self.codeSystem.json
        if self.includeDesignations:
            self.__json['includeDesignations'] = self.includeDesignations.json
        if self.designation:
            self.__json['designation'] = self.designation.json
        if self.includeDefinition:
            self.__json['includeDefinition'] = self.includeDefinition.json
        if self.includeInactive:
            self.__json['includeInactive'] = self.includeInactive.json
        if self.excludeNested:
            self.__json['excludeNested'] = self.excludeNested.json
        if self.excludeNotForUI:
            self.__json['excludeNotForUI'] = self.excludeNotForUI.json
        if self.excludePostCoordinated:
            self.__json['excludePostCoordinated'] = self.excludePostCoordinated.json
        if self.displayLanguage:
            self.__json['displayLanguage'] = self.displayLanguage
        if self.limitedExpansion:
            self.__json['limitedExpansion'] = self.limitedExpansion.json

        # Add json attributes
        self.__json = super(ExpansionProfile, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR ExpansionProfile string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ExplanationOfBenefitRelatedComponent(BackboneElement):
    '''
    FHIR ExplanationOfBenefitRelatedComponent resource

     Other claims which are related to this claim such as prior claim versions or for related services.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ExplanationOfBenefitRelatedComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ExplanationOfBenefitRelatedComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ExplanationOfBenefitRelatedComponent constructor
        '''
        logging.info("FHIR ExplanationOfBenefitRelatedComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.relationship = Coding(self.__add('relationship'))
        self.reference = Identifier(self.__add('reference'))
        self.claimIdentifier = Identifier(self.__add('claimIdentifier'))
        self.claimReference = Reference(self.__add('claimReference'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.relationship:
            self.__json['relationship'] = self.relationship.json
        if self.reference:
            self.__json['reference'] = self.reference.json
        if self.claimIdentifier:
            self.__json['claimIdentifier'] = self.claimIdentifier.json
        if self.claimReference:
            self.__json['claimReference'] = self.claimReference.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ExplanationOfBenefitRelatedComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ExplanationOfBenefitPayeeComponent(BackboneElement):
    '''
    FHIR ExplanationOfBenefitPayeeComponent resource

     The party to be reimbursed for the services.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ExplanationOfBenefitPayeeComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ExplanationOfBenefitPayeeComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ExplanationOfBenefitPayeeComponent constructor
        '''
        logging.info("FHIR ExplanationOfBenefitPayeeComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.type = Coding(self.__add('type'))
        self.partyIdentifier = Identifier(self.__add('partyIdentifier'))
        self.partyReference = Reference(self.__add('partyReference'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.type:
            self.__json['type'] = self.type.json
        if self.partyIdentifier:
            self.__json['partyIdentifier'] = self.partyIdentifier.json
        if self.partyReference:
            self.__json['partyReference'] = self.partyReference.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ExplanationOfBenefitPayeeComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ExplanationOfBenefitDiagnosisComponent(BackboneElement):
    '''
    FHIR ExplanationOfBenefitDiagnosisComponent resource

     Ordered list of patient diagnosis for which care is sought.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ExplanationOfBenefitDiagnosisComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ExplanationOfBenefitDiagnosisComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ExplanationOfBenefitDiagnosisComponent constructor
        '''
        logging.info("FHIR ExplanationOfBenefitDiagnosisComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.sequence = self.__add('sequence')
        self.diagnosis = Coding(self.__add('diagnosis'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.sequence:
            self.__json['sequence'] = self.sequence
        if self.diagnosis:
            self.__json['diagnosis'] = self.diagnosis.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ExplanationOfBenefitDiagnosisComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ExplanationOfBenefitProcedureComponent(BackboneElement):
    '''
    FHIR ExplanationOfBenefitProcedureComponent resource

     Ordered list of patient procedures performed to support the adjudication.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ExplanationOfBenefitProcedureComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ExplanationOfBenefitProcedureComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ExplanationOfBenefitProcedureComponent constructor
        '''
        logging.info("FHIR ExplanationOfBenefitProcedureComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.sequence = self.__add('sequence')
        self.date = DateTime(self.__add('date'))
        self.procedureCoding = Coding(self.__add('procedureCoding'))
        self.procedureReference = Reference(self.__add('procedureReference'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.sequence:
            self.__json['sequence'] = self.sequence
        if self.date:
            self.__json['date'] = self.date.json
        if self.procedureCoding:
            self.__json['procedureCoding'] = self.procedureCoding.json
        if self.procedureReference:
            self.__json['procedureReference'] = self.procedureReference.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ExplanationOfBenefitProcedureComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ExplanationOfBenefitCoverageComponent(BackboneElement):
    '''
    FHIR ExplanationOfBenefitCoverageComponent resource

     Financial instrument by which payment information for health care.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ExplanationOfBenefitCoverageComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ExplanationOfBenefitCoverageComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ExplanationOfBenefitCoverageComponent constructor
        '''
        logging.info("FHIR ExplanationOfBenefitCoverageComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        if 'preAuthRef' in self.__json:
            if isinstance(self.__json['preAuthRef'], list):
                self.preAuthRef = self.__add_list('preAuthRef')
            else:
                self.preAuthRef = self.__add('preAuthRef')
        else:
            self.preAuthRef = None
        self.coverageIdentifier = Identifier(self.__add('coverageIdentifier'))
        self.coverageReference = Reference(self.__add('coverageReference'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.preAuthRef:
            self.__json['preAuthRef'] = self.__get_list(self.preAuthRef)
        if self.coverageIdentifier:
            self.__json['coverageIdentifier'] = self.coverageIdentifier.json
        if self.coverageReference:
            self.__json['coverageReference'] = self.coverageReference.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ExplanationOfBenefitCoverageComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ExplanationOfBenefitOnsetComponent(BackboneElement):
    '''
    FHIR ExplanationOfBenefitOnsetComponent resource

     Period, start and last dates of aspects of the Condition or related services.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ExplanationOfBenefitOnsetComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ExplanationOfBenefitOnsetComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ExplanationOfBenefitOnsetComponent constructor
        '''
        logging.info("FHIR ExplanationOfBenefitOnsetComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.type = Coding(self.__add('type'))
        self.timeDate = Date(self.__add('timeDate'))
        self.timePeriod = Period(self.__add('timePeriod'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.type:
            self.__json['type'] = self.type.json
        if self.timeDate:
            self.__json['timeDate'] = self.timeDate.json
        if self.timePeriod:
            self.__json['timePeriod'] = self.timePeriod.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ExplanationOfBenefitOnsetComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ExplanationOfBenefitAdjudicationComponent(BackboneElement):
    '''
    FHIR ExplanationOfBenefitAdjudicationComponent resource

     The adjudications results.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ExplanationOfBenefitAdjudicationComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ExplanationOfBenefitAdjudicationComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ExplanationOfBenefitAdjudicationComponent constructor
        '''
        logging.info("FHIR ExplanationOfBenefitAdjudicationComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.category = Coding(self.__add('category'))
        self.reason = Coding(self.__add('reason'))
        self.amount = Money(self.__add('amount'))
        self.value = self.__add('value')



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.category:
            self.__json['category'] = self.category.json
        if self.reason:
            self.__json['reason'] = self.reason.json
        if self.amount:
            self.__json['amount'] = self.amount.json
        if self.value:
            self.__json['value'] = self.value


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ExplanationOfBenefitAdjudicationComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ExplanationOfBenefitAdjudication1Component(BackboneElement):
    '''
    FHIR ExplanationOfBenefitAdjudication1Component resource

     The adjudications results.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ExplanationOfBenefitAdjudication1Component __new__
        '''
        if json == None:
            return None
        else:
            return super(ExplanationOfBenefitAdjudication1Component, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ExplanationOfBenefitAdjudication1Component constructor
        '''
        logging.info("FHIR ExplanationOfBenefitAdjudication1Component: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.category = Coding(self.__add('category'))
        self.reason = Coding(self.__add('reason'))
        self.amount = Money(self.__add('amount'))
        self.value = self.__add('value')



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.category:
            self.__json['category'] = self.category.json
        if self.reason:
            self.__json['reason'] = self.reason.json
        if self.amount:
            self.__json['amount'] = self.amount.json
        if self.value:
            self.__json['value'] = self.value


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ExplanationOfBenefitAdjudication1Component string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ExplanationOfBenefitAdjudication2Component(BackboneElement):
    '''
    FHIR ExplanationOfBenefitAdjudication2Component resource

     The adjudications results.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ExplanationOfBenefitAdjudication2Component __new__
        '''
        if json == None:
            return None
        else:
            return super(ExplanationOfBenefitAdjudication2Component, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ExplanationOfBenefitAdjudication2Component constructor
        '''
        logging.info("FHIR ExplanationOfBenefitAdjudication2Component: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.category = Coding(self.__add('category'))
        self.reason = Coding(self.__add('reason'))
        self.amount = Money(self.__add('amount'))
        self.value = self.__add('value')



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.category:
            self.__json['category'] = self.category.json
        if self.reason:
            self.__json['reason'] = self.reason.json
        if self.amount:
            self.__json['amount'] = self.amount.json
        if self.value:
            self.__json['value'] = self.value


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ExplanationOfBenefitAdjudication2Component string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ExplanationOfBenefitSubDetailComponent(BackboneElement):
    '''
    FHIR ExplanationOfBenefitSubDetailComponent resource

     Third tier of goods and services.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'programCode':
                    list_to_add.append(Coding(obj))
                elif key == 'udi':
                    list_to_add.append(Reference(obj))
                elif key == 'adjudication':
                    list_to_add.append(ExplanationOfBenefitAdjudication2Component(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ExplanationOfBenefitSubDetailComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ExplanationOfBenefitSubDetailComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ExplanationOfBenefitSubDetailComponent constructor
        '''
        logging.info("FHIR ExplanationOfBenefitSubDetailComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.sequence = self.__add('sequence')
        self.type = Coding(self.__add('type'))
        self.service = Coding(self.__add('service'))
        if 'programCode' in self.__json:
            if isinstance(self.__json['programCode'], list):
                self.programCode = self.__add_list('programCode')
            else:
                self.programCode = Coding(self.__add('programCode'))
        else:
            self.programCode = None
        self.quantity = SimpleQuantity(self.__add('quantity'))
        self.unitPrice = Money(self.__add('unitPrice'))
        self.factor = self.__add('factor')
        self.points = self.__add('points')
        self.net = Money(self.__add('net'))
        if 'udi' in self.__json:
            if isinstance(self.__json['udi'], list):
                self.udi = self.__add_list('udi')
            else:
                self.udi = Reference(self.__add('udi'))
        else:
            self.udi = None
        if 'adjudication' in self.__json:
            if isinstance(self.__json['adjudication'], list):
                self.adjudication = self.__add_list('adjudication')
            else:
                self.adjudication = ExplanationOfBenefitAdjudication2Component(self.__add('adjudication'))
        else:
            self.adjudication = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.sequence:
            self.__json['sequence'] = self.sequence
        if self.type:
            self.__json['type'] = self.type.json
        if self.service:
            self.__json['service'] = self.service.json
        if self.programCode:
            self.__json['programCode'] = self.__get_list(self.programCode)
        if self.quantity:
            self.__json['quantity'] = self.quantity.json
        if self.unitPrice:
            self.__json['unitPrice'] = self.unitPrice.json
        if self.factor:
            self.__json['factor'] = self.factor
        if self.points:
            self.__json['points'] = self.points
        if self.net:
            self.__json['net'] = self.net.json
        if self.udi:
            self.__json['udi'] = self.__get_list(self.udi)
        if self.adjudication:
            self.__json['adjudication'] = self.__get_list(self.adjudication)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ExplanationOfBenefitSubDetailComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ExplanationOfBenefitDetailComponent(BackboneElement):
    '''
    FHIR ExplanationOfBenefitDetailComponent resource

     Second tier of goods and services.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'programCode':
                    list_to_add.append(Coding(obj))
                elif key == 'udi':
                    list_to_add.append(Reference(obj))
                elif key == 'adjudication':
                    list_to_add.append(ExplanationOfBenefitAdjudication1Component(obj))
                elif key == 'subDetail':
                    list_to_add.append(ExplanationOfBenefitSubDetailComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ExplanationOfBenefitDetailComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ExplanationOfBenefitDetailComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ExplanationOfBenefitDetailComponent constructor
        '''
        logging.info("FHIR ExplanationOfBenefitDetailComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.sequence = self.__add('sequence')
        self.type = Coding(self.__add('type'))
        self.service = Coding(self.__add('service'))
        if 'programCode' in self.__json:
            if isinstance(self.__json['programCode'], list):
                self.programCode = self.__add_list('programCode')
            else:
                self.programCode = Coding(self.__add('programCode'))
        else:
            self.programCode = None
        self.quantity = SimpleQuantity(self.__add('quantity'))
        self.unitPrice = Money(self.__add('unitPrice'))
        self.factor = self.__add('factor')
        self.points = self.__add('points')
        self.net = Money(self.__add('net'))
        if 'udi' in self.__json:
            if isinstance(self.__json['udi'], list):
                self.udi = self.__add_list('udi')
            else:
                self.udi = Reference(self.__add('udi'))
        else:
            self.udi = None
        if 'adjudication' in self.__json:
            if isinstance(self.__json['adjudication'], list):
                self.adjudication = self.__add_list('adjudication')
            else:
                self.adjudication = ExplanationOfBenefitAdjudication1Component(self.__add('adjudication'))
        else:
            self.adjudication = None
        if 'subDetail' in self.__json:
            if isinstance(self.__json['subDetail'], list):
                self.subDetail = self.__add_list('subDetail')
            else:
                self.subDetail = ExplanationOfBenefitSubDetailComponent(self.__add('subDetail'))
        else:
            self.subDetail = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.sequence:
            self.__json['sequence'] = self.sequence
        if self.type:
            self.__json['type'] = self.type.json
        if self.service:
            self.__json['service'] = self.service.json
        if self.programCode:
            self.__json['programCode'] = self.__get_list(self.programCode)
        if self.quantity:
            self.__json['quantity'] = self.quantity.json
        if self.unitPrice:
            self.__json['unitPrice'] = self.unitPrice.json
        if self.factor:
            self.__json['factor'] = self.factor
        if self.points:
            self.__json['points'] = self.points
        if self.net:
            self.__json['net'] = self.net.json
        if self.udi:
            self.__json['udi'] = self.__get_list(self.udi)
        if self.adjudication:
            self.__json['adjudication'] = self.__get_list(self.adjudication)
        if self.subDetail:
            self.__json['subDetail'] = self.__get_list(self.subDetail)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ExplanationOfBenefitDetailComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ExplanationOfBenefitProsthesisComponent(BackboneElement):
    '''
    FHIR ExplanationOfBenefitProsthesisComponent resource

     The materials and placement date of prior fixed prosthesis.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ExplanationOfBenefitProsthesisComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ExplanationOfBenefitProsthesisComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ExplanationOfBenefitProsthesisComponent constructor
        '''
        logging.info("FHIR ExplanationOfBenefitProsthesisComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.initial = Boolean(self.__add('initial'))
        self.priorDate = Date(self.__add('priorDate'))
        self.priorMaterial = Coding(self.__add('priorMaterial'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.initial:
            self.__json['initial'] = self.initial.json
        if self.priorDate:
            self.__json['priorDate'] = self.priorDate.json
        if self.priorMaterial:
            self.__json['priorMaterial'] = self.priorMaterial.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ExplanationOfBenefitProsthesisComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ExplanationOfBenefitItemComponent(BackboneElement):
    '''
    FHIR ExplanationOfBenefitItemComponent resource

     First tier of goods and services.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'serviceModifier':
                    list_to_add.append(Coding(obj))
                elif key == 'modifier':
                    list_to_add.append(Coding(obj))
                elif key == 'programCode':
                    list_to_add.append(Coding(obj))
                elif key == 'udi':
                    list_to_add.append(Reference(obj))
                elif key == 'subSite':
                    list_to_add.append(Coding(obj))
                elif key == 'adjudication':
                    list_to_add.append(ExplanationOfBenefitAdjudicationComponent(obj))
                elif key == 'detail':
                    list_to_add.append(ExplanationOfBenefitDetailComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ExplanationOfBenefitItemComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ExplanationOfBenefitItemComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ExplanationOfBenefitItemComponent constructor
        '''
        logging.info("FHIR ExplanationOfBenefitItemComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.sequence = self.__add('sequence')
        self.type = Coding(self.__add('type'))
        self.providerQualification = Coding(self.__add('providerQualification'))
        if 'diagnosisLinkId' in self.__json:
            if isinstance(self.__json['diagnosisLinkId'], list):
                self.diagnosisLinkId = self.__add_list('diagnosisLinkId')
            else:
                self.diagnosisLinkId = self.__add('diagnosisLinkId')
        else:
            self.diagnosisLinkId = None
        self.service = Coding(self.__add('service'))
        if 'serviceModifier' in self.__json:
            if isinstance(self.__json['serviceModifier'], list):
                self.serviceModifier = self.__add_list('serviceModifier')
            else:
                self.serviceModifier = Coding(self.__add('serviceModifier'))
        else:
            self.serviceModifier = None
        if 'modifier' in self.__json:
            if isinstance(self.__json['modifier'], list):
                self.modifier = self.__add_list('modifier')
            else:
                self.modifier = Coding(self.__add('modifier'))
        else:
            self.modifier = None
        if 'programCode' in self.__json:
            if isinstance(self.__json['programCode'], list):
                self.programCode = self.__add_list('programCode')
            else:
                self.programCode = Coding(self.__add('programCode'))
        else:
            self.programCode = None
        self.place = Coding(self.__add('place'))
        self.quantity = SimpleQuantity(self.__add('quantity'))
        self.unitPrice = Money(self.__add('unitPrice'))
        self.factor = self.__add('factor')
        self.points = self.__add('points')
        self.net = Money(self.__add('net'))
        if 'udi' in self.__json:
            if isinstance(self.__json['udi'], list):
                self.udi = self.__add_list('udi')
            else:
                self.udi = Reference(self.__add('udi'))
        else:
            self.udi = None
        self.bodySite = Coding(self.__add('bodySite'))
        if 'subSite' in self.__json:
            if isinstance(self.__json['subSite'], list):
                self.subSite = self.__add_list('subSite')
            else:
                self.subSite = Coding(self.__add('subSite'))
        else:
            self.subSite = None
        if 'noteNumber' in self.__json:
            if isinstance(self.__json['noteNumber'], list):
                self.noteNumber = self.__add_list('noteNumber')
            else:
                self.noteNumber = self.__add('noteNumber')
        else:
            self.noteNumber = None
        if 'adjudication' in self.__json:
            if isinstance(self.__json['adjudication'], list):
                self.adjudication = self.__add_list('adjudication')
            else:
                self.adjudication = ExplanationOfBenefitAdjudicationComponent(self.__add('adjudication'))
        else:
            self.adjudication = None
        if 'detail' in self.__json:
            if isinstance(self.__json['detail'], list):
                self.detail = self.__add_list('detail')
            else:
                self.detail = ExplanationOfBenefitDetailComponent(self.__add('detail'))
        else:
            self.detail = None
        self.prosthesis = ExplanationOfBenefitProsthesisComponent(self.__add('prosthesis'))
        self.providerIdentifier = Identifier(self.__add('providerIdentifier'))
        self.providerReference = Reference(self.__add('providerReference'))
        self.supervisorIdentifier = Identifier(self.__add('supervisorIdentifier'))
        self.supervisorReference = Reference(self.__add('supervisorReference'))
        self.servicedDate = Date(self.__add('servicedDate'))
        self.servicedPeriod = Period(self.__add('servicedPeriod'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.sequence:
            self.__json['sequence'] = self.sequence
        if self.type:
            self.__json['type'] = self.type.json
        if self.providerQualification:
            self.__json['providerQualification'] = self.providerQualification.json
        if self.diagnosisLinkId:
            self.__json['diagnosisLinkId'] = self.__get_list(self.diagnosisLinkId)
        if self.service:
            self.__json['service'] = self.service.json
        if self.serviceModifier:
            self.__json['serviceModifier'] = self.__get_list(self.serviceModifier)
        if self.modifier:
            self.__json['modifier'] = self.__get_list(self.modifier)
        if self.programCode:
            self.__json['programCode'] = self.__get_list(self.programCode)
        if self.place:
            self.__json['place'] = self.place.json
        if self.quantity:
            self.__json['quantity'] = self.quantity.json
        if self.unitPrice:
            self.__json['unitPrice'] = self.unitPrice.json
        if self.factor:
            self.__json['factor'] = self.factor
        if self.points:
            self.__json['points'] = self.points
        if self.net:
            self.__json['net'] = self.net.json
        if self.udi:
            self.__json['udi'] = self.__get_list(self.udi)
        if self.bodySite:
            self.__json['bodySite'] = self.bodySite.json
        if self.subSite:
            self.__json['subSite'] = self.__get_list(self.subSite)
        if self.noteNumber:
            self.__json['noteNumber'] = self.__get_list(self.noteNumber)
        if self.adjudication:
            self.__json['adjudication'] = self.__get_list(self.adjudication)
        if self.detail:
            self.__json['detail'] = self.__get_list(self.detail)
        if self.prosthesis:
            self.__json['prosthesis'] = self.prosthesis.json
        if self.providerIdentifier:
            self.__json['providerIdentifier'] = self.providerIdentifier.json
        if self.providerReference:
            self.__json['providerReference'] = self.providerReference.json
        if self.supervisorIdentifier:
            self.__json['supervisorIdentifier'] = self.supervisorIdentifier.json
        if self.supervisorReference:
            self.__json['supervisorReference'] = self.supervisorReference.json
        if self.servicedDate:
            self.__json['servicedDate'] = self.servicedDate.json
        if self.servicedPeriod:
            self.__json['servicedPeriod'] = self.servicedPeriod.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ExplanationOfBenefitItemComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ExplanationOfBenefitAdjudication3Component(BackboneElement):
    '''
    FHIR ExplanationOfBenefitAdjudication3Component resource

     The adjudications results.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ExplanationOfBenefitAdjudication3Component __new__
        '''
        if json == None:
            return None
        else:
            return super(ExplanationOfBenefitAdjudication3Component, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ExplanationOfBenefitAdjudication3Component constructor
        '''
        logging.info("FHIR ExplanationOfBenefitAdjudication3Component: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.category = Coding(self.__add('category'))
        self.reason = Coding(self.__add('reason'))
        self.amount = Money(self.__add('amount'))
        self.value = self.__add('value')



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.category:
            self.__json['category'] = self.category.json
        if self.reason:
            self.__json['reason'] = self.reason.json
        if self.amount:
            self.__json['amount'] = self.amount.json
        if self.value:
            self.__json['value'] = self.value


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ExplanationOfBenefitAdjudication3Component string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ExplanationOfBenefitDetail1Component(BackboneElement):
    '''
    FHIR ExplanationOfBenefitDetail1Component resource

     The second tier service adjudications for payor added services.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ExplanationOfBenefitDetail1Component __new__
        '''
        if json == None:
            return None
        else:
            return super(ExplanationOfBenefitDetail1Component, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ExplanationOfBenefitDetail1Component constructor
        '''
        logging.info("FHIR ExplanationOfBenefitDetail1Component: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ExplanationOfBenefitDetail1Component string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ExplanationOfBenefitAddItemComponent(BackboneElement):
    '''
    FHIR ExplanationOfBenefitAddItemComponent resource

     The first tier service adjudications for payor added services.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'adjudication':
                    list_to_add.append(ExplanationOfBenefitAdjudication3Component(obj))
                elif key == 'detail':
                    list_to_add.append(ExplanationOfBenefitDetail1Component(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ExplanationOfBenefitAddItemComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ExplanationOfBenefitAddItemComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ExplanationOfBenefitAddItemComponent constructor
        '''
        logging.info("FHIR ExplanationOfBenefitAddItemComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        if 'sequenceLinkId' in self.__json:
            if isinstance(self.__json['sequenceLinkId'], list):
                self.sequenceLinkId = self.__add_list('sequenceLinkId')
            else:
                self.sequenceLinkId = self.__add('sequenceLinkId')
        else:
            self.sequenceLinkId = None
        self.service = Coding(self.__add('service'))
        self.fee = Money(self.__add('fee'))
        if 'noteNumberLinkId' in self.__json:
            if isinstance(self.__json['noteNumberLinkId'], list):
                self.noteNumberLinkId = self.__add_list('noteNumberLinkId')
            else:
                self.noteNumberLinkId = self.__add('noteNumberLinkId')
        else:
            self.noteNumberLinkId = None
        if 'adjudication' in self.__json:
            if isinstance(self.__json['adjudication'], list):
                self.adjudication = self.__add_list('adjudication')
            else:
                self.adjudication = ExplanationOfBenefitAdjudication3Component(self.__add('adjudication'))
        else:
            self.adjudication = None
        if 'detail' in self.__json:
            if isinstance(self.__json['detail'], list):
                self.detail = self.__add_list('detail')
            else:
                self.detail = ExplanationOfBenefitDetail1Component(self.__add('detail'))
        else:
            self.detail = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.sequenceLinkId:
            self.__json['sequenceLinkId'] = self.__get_list(self.sequenceLinkId)
        if self.service:
            self.__json['service'] = self.service.json
        if self.fee:
            self.__json['fee'] = self.fee.json
        if self.noteNumberLinkId:
            self.__json['noteNumberLinkId'] = self.__get_list(self.noteNumberLinkId)
        if self.adjudication:
            self.__json['adjudication'] = self.__get_list(self.adjudication)
        if self.detail:
            self.__json['detail'] = self.__get_list(self.detail)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ExplanationOfBenefitAddItemComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ExplanationOfBenefitMissingTeethComponent(BackboneElement):
    '''
    FHIR ExplanationOfBenefitMissingTeethComponent resource

     A list of teeth which would be expected but are not found due to having been previously  extracted or for other reasons.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ExplanationOfBenefitMissingTeethComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ExplanationOfBenefitMissingTeethComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ExplanationOfBenefitMissingTeethComponent constructor
        '''
        logging.info("FHIR ExplanationOfBenefitMissingTeethComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.tooth = Coding(self.__add('tooth'))
        self.reason = Coding(self.__add('reason'))
        self.extractionDate = Date(self.__add('extractionDate'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.tooth:
            self.__json['tooth'] = self.tooth.json
        if self.reason:
            self.__json['reason'] = self.reason.json
        if self.extractionDate:
            self.__json['extractionDate'] = self.extractionDate.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ExplanationOfBenefitMissingTeethComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ExplanationOfBenefitNoteComponent(BackboneElement):
    '''
    FHIR ExplanationOfBenefitNoteComponent resource

     Note text.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ExplanationOfBenefitNoteComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ExplanationOfBenefitNoteComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ExplanationOfBenefitNoteComponent constructor
        '''
        logging.info("FHIR ExplanationOfBenefitNoteComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.number = self.__add('number')
        self.type = Coding(self.__add('type'))
        self.text = self.__add('text')



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.number:
            self.__json['number'] = self.number
        if self.type:
            self.__json['type'] = self.type.json
        if self.text:
            self.__json['text'] = self.text


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ExplanationOfBenefitNoteComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ExplanationOfBenefitFinancialComponent(BackboneElement):
    '''
    FHIR ExplanationOfBenefitFinancialComponent resource

     Benefits Used to date.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ExplanationOfBenefitFinancialComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ExplanationOfBenefitFinancialComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ExplanationOfBenefitFinancialComponent constructor
        '''
        logging.info("FHIR ExplanationOfBenefitFinancialComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ExplanationOfBenefitFinancialComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ExplanationOfBenefitBenefitBalanceComponent(BackboneElement):
    '''
    FHIR ExplanationOfBenefitBenefitBalanceComponent resource

     Balance by Benefit Category.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'financial':
                    list_to_add.append(ExplanationOfBenefitFinancialComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ExplanationOfBenefitBenefitBalanceComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ExplanationOfBenefitBenefitBalanceComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ExplanationOfBenefitBenefitBalanceComponent constructor
        '''
        logging.info("FHIR ExplanationOfBenefitBenefitBalanceComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.category = Coding(self.__add('category'))
        self.subCategory = Coding(self.__add('subCategory'))
        self.network = Coding(self.__add('network'))
        self.unit = Coding(self.__add('unit'))
        self.term = Coding(self.__add('term'))
        if 'financial' in self.__json:
            if isinstance(self.__json['financial'], list):
                self.financial = self.__add_list('financial')
            else:
                self.financial = ExplanationOfBenefitFinancialComponent(self.__add('financial'))
        else:
            self.financial = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.category:
            self.__json['category'] = self.category.json
        if self.subCategory:
            self.__json['subCategory'] = self.subCategory.json
        if self.network:
            self.__json['network'] = self.network.json
        if self.unit:
            self.__json['unit'] = self.unit.json
        if self.term:
            self.__json['term'] = self.term.json
        if self.financial:
            self.__json['financial'] = self.__get_list(self.financial)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ExplanationOfBenefitBenefitBalanceComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ExplanationOfBenefit(DomainResource):
    '''
    FHIR ExplanationOfBenefit resource

     This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided. If the element is present, it must have either a @value, an @id, or extensions

    identifier ->  The Response Business Identifier.
    subType ->  A finer grained suite of claim subtype codes which may convey Inpatient vs Outpatient and/or a specialty service. In the US the BillType.
    ruleset ->  The version of the specification on which this instance relies.
    originalRuleset ->  The version of the specification from which the original instance was created.
    created ->  The date when the EOB was created.
    billablePeriod ->  The billable period for which charges are being submitted.
    disposition ->  A description of the status of the adjudication.
    related ->  Other claims which are related to this claim such as prior claim versions or for related services.
    payee ->  The party to be reimbursed for the services.
    occurrenceCode ->  **Insert definition of Occurrence codes.
    occurenceSpanCode ->  **Insert definition of Occurrence Span codes.
    valueCode ->  **Insert definition of Value codes.
    diagnosis ->  Ordered list of patient diagnosis for which care is sought.
    procedure ->  Ordered list of patient procedures performed to support the adjudication.
    specialCondition ->  List of special conditions relating to the setting, treatment or patient  for which care is sought which may influence the adjudication.
    precedence ->  Precedence (primary, secondary, etc.).
    coverage ->  Financial instrument by which payment information for health care.
    accidentDate ->  Date of an accident which these services are addressing.
    accidentType ->  Type of accident: work, auto, etc.
    interventionException ->  A list of intervention and exception codes which may influence the adjudication of the claim.
    onset ->  Period, start and last dates of aspects of the Condition or related services.
    employmentImpacted ->  The start and optional end dates of when the patient was precluded from working due to the treatable condition(s).
    hospitalization ->  The start and optional end dates of when the patient was confined to a treatment center.
    item ->  First tier of goods and services.
    addItem ->  The first tier service adjudications for payor added services.
    missingTeeth ->  A list of teeth which would be expected but are not found due to having been previously  extracted or for other reasons.
    totalCost ->  The total cost of the services reported.
    unallocDeductable ->  The amount of deductable applied which was not allocated to any particular service line.
    totalBenefit ->  Total amount of benefit payable (Equal to sum of the Benefit amounts from all detail lines and additions less the Unallocated Deductable).
    paymentAdjustment ->  Adjustment to the payment of this transaction which is not related to adjudication of this transaction.
    paymentAdjustmentReason ->  Reason for the payment adjustment.
    paymentDate ->  Estimated payment data.
    paymentAmount ->  Payable less any payment adjustment.
    paymentRef ->  Payment identifer.
    reserved ->  Status of funds reservation (For provider, for Patient, None).
    form ->  The form to be used for printing the content.
    note ->  Note text.
    benefitBalance ->  Balance by Benefit Category.
    claimIdentifier ->  The business identifier for the instance: invoice number, claim number, pre-determination or pre-authorization number.
    claimReference ->  The business identifier for the instance: invoice number, claim number, pre-determination or pre-authorization number.
    claimResponseIdentifier ->  The business identifier for the instance: invoice number, claim number, pre-determination or pre-authorization number.
    claimResponseReference ->  The business identifier for the instance: invoice number, claim number, pre-determination or pre-authorization number.
    providerIdentifier ->  The provider which is responsible for the claim.
    providerReference ->  The provider which is responsible for the claim.
    organizationIdentifier ->  The provider which is responsible for the claim.
    organizationReference ->  The provider which is responsible for the claim.
    facilityIdentifier ->  Facility where the services were provided.
    facilityReference ->  Facility where the services were provided.
    prescriptionIdentifier ->  Prescription to support the dispensing of Pharmacy or Vision products.
    prescriptionReference ->  Prescription to support the dispensing of Pharmacy or Vision products.
    originalPrescriptionIdentifier ->  Original prescription which has been superceded by this prescription to support the dispensing of pharmacy services, medications or products.
    originalPrescriptionReference ->  Original prescription which has been superceded by this prescription to support the dispensing of pharmacy services, medications or products.
    referralIdentifier ->  The referral resource which lists the date, practitioner, reason and other supporting information.
    referralReference ->  The referral resource which lists the date, practitioner, reason and other supporting information.
    patientIdentifier ->  Patient Resource.
    patientReference ->  Patient Resource.
    accidentLocationAddress ->  Accident Place.
    accidentLocationReference ->  Accident Place.

    # Search parameters
        ExplanationOfBenefit.search.identifier
    '''
    # search parameters
    par = [("identifier", "token")]

    search = Params(par, "ExplanationOfBenefit")


    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'identifier':
                    list_to_add.append(Identifier(obj))
                elif key == 'subType':
                    list_to_add.append(Coding(obj))
                elif key == 'related':
                    list_to_add.append(ExplanationOfBenefitRelatedComponent(obj))
                elif key == 'occurrenceCode':
                    list_to_add.append(Coding(obj))
                elif key == 'occurenceSpanCode':
                    list_to_add.append(Coding(obj))
                elif key == 'valueCode':
                    list_to_add.append(Coding(obj))
                elif key == 'diagnosis':
                    list_to_add.append(ExplanationOfBenefitDiagnosisComponent(obj))
                elif key == 'procedure':
                    list_to_add.append(ExplanationOfBenefitProcedureComponent(obj))
                elif key == 'specialCondition':
                    list_to_add.append(Coding(obj))
                elif key == 'interventionException':
                    list_to_add.append(Coding(obj))
                elif key == 'onset':
                    list_to_add.append(ExplanationOfBenefitOnsetComponent(obj))
                elif key == 'item':
                    list_to_add.append(ExplanationOfBenefitItemComponent(obj))
                elif key == 'addItem':
                    list_to_add.append(ExplanationOfBenefitAddItemComponent(obj))
                elif key == 'missingTeeth':
                    list_to_add.append(ExplanationOfBenefitMissingTeethComponent(obj))
                elif key == 'note':
                    list_to_add.append(ExplanationOfBenefitNoteComponent(obj))
                elif key == 'benefitBalance':
                    list_to_add.append(ExplanationOfBenefitBenefitBalanceComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ExplanationOfBenefit __new__
        '''
        if json == None:
            return None
        else:
            return super(ExplanationOfBenefit, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ExplanationOfBenefit constructor
        '''
        logging.info("FHIR ExplanationOfBenefit: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "ExplanationOfBenefit"
        if 'identifier' in self.__json:
            if isinstance(self.__json['identifier'], list):
                self.identifier = self.__add_list('identifier')
            else:
                self.identifier = Identifier(self.__add('identifier'))
        else:
            self.identifier = None
        if 'subType' in self.__json:
            if isinstance(self.__json['subType'], list):
                self.subType = self.__add_list('subType')
            else:
                self.subType = Coding(self.__add('subType'))
        else:
            self.subType = None
        self.ruleset = Coding(self.__add('ruleset'))
        self.originalRuleset = Coding(self.__add('originalRuleset'))
        self.created = DateTime(self.__add('created'))
        self.billablePeriod = Period(self.__add('billablePeriod'))
        self.disposition = self.__add('disposition')
        if 'related' in self.__json:
            if isinstance(self.__json['related'], list):
                self.related = self.__add_list('related')
            else:
                self.related = ExplanationOfBenefitRelatedComponent(self.__add('related'))
        else:
            self.related = None
        self.payee = ExplanationOfBenefitPayeeComponent(self.__add('payee'))
        if 'occurrenceCode' in self.__json:
            if isinstance(self.__json['occurrenceCode'], list):
                self.occurrenceCode = self.__add_list('occurrenceCode')
            else:
                self.occurrenceCode = Coding(self.__add('occurrenceCode'))
        else:
            self.occurrenceCode = None
        if 'occurenceSpanCode' in self.__json:
            if isinstance(self.__json['occurenceSpanCode'], list):
                self.occurenceSpanCode = self.__add_list('occurenceSpanCode')
            else:
                self.occurenceSpanCode = Coding(self.__add('occurenceSpanCode'))
        else:
            self.occurenceSpanCode = None
        if 'valueCode' in self.__json:
            if isinstance(self.__json['valueCode'], list):
                self.valueCode = self.__add_list('valueCode')
            else:
                self.valueCode = Coding(self.__add('valueCode'))
        else:
            self.valueCode = None
        if 'diagnosis' in self.__json:
            if isinstance(self.__json['diagnosis'], list):
                self.diagnosis = self.__add_list('diagnosis')
            else:
                self.diagnosis = ExplanationOfBenefitDiagnosisComponent(self.__add('diagnosis'))
        else:
            self.diagnosis = None
        if 'procedure' in self.__json:
            if isinstance(self.__json['procedure'], list):
                self.procedure = self.__add_list('procedure')
            else:
                self.procedure = ExplanationOfBenefitProcedureComponent(self.__add('procedure'))
        else:
            self.procedure = None
        if 'specialCondition' in self.__json:
            if isinstance(self.__json['specialCondition'], list):
                self.specialCondition = self.__add_list('specialCondition')
            else:
                self.specialCondition = Coding(self.__add('specialCondition'))
        else:
            self.specialCondition = None
        self.precedence = self.__add('precedence')
        self.coverage = ExplanationOfBenefitCoverageComponent(self.__add('coverage'))
        self.accidentDate = Date(self.__add('accidentDate'))
        self.accidentType = Coding(self.__add('accidentType'))
        if 'interventionException' in self.__json:
            if isinstance(self.__json['interventionException'], list):
                self.interventionException = self.__add_list('interventionException')
            else:
                self.interventionException = Coding(self.__add('interventionException'))
        else:
            self.interventionException = None
        if 'onset' in self.__json:
            if isinstance(self.__json['onset'], list):
                self.onset = self.__add_list('onset')
            else:
                self.onset = ExplanationOfBenefitOnsetComponent(self.__add('onset'))
        else:
            self.onset = None
        self.employmentImpacted = Period(self.__add('employmentImpacted'))
        self.hospitalization = Period(self.__add('hospitalization'))
        if 'item' in self.__json:
            if isinstance(self.__json['item'], list):
                self.item = self.__add_list('item')
            else:
                self.item = ExplanationOfBenefitItemComponent(self.__add('item'))
        else:
            self.item = None
        if 'addItem' in self.__json:
            if isinstance(self.__json['addItem'], list):
                self.addItem = self.__add_list('addItem')
            else:
                self.addItem = ExplanationOfBenefitAddItemComponent(self.__add('addItem'))
        else:
            self.addItem = None
        if 'missingTeeth' in self.__json:
            if isinstance(self.__json['missingTeeth'], list):
                self.missingTeeth = self.__add_list('missingTeeth')
            else:
                self.missingTeeth = ExplanationOfBenefitMissingTeethComponent(self.__add('missingTeeth'))
        else:
            self.missingTeeth = None
        self.totalCost = Money(self.__add('totalCost'))
        self.unallocDeductable = Money(self.__add('unallocDeductable'))
        self.totalBenefit = Money(self.__add('totalBenefit'))
        self.paymentAdjustment = Money(self.__add('paymentAdjustment'))
        self.paymentAdjustmentReason = Coding(self.__add('paymentAdjustmentReason'))
        self.paymentDate = Date(self.__add('paymentDate'))
        self.paymentAmount = Money(self.__add('paymentAmount'))
        self.paymentRef = Identifier(self.__add('paymentRef'))
        self.reserved = Coding(self.__add('reserved'))
        self.form = Coding(self.__add('form'))
        if 'note' in self.__json:
            if isinstance(self.__json['note'], list):
                self.note = self.__add_list('note')
            else:
                self.note = ExplanationOfBenefitNoteComponent(self.__add('note'))
        else:
            self.note = None
        if 'benefitBalance' in self.__json:
            if isinstance(self.__json['benefitBalance'], list):
                self.benefitBalance = self.__add_list('benefitBalance')
            else:
                self.benefitBalance = ExplanationOfBenefitBenefitBalanceComponent(self.__add('benefitBalance'))
        else:
            self.benefitBalance = None
        self.claimIdentifier = Identifier(self.__add('claimIdentifier'))
        self.claimReference = Reference(self.__add('claimReference'))
        self.claimResponseIdentifier = Identifier(self.__add('claimResponseIdentifier'))
        self.claimResponseReference = Reference(self.__add('claimResponseReference'))
        self.providerIdentifier = Identifier(self.__add('providerIdentifier'))
        self.providerReference = Reference(self.__add('providerReference'))
        self.organizationIdentifier = Identifier(self.__add('organizationIdentifier'))
        self.organizationReference = Reference(self.__add('organizationReference'))
        self.facilityIdentifier = Identifier(self.__add('facilityIdentifier'))
        self.facilityReference = Reference(self.__add('facilityReference'))
        self.prescriptionIdentifier = Identifier(self.__add('prescriptionIdentifier'))
        self.prescriptionReference = Reference(self.__add('prescriptionReference'))
        self.originalPrescriptionIdentifier = Identifier(self.__add('originalPrescriptionIdentifier'))
        self.originalPrescriptionReference = Reference(self.__add('originalPrescriptionReference'))
        self.referralIdentifier = Identifier(self.__add('referralIdentifier'))
        self.referralReference = Reference(self.__add('referralReference'))
        self.patientIdentifier = Identifier(self.__add('patientIdentifier'))
        self.patientReference = Reference(self.__add('patientReference'))
        self.accidentLocationAddress = Address(self.__add('accidentLocationAddress'))
        self.accidentLocationReference = Reference(self.__add('accidentLocationReference'))


        # Parent Resource Init
        super(ExplanationOfBenefit, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identifier:
            self.__json['identifier'] = self.__get_list(self.identifier)
        if self.subType:
            self.__json['subType'] = self.__get_list(self.subType)
        if self.ruleset:
            self.__json['ruleset'] = self.ruleset.json
        if self.originalRuleset:
            self.__json['originalRuleset'] = self.originalRuleset.json
        if self.created:
            self.__json['created'] = self.created.json
        if self.billablePeriod:
            self.__json['billablePeriod'] = self.billablePeriod.json
        if self.disposition:
            self.__json['disposition'] = self.disposition
        if self.related:
            self.__json['related'] = self.__get_list(self.related)
        if self.payee:
            self.__json['payee'] = self.payee.json
        if self.occurrenceCode:
            self.__json['occurrenceCode'] = self.__get_list(self.occurrenceCode)
        if self.occurenceSpanCode:
            self.__json['occurenceSpanCode'] = self.__get_list(self.occurenceSpanCode)
        if self.valueCode:
            self.__json['valueCode'] = self.__get_list(self.valueCode)
        if self.diagnosis:
            self.__json['diagnosis'] = self.__get_list(self.diagnosis)
        if self.procedure:
            self.__json['procedure'] = self.__get_list(self.procedure)
        if self.specialCondition:
            self.__json['specialCondition'] = self.__get_list(self.specialCondition)
        if self.precedence:
            self.__json['precedence'] = self.precedence
        if self.coverage:
            self.__json['coverage'] = self.coverage.json
        if self.accidentDate:
            self.__json['accidentDate'] = self.accidentDate.json
        if self.accidentType:
            self.__json['accidentType'] = self.accidentType.json
        if self.interventionException:
            self.__json['interventionException'] = self.__get_list(self.interventionException)
        if self.onset:
            self.__json['onset'] = self.__get_list(self.onset)
        if self.employmentImpacted:
            self.__json['employmentImpacted'] = self.employmentImpacted.json
        if self.hospitalization:
            self.__json['hospitalization'] = self.hospitalization.json
        if self.item:
            self.__json['item'] = self.__get_list(self.item)
        if self.addItem:
            self.__json['addItem'] = self.__get_list(self.addItem)
        if self.missingTeeth:
            self.__json['missingTeeth'] = self.__get_list(self.missingTeeth)
        if self.totalCost:
            self.__json['totalCost'] = self.totalCost.json
        if self.unallocDeductable:
            self.__json['unallocDeductable'] = self.unallocDeductable.json
        if self.totalBenefit:
            self.__json['totalBenefit'] = self.totalBenefit.json
        if self.paymentAdjustment:
            self.__json['paymentAdjustment'] = self.paymentAdjustment.json
        if self.paymentAdjustmentReason:
            self.__json['paymentAdjustmentReason'] = self.paymentAdjustmentReason.json
        if self.paymentDate:
            self.__json['paymentDate'] = self.paymentDate.json
        if self.paymentAmount:
            self.__json['paymentAmount'] = self.paymentAmount.json
        if self.paymentRef:
            self.__json['paymentRef'] = self.paymentRef.json
        if self.reserved:
            self.__json['reserved'] = self.reserved.json
        if self.form:
            self.__json['form'] = self.form.json
        if self.note:
            self.__json['note'] = self.__get_list(self.note)
        if self.benefitBalance:
            self.__json['benefitBalance'] = self.__get_list(self.benefitBalance)
        if self.claimIdentifier:
            self.__json['claimIdentifier'] = self.claimIdentifier.json
        if self.claimReference:
            self.__json['claimReference'] = self.claimReference.json
        if self.claimResponseIdentifier:
            self.__json['claimResponseIdentifier'] = self.claimResponseIdentifier.json
        if self.claimResponseReference:
            self.__json['claimResponseReference'] = self.claimResponseReference.json
        if self.providerIdentifier:
            self.__json['providerIdentifier'] = self.providerIdentifier.json
        if self.providerReference:
            self.__json['providerReference'] = self.providerReference.json
        if self.organizationIdentifier:
            self.__json['organizationIdentifier'] = self.organizationIdentifier.json
        if self.organizationReference:
            self.__json['organizationReference'] = self.organizationReference.json
        if self.facilityIdentifier:
            self.__json['facilityIdentifier'] = self.facilityIdentifier.json
        if self.facilityReference:
            self.__json['facilityReference'] = self.facilityReference.json
        if self.prescriptionIdentifier:
            self.__json['prescriptionIdentifier'] = self.prescriptionIdentifier.json
        if self.prescriptionReference:
            self.__json['prescriptionReference'] = self.prescriptionReference.json
        if self.originalPrescriptionIdentifier:
            self.__json['originalPrescriptionIdentifier'] = self.originalPrescriptionIdentifier.json
        if self.originalPrescriptionReference:
            self.__json['originalPrescriptionReference'] = self.originalPrescriptionReference.json
        if self.referralIdentifier:
            self.__json['referralIdentifier'] = self.referralIdentifier.json
        if self.referralReference:
            self.__json['referralReference'] = self.referralReference.json
        if self.patientIdentifier:
            self.__json['patientIdentifier'] = self.patientIdentifier.json
        if self.patientReference:
            self.__json['patientReference'] = self.patientReference.json
        if self.accidentLocationAddress:
            self.__json['accidentLocationAddress'] = self.accidentLocationAddress.json
        if self.accidentLocationReference:
            self.__json['accidentLocationReference'] = self.accidentLocationReference.json

        # Add json attributes
        self.__json = super(ExplanationOfBenefit, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR ExplanationOfBenefit string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class FamilyMemberHistoryConditionComponent(BackboneElement):
    '''
    FHIR FamilyMemberHistoryConditionComponent resource

     The significant Conditions (or condition) that the family member had. This is a repeating section to allow a system to represent more than one condition per resource, though there is nothing stopping multiple resources - one per condition.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR FamilyMemberHistoryConditionComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(FamilyMemberHistoryConditionComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR FamilyMemberHistoryConditionComponent constructor
        '''
        logging.info("FHIR FamilyMemberHistoryConditionComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.code = CodeableConcept(self.__add('code'))
        self.outcome = CodeableConcept(self.__add('outcome'))
        self.note = Annotation(self.__add('note'))
        self.onsetQuantity = Age(self.__add('onsetQuantity'))
        self.onsetRange = Range(self.__add('onsetRange'))
        self.onsetPeriod = Period(self.__add('onsetPeriod'))
        self.onsetString = self.__add('onsetString')



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.code:
            self.__json['code'] = self.code.json
        if self.outcome:
            self.__json['outcome'] = self.outcome.json
        if self.note:
            self.__json['note'] = self.note.json
        if self.onsetQuantity:
            self.__json['onsetQuantity'] = self.onsetQuantity.json
        if self.onsetRange:
            self.__json['onsetRange'] = self.onsetRange.json
        if self.onsetPeriod:
            self.__json['onsetPeriod'] = self.onsetPeriod.json
        if self.onsetString:
            self.__json['onsetString'] = self.onsetString


        return self.__json
        
    def __repr__(self):
        '''
        FHIR FamilyMemberHistoryConditionComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class FamilyMemberHistory(DomainResource):
    '''
    FHIR FamilyMemberHistory resource

     Significant health events and conditions for a person related to the patient relevant in the context of care for the patient. If the element is present, it must have either a @value, an @id, or extensions

    identifier ->  This records identifiers associated with this family member history record that are defined by business processes and/ or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).
    patient ->  The person who this history concerns.
    date ->  The date (and possibly time) when the family member history was taken.
    status ->  A code specifying a state of a Family Member History record. 
    name ->  This will either be a name or a description; e.g. "Aunt Susan", "my cousin with the red hair".
    relationship ->  The type of relationship this person has to the patient (father, mother, brother etc.).
    gender ->  Administrative Gender - the gender that the relative is considered to have for administration and record keeping purposes. 
    note ->  This property allows a non condition-specific note to the made about the related person. Ideally, the note would be in the condition property, but this is not always possible.
    condition ->  The significant Conditions (or condition) that the family member had. This is a repeating section to allow a system to represent more than one condition per resource, though there is nothing stopping multiple resources - one per condition.
    bornPeriod ->  The actual or approximate date of birth of the relative.
    bornDate ->  The actual or approximate date of birth of the relative.
    bornString ->  The actual or approximate date of birth of the relative.
    ageQuantity ->  The actual or approximate age of the relative at the time the family member history is recorded.
    ageRange ->  The actual or approximate age of the relative at the time the family member history is recorded.
    ageString ->  The actual or approximate age of the relative at the time the family member history is recorded.
    deceasedBoolean ->  Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
    deceasedQuantity ->  Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
    deceasedRange ->  Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
    deceasedDate ->  Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
    deceasedString ->  Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.

    # Search parameters
        FamilyMemberHistory.search.code
        FamilyMemberHistory.search.date
        FamilyMemberHistory.search.gender
        FamilyMemberHistory.search.identifier
        FamilyMemberHistory.search.patient
        FamilyMemberHistory.search.relationship
    '''
    # search parameters
    par = [("code", "token"),
           ("date", "date"),
           ("gender", "token"),
           ("identifier", "token"),
           ("patient", "reference"),
           ("relationship", "token")]

    search = Params(par, "FamilyMemberHistory")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'identifier':
                    list_to_add.append(Identifier(obj))
                elif key == 'condition':
                    list_to_add.append(FamilyMemberHistoryConditionComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR FamilyMemberHistory __new__
        '''
        if json == None:
            return None
        else:
            return super(FamilyMemberHistory, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR FamilyMemberHistory constructor
        '''
        logging.info("FHIR FamilyMemberHistory: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "FamilyMemberHistory"
        if 'identifier' in self.__json:
            if isinstance(self.__json['identifier'], list):
                self.identifier = self.__add_list('identifier')
            else:
                self.identifier = Identifier(self.__add('identifier'))
        else:
            self.identifier = None
        self.patient = Reference(self.__add('patient'))
        self.date = DateTime(self.__add('date'))
        self.status = self.__add('status')
        self.name = self.__add('name')
        self.relationship = CodeableConcept(self.__add('relationship'))
        self.gender = self.__add('gender')
        self.note = Annotation(self.__add('note'))
        if 'condition' in self.__json:
            if isinstance(self.__json['condition'], list):
                self.condition = self.__add_list('condition')
            else:
                self.condition = FamilyMemberHistoryConditionComponent(self.__add('condition'))
        else:
            self.condition = None
        self.bornPeriod = Period(self.__add('bornPeriod'))
        self.bornDate = Date(self.__add('bornDate'))
        self.bornString = self.__add('bornString')
        self.ageQuantity = Age(self.__add('ageQuantity'))
        self.ageRange = Range(self.__add('ageRange'))
        self.ageString = self.__add('ageString')
        self.deceasedBoolean = Boolean(self.__add('deceasedBoolean'))
        self.deceasedQuantity = Age(self.__add('deceasedQuantity'))
        self.deceasedRange = Range(self.__add('deceasedRange'))
        self.deceasedDate = Date(self.__add('deceasedDate'))
        self.deceasedString = self.__add('deceasedString')


        # Parent Resource Init
        super(FamilyMemberHistory, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identifier:
            self.__json['identifier'] = self.__get_list(self.identifier)
        if self.patient:
            self.__json['patient'] = self.patient.json
        if self.date:
            self.__json['date'] = self.date.json
        if self.status:
            self.__json['status'] = self.status
        if self.name:
            self.__json['name'] = self.name
        if self.relationship:
            self.__json['relationship'] = self.relationship.json
        if self.gender:
            self.__json['gender'] = self.gender
        if self.note:
            self.__json['note'] = self.note.json
        if self.condition:
            self.__json['condition'] = self.__get_list(self.condition)
        if self.bornPeriod:
            self.__json['bornPeriod'] = self.bornPeriod.json
        if self.bornDate:
            self.__json['bornDate'] = self.bornDate.json
        if self.bornString:
            self.__json['bornString'] = self.bornString
        if self.ageQuantity:
            self.__json['ageQuantity'] = self.ageQuantity.json
        if self.ageRange:
            self.__json['ageRange'] = self.ageRange.json
        if self.ageString:
            self.__json['ageString'] = self.ageString
        if self.deceasedBoolean:
            self.__json['deceasedBoolean'] = self.deceasedBoolean.json
        if self.deceasedQuantity:
            self.__json['deceasedQuantity'] = self.deceasedQuantity.json
        if self.deceasedRange:
            self.__json['deceasedRange'] = self.deceasedRange.json
        if self.deceasedDate:
            self.__json['deceasedDate'] = self.deceasedDate.json
        if self.deceasedString:
            self.__json['deceasedString'] = self.deceasedString

        # Add json attributes
        self.__json = super(FamilyMemberHistory, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR FamilyMemberHistory string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class Flag(DomainResource):
    '''
    FHIR Flag resource

     Prospective warnings of potential issues when providing care to the patient. If the element is present, it must have either a @value, an @id, or extensions

    identifier ->  Identifier assigned to the flag for external use (outside the FHIR environment).
    category ->  Allows an flag to be divided into different categories like clinical, administrative etc. Intended to be used as a means of filtering which flags are displayed to particular user or in a given context.
    status ->  Supports basic workflow. 
    period ->  The period of time from the activation of the flag to inactivation of the flag. If the flag is active, the end of the period should be unspecified.
    subject ->  The patient, location, group , organization , or practitioner this is about record this flag is associated with.
    encounter ->  This alert is only relevant during the encounter.
    author ->  The person, organization or device that created the flag.
    code ->  The coded value or textual component of the flag to display to the user.

    # Search parameters
        Flag.search.author
        Flag.search.date
        Flag.search.encounter
        Flag.search.patient
        Flag.search.subject
    '''
    # search parameters
    par = [("author", "reference"),
           ("date", "date"),
           ("encounter", "reference"),
           ("patient", "reference"),
           ("subject", "reference")]

    search = Params(par, "Flag")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'identifier':
                    list_to_add.append(Identifier(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR Flag __new__
        '''
        if json == None:
            return None
        else:
            return super(Flag, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR Flag constructor
        '''
        logging.info("FHIR Flag: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "Flag"
        if 'identifier' in self.__json:
            if isinstance(self.__json['identifier'], list):
                self.identifier = self.__add_list('identifier')
            else:
                self.identifier = Identifier(self.__add('identifier'))
        else:
            self.identifier = None
        self.category = CodeableConcept(self.__add('category'))
        self.status = self.__add('status')
        self.period = Period(self.__add('period'))
        self.subject = Reference(self.__add('subject'))
        self.encounter = Reference(self.__add('encounter'))
        self.author = Reference(self.__add('author'))
        self.code = CodeableConcept(self.__add('code'))


        # Parent Resource Init
        super(Flag, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identifier:
            self.__json['identifier'] = self.__get_list(self.identifier)
        if self.category:
            self.__json['category'] = self.category.json
        if self.status:
            self.__json['status'] = self.status
        if self.period:
            self.__json['period'] = self.period.json
        if self.subject:
            self.__json['subject'] = self.subject.json
        if self.encounter:
            self.__json['encounter'] = self.encounter.json
        if self.author:
            self.__json['author'] = self.author.json
        if self.code:
            self.__json['code'] = self.code.json

        # Add json attributes
        self.__json = super(Flag, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR Flag string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class GoalOutcomeComponent(BackboneElement):
    '''
    FHIR GoalOutcomeComponent resource

     Identifies the change (or lack of change) at the point where the goal was deepmed to be cancelled or achieved.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR GoalOutcomeComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(GoalOutcomeComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR GoalOutcomeComponent constructor
        '''
        logging.info("FHIR GoalOutcomeComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.resultCodeableConcept = CodeableConcept(self.__add('resultCodeableConcept'))
        self.resultReference = Reference(self.__add('resultReference'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.resultCodeableConcept:
            self.__json['resultCodeableConcept'] = self.resultCodeableConcept.json
        if self.resultReference:
            self.__json['resultReference'] = self.resultReference.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR GoalOutcomeComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class Goal(DomainResource):
    '''
    FHIR Goal resource

     Describes the intended objective(s) for a patient, group or organization care, for example, weight loss, restoring an activity of daily living, obtaining herd immunity via immunization, meeting a process improvement objective, etc. If the element is present, it must have either a @value, an @id, or extensions

    identifier ->  This records identifiers associated with this care plan that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).
    subject ->  Identifies the patient, group or organization for whom the goal is being established.
    category ->  Indicates a category the goal falls within.
    description ->  Human-readable description of a specific desired objective of care.
    status ->  Indicates whether the goal has been reached and is still considered relevant. 
    statusDate ->  Identifies when the current status.  I.e. When initially created, when achieved, when cancelled, etc.
    statusReason ->  Captures the reason for the current status.
    author ->  Indicates whose goal this is - patient goal, practitioner goal, etc.
    priority ->  Identifies the mutually agreed level of importance associated with reaching/sustaining the goal.
    addresses ->  The identified conditions and other health record elements that are intended to be addressed by the goal.
    note ->  Any comments related to the goal.
    outcome ->  Identifies the change (or lack of change) at the point where the goal was deepmed to be cancelled or achieved.
    startDate ->  The date or event after which the goal should begin being pursued.
    startCodeableConcept ->  The date or event after which the goal should begin being pursued.
    targetDate ->  Indicates either the date or the duration after start by which the goal should be met.
    targetQuantity ->  Indicates either the date or the duration after start by which the goal should be met.

    # Search parameters
        Goal.search.category
        Goal.search.identifier
        Goal.search.patient
        Goal.search.status
        Goal.search.subject
        Goal.search.targetdate
    '''
    # search parameters
    par = [("category", "token"),
           ("identifier", "token"),
           ("patient", "reference"),
           ("status", "token"),
           ("subject", "reference"),
           ("targetdate", "date")]

    search = Params(par, "Goal")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'identifier':
                    list_to_add.append(Identifier(obj))
                elif key == 'category':
                    list_to_add.append(CodeableConcept(obj))
                elif key == 'addresses':
                    list_to_add.append(Reference(obj))
                elif key == 'note':
                    list_to_add.append(Annotation(obj))
                elif key == 'outcome':
                    list_to_add.append(GoalOutcomeComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR Goal __new__
        '''
        if json == None:
            return None
        else:
            return super(Goal, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR Goal constructor
        '''
        logging.info("FHIR Goal: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "Goal"
        if 'identifier' in self.__json:
            if isinstance(self.__json['identifier'], list):
                self.identifier = self.__add_list('identifier')
            else:
                self.identifier = Identifier(self.__add('identifier'))
        else:
            self.identifier = None
        self.subject = Reference(self.__add('subject'))
        if 'category' in self.__json:
            if isinstance(self.__json['category'], list):
                self.category = self.__add_list('category')
            else:
                self.category = CodeableConcept(self.__add('category'))
        else:
            self.category = None
        self.description = self.__add('description')
        self.status = self.__add('status')
        self.statusDate = Date(self.__add('statusDate'))
        self.statusReason = CodeableConcept(self.__add('statusReason'))
        self.author = Reference(self.__add('author'))
        self.priority = CodeableConcept(self.__add('priority'))
        if 'addresses' in self.__json:
            if isinstance(self.__json['addresses'], list):
                self.addresses = self.__add_list('addresses')
            else:
                self.addresses = Reference(self.__add('addresses'))
        else:
            self.addresses = None
        if 'note' in self.__json:
            if isinstance(self.__json['note'], list):
                self.note = self.__add_list('note')
            else:
                self.note = Annotation(self.__add('note'))
        else:
            self.note = None
        if 'outcome' in self.__json:
            if isinstance(self.__json['outcome'], list):
                self.outcome = self.__add_list('outcome')
            else:
                self.outcome = GoalOutcomeComponent(self.__add('outcome'))
        else:
            self.outcome = None
        self.startDate = Date(self.__add('startDate'))
        self.startCodeableConcept = CodeableConcept(self.__add('startCodeableConcept'))
        self.targetDate = Date(self.__add('targetDate'))
        self.targetQuantity = Duration(self.__add('targetQuantity'))


        # Parent Resource Init
        super(Goal, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identifier:
            self.__json['identifier'] = self.__get_list(self.identifier)
        if self.subject:
            self.__json['subject'] = self.subject.json
        if self.category:
            self.__json['category'] = self.__get_list(self.category)
        if self.description:
            self.__json['description'] = self.description
        if self.status:
            self.__json['status'] = self.status
        if self.statusDate:
            self.__json['statusDate'] = self.statusDate.json
        if self.statusReason:
            self.__json['statusReason'] = self.statusReason.json
        if self.author:
            self.__json['author'] = self.author.json
        if self.priority:
            self.__json['priority'] = self.priority.json
        if self.addresses:
            self.__json['addresses'] = self.__get_list(self.addresses)
        if self.note:
            self.__json['note'] = self.__get_list(self.note)
        if self.outcome:
            self.__json['outcome'] = self.__get_list(self.outcome)
        if self.startDate:
            self.__json['startDate'] = self.startDate.json
        if self.startCodeableConcept:
            self.__json['startCodeableConcept'] = self.startCodeableConcept.json
        if self.targetDate:
            self.__json['targetDate'] = self.targetDate.json
        if self.targetQuantity:
            self.__json['targetQuantity'] = self.targetQuantity.json

        # Add json attributes
        self.__json = super(Goal, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR Goal string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class GroupCharacteristicComponent(BackboneElement):
    '''
    FHIR GroupCharacteristicComponent resource

     Identifies the traits shared by members of the group.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR GroupCharacteristicComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(GroupCharacteristicComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR GroupCharacteristicComponent constructor
        '''
        logging.info("FHIR GroupCharacteristicComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.code = CodeableConcept(self.__add('code'))
        self.exclude = Boolean(self.__add('exclude'))
        self.period = Period(self.__add('period'))
        self.valueCodeableConcept = CodeableConcept(self.__add('valueCodeableConcept'))
        self.valueBoolean = Boolean(self.__add('valueBoolean'))
        self.valueQuantity = Quantity(self.__add('valueQuantity'))
        self.valueRange = Range(self.__add('valueRange'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.code:
            self.__json['code'] = self.code.json
        if self.exclude:
            self.__json['exclude'] = self.exclude.json
        if self.period:
            self.__json['period'] = self.period.json
        if self.valueCodeableConcept:
            self.__json['valueCodeableConcept'] = self.valueCodeableConcept.json
        if self.valueBoolean:
            self.__json['valueBoolean'] = self.valueBoolean.json
        if self.valueQuantity:
            self.__json['valueQuantity'] = self.valueQuantity.json
        if self.valueRange:
            self.__json['valueRange'] = self.valueRange.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR GroupCharacteristicComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class GroupMemberComponent(BackboneElement):
    '''
    FHIR GroupMemberComponent resource

     Identifies the resource instances that are members of the group.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR GroupMemberComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(GroupMemberComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR GroupMemberComponent constructor
        '''
        logging.info("FHIR GroupMemberComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.entity = Reference(self.__add('entity'))
        self.period = Period(self.__add('period'))
        self.inactive = Boolean(self.__add('inactive'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.entity:
            self.__json['entity'] = self.entity.json
        if self.period:
            self.__json['period'] = self.period.json
        if self.inactive:
            self.__json['inactive'] = self.inactive.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR GroupMemberComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class Group(DomainResource):
    '''
    FHIR Group resource

     Represents a defined collection of entities that may be discussed or acted upon collectively but which are not expected to act collectively and are not formally or legally recognized; i.e. a collection of entities that isn't an Organization. If the element is present, it must have either a @value, an @id, or extensions

    identifier ->  A unique business identifier for this group.
    type ->  Identifies the broad classification of the kind of resources the group includes. 
    actual ->  If true, indicates that the resource refers to a specific group of real individuals.  If false, the group defines a set of intended individuals.
    active ->  Indicates whether the record for the group is available for use or is merely being retained for historical purposes.
    code ->  Provides a specific type of resource the group includes; e.g. "cow", "syringe", etc.
    name ->  A label assigned to the group for human identification and communication.
    quantity ->  A count of the number of resource instances that are part of the group.
    characteristic ->  Identifies the traits shared by members of the group.
    member ->  Identifies the resource instances that are members of the group.

    # Search parameters
        Group.search.actual
        Group.search.characteristic
        Group.search.characteristic-value
        Group.search.code
        Group.search.exclude
        Group.search.identifier
        Group.search.member
        Group.search.type
        Group.search.value
    '''
    # search parameters
    par = [("actual", "token"),
           ("characteristic", "token"),
           ("characteristic-value", "None"),
           ("code", "token"),
           ("exclude", "token"),
           ("identifier", "token"),
           ("member", "reference"),
           ("type", "token"),
           ("value", "token")]

    search = Params(par, "Group")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'identifier':
                    list_to_add.append(Identifier(obj))
                elif key == 'characteristic':
                    list_to_add.append(GroupCharacteristicComponent(obj))
                elif key == 'member':
                    list_to_add.append(GroupMemberComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR Group __new__
        '''
        if json == None:
            return None
        else:
            return super(Group, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR Group constructor
        '''
        logging.info("FHIR Group: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "Group"
        if 'identifier' in self.__json:
            if isinstance(self.__json['identifier'], list):
                self.identifier = self.__add_list('identifier')
            else:
                self.identifier = Identifier(self.__add('identifier'))
        else:
            self.identifier = None
        self.type = self.__add('type')
        self.actual = Boolean(self.__add('actual'))
        self.active = Boolean(self.__add('active'))
        self.code = CodeableConcept(self.__add('code'))
        self.name = self.__add('name')
        self.quantity = self.__add('quantity')
        if 'characteristic' in self.__json:
            if isinstance(self.__json['characteristic'], list):
                self.characteristic = self.__add_list('characteristic')
            else:
                self.characteristic = GroupCharacteristicComponent(self.__add('characteristic'))
        else:
            self.characteristic = None
        if 'member' in self.__json:
            if isinstance(self.__json['member'], list):
                self.member = self.__add_list('member')
            else:
                self.member = GroupMemberComponent(self.__add('member'))
        else:
            self.member = None


        # Parent Resource Init
        super(Group, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identifier:
            self.__json['identifier'] = self.__get_list(self.identifier)
        if self.type:
            self.__json['type'] = self.type
        if self.actual:
            self.__json['actual'] = self.actual.json
        if self.active:
            self.__json['active'] = self.active.json
        if self.code:
            self.__json['code'] = self.code.json
        if self.name:
            self.__json['name'] = self.name
        if self.quantity:
            self.__json['quantity'] = self.quantity
        if self.characteristic:
            self.__json['characteristic'] = self.__get_list(self.characteristic)
        if self.member:
            self.__json['member'] = self.__get_list(self.member)

        # Add json attributes
        self.__json = super(Group, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR Group string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class GuidanceResponseRelatedActionComponent(BackboneElement):
    '''
    FHIR GuidanceResponseRelatedActionComponent resource

     A relationship to another action such as "before" or "30-60 minutes after start of".

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR GuidanceResponseRelatedActionComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(GuidanceResponseRelatedActionComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR GuidanceResponseRelatedActionComponent constructor
        '''
        logging.info("FHIR GuidanceResponseRelatedActionComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.actionIdentifier = Identifier(self.__add('actionIdentifier'))
        self.relationship = self.__add('relationship')
        self.anchor = self.__add('anchor')
        self.offsetQuantity = Duration(self.__add('offsetQuantity'))
        self.offsetRange = Range(self.__add('offsetRange'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.actionIdentifier:
            self.__json['actionIdentifier'] = self.actionIdentifier.json
        if self.relationship:
            self.__json['relationship'] = self.relationship
        if self.anchor:
            self.__json['anchor'] = self.anchor
        if self.offsetQuantity:
            self.__json['offsetQuantity'] = self.offsetQuantity.json
        if self.offsetRange:
            self.__json['offsetRange'] = self.offsetRange.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR GuidanceResponseRelatedActionComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class GuidanceResponseBehaviorComponent(BackboneElement):
    '''
    FHIR GuidanceResponseBehaviorComponent resource

     A behavior associated with the action. Behaviors define how the action is to be presented and/or executed within the receiving environment.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR GuidanceResponseBehaviorComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(GuidanceResponseBehaviorComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR GuidanceResponseBehaviorComponent constructor
        '''
        logging.info("FHIR GuidanceResponseBehaviorComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.type = Coding(self.__add('type'))
        self.value = Coding(self.__add('value'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.type:
            self.__json['type'] = self.type.json
        if self.value:
            self.__json['value'] = self.value.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR GuidanceResponseBehaviorComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class GuidanceResponseActionComponent(BackboneElement):
    '''
    FHIR GuidanceResponseActionComponent resource

     The actions, if any, produced by the evaluation of the artifact.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'concept':
                    list_to_add.append(CodeableConcept(obj))
                elif key == 'supportingEvidence':
                    list_to_add.append(Attachment(obj))
                elif key == 'documentation':
                    list_to_add.append(Attachment(obj))
                elif key == 'participant':
                    list_to_add.append(Reference(obj))
                elif key == 'behavior':
                    list_to_add.append(GuidanceResponseBehaviorComponent(obj))
                elif key == 'action':
                    list_to_add.append(GuidanceResponseActionComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR GuidanceResponseActionComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(GuidanceResponseActionComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR GuidanceResponseActionComponent constructor
        '''
        logging.info("FHIR GuidanceResponseActionComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.actionIdentifier = Identifier(self.__add('actionIdentifier'))
        self.label = self.__add('label')
        self.title = self.__add('title')
        self.description = self.__add('description')
        self.textEquivalent = self.__add('textEquivalent')
        if 'concept' in self.__json:
            if isinstance(self.__json['concept'], list):
                self.concept = self.__add_list('concept')
            else:
                self.concept = CodeableConcept(self.__add('concept'))
        else:
            self.concept = None
        if 'supportingEvidence' in self.__json:
            if isinstance(self.__json['supportingEvidence'], list):
                self.supportingEvidence = self.__add_list('supportingEvidence')
            else:
                self.supportingEvidence = Attachment(self.__add('supportingEvidence'))
        else:
            self.supportingEvidence = None
        self.relatedAction = GuidanceResponseRelatedActionComponent(self.__add('relatedAction'))
        if 'documentation' in self.__json:
            if isinstance(self.__json['documentation'], list):
                self.documentation = self.__add_list('documentation')
            else:
                self.documentation = Attachment(self.__add('documentation'))
        else:
            self.documentation = None
        if 'participant' in self.__json:
            if isinstance(self.__json['participant'], list):
                self.participant = self.__add_list('participant')
            else:
                self.participant = Reference(self.__add('participant'))
        else:
            self.participant = None
        self.type = self.__add('type')
        if 'behavior' in self.__json:
            if isinstance(self.__json['behavior'], list):
                self.behavior = self.__add_list('behavior')
            else:
                self.behavior = GuidanceResponseBehaviorComponent(self.__add('behavior'))
        else:
            self.behavior = None
        self.resource = Reference(self.__add('resource'))
        if 'action' in self.__json:
            if isinstance(self.__json['action'], list):
                self.action = self.__add_list('action')
            else:
                self.action = GuidanceResponseActionComponent(self.__add('action'))
        else:
            self.action = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.actionIdentifier:
            self.__json['actionIdentifier'] = self.actionIdentifier.json
        if self.label:
            self.__json['label'] = self.label
        if self.title:
            self.__json['title'] = self.title
        if self.description:
            self.__json['description'] = self.description
        if self.textEquivalent:
            self.__json['textEquivalent'] = self.textEquivalent
        if self.concept:
            self.__json['concept'] = self.__get_list(self.concept)
        if self.supportingEvidence:
            self.__json['supportingEvidence'] = self.__get_list(self.supportingEvidence)
        if self.relatedAction:
            self.__json['relatedAction'] = self.relatedAction.json
        if self.documentation:
            self.__json['documentation'] = self.__get_list(self.documentation)
        if self.participant:
            self.__json['participant'] = self.__get_list(self.participant)
        if self.type:
            self.__json['type'] = self.type
        if self.behavior:
            self.__json['behavior'] = self.__get_list(self.behavior)
        if self.resource:
            self.__json['resource'] = self.resource.json
        if self.action:
            self.__json['action'] = self.__get_list(self.action)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR GuidanceResponseActionComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class GuidanceResponse(DomainResource):
    '''
    FHIR GuidanceResponse resource

     A guidance response is the formal response to a guidance request, including any output parameters returned by the evaluation, as well as the description of any proposed actions to be taken. If the element is present, it must have either a @value, an @id, or extensions

    requestId ->  The id of the request associated with this response. If an id was given as part of the request, it will be reproduced here to enable the requester to more easily identify the response in a multi-request scenario.
    module ->  A reference to the knowledge module that was invoked.
    status ->  The status of the response. If the evaluation is completed successfully, the status will indicate success. However, in order to complete the evaluation, the engine may require more information. In this case, the status will be data-required, and the response will contain a description of the additional required information. If the evaluation completed successfully, but the engine determines that a potentially more accurate response could be provided if more data was available, the status will be data-requested, and the response will contain a description of the additional requested information. 
    evaluationMessage ->  Messages resulting from the evaluation of the artifact or artifacts. As part of evaluating the request, the engine may produce informational or warning messages. These messages will be provided by this element.
    outputParameters ->  The output parameters of the evaluation, if any. Many modules will result in the return of specific resources such as procedure or communication requests that are returned as part of the operation result. However, modules may define specific outputs that would be returned as the result of the evaluation, and these would be returned in this element.
    action ->  The actions, if any, produced by the evaluation of the artifact.
    dataRequirement ->  If the evaluation could not be completed due to lack of information, or additional information would potentially result in a more accurate response, this element will a description of the data required in order to proceed with the evaluation. A subsequent request to the service should include this data.

    
    '''
    

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'evaluationMessage':
                    list_to_add.append(Reference(obj))
                elif key == 'action':
                    list_to_add.append(GuidanceResponseActionComponent(obj))
                elif key == 'dataRequirement':
                    list_to_add.append(DataRequirement(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR GuidanceResponse __new__
        '''
        if json == None:
            return None
        else:
            return super(GuidanceResponse, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR GuidanceResponse constructor
        '''
        logging.info("FHIR GuidanceResponse: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "GuidanceResponse"
        self.requestId = self.__add('requestId')
        self.module = Reference(self.__add('module'))
        self.status = self.__add('status')
        if 'evaluationMessage' in self.__json:
            if isinstance(self.__json['evaluationMessage'], list):
                self.evaluationMessage = self.__add_list('evaluationMessage')
            else:
                self.evaluationMessage = Reference(self.__add('evaluationMessage'))
        else:
            self.evaluationMessage = None
        self.outputParameters = Reference(self.__add('outputParameters'))
        if 'action' in self.__json:
            if isinstance(self.__json['action'], list):
                self.action = self.__add_list('action')
            else:
                self.action = GuidanceResponseActionComponent(self.__add('action'))
        else:
            self.action = None
        if 'dataRequirement' in self.__json:
            if isinstance(self.__json['dataRequirement'], list):
                self.dataRequirement = self.__add_list('dataRequirement')
            else:
                self.dataRequirement = DataRequirement(self.__add('dataRequirement'))
        else:
            self.dataRequirement = None


        # Parent Resource Init
        super(GuidanceResponse, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.requestId:
            self.__json['requestId'] = self.requestId
        if self.module:
            self.__json['module'] = self.module.json
        if self.status:
            self.__json['status'] = self.status
        if self.evaluationMessage:
            self.__json['evaluationMessage'] = self.__get_list(self.evaluationMessage)
        if self.outputParameters:
            self.__json['outputParameters'] = self.outputParameters.json
        if self.action:
            self.__json['action'] = self.__get_list(self.action)
        if self.dataRequirement:
            self.__json['dataRequirement'] = self.__get_list(self.dataRequirement)

        # Add json attributes
        self.__json = super(GuidanceResponse, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR GuidanceResponse string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class HealthcareServiceAvailableTimeComponent(BackboneElement):
    '''
    FHIR HealthcareServiceAvailableTimeComponent resource

     A collection of times that the Service Site is available.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR HealthcareServiceAvailableTimeComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(HealthcareServiceAvailableTimeComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR HealthcareServiceAvailableTimeComponent constructor
        '''
        logging.info("FHIR HealthcareServiceAvailableTimeComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        if 'daysOfWeek' in self.__json:
            if isinstance(self.__json['daysOfWeek'], list):
                self.daysOfWeek = self.__add_list('daysOfWeek')
            else:
                self.daysOfWeek = self.__add('daysOfWeek')
        else:
            self.daysOfWeek = None
        self.allDay = Boolean(self.__add('allDay'))
        self.availableStartTime = Time(self.__add('availableStartTime'))
        self.availableEndTime = Time(self.__add('availableEndTime'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.daysOfWeek:
            self.__json['daysOfWeek'] = self.__get_list(self.daysOfWeek)
        if self.allDay:
            self.__json['allDay'] = self.allDay.json
        if self.availableStartTime:
            self.__json['availableStartTime'] = self.availableStartTime.json
        if self.availableEndTime:
            self.__json['availableEndTime'] = self.availableEndTime.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR HealthcareServiceAvailableTimeComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class HealthcareServiceNotAvailableComponent(BackboneElement):
    '''
    FHIR HealthcareServiceNotAvailableComponent resource

     The HealthcareService is not available during this period of time due to the provided reason.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR HealthcareServiceNotAvailableComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(HealthcareServiceNotAvailableComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR HealthcareServiceNotAvailableComponent constructor
        '''
        logging.info("FHIR HealthcareServiceNotAvailableComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.description = self.__add('description')
        self.during = Period(self.__add('during'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.description:
            self.__json['description'] = self.description
        if self.during:
            self.__json['during'] = self.during.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR HealthcareServiceNotAvailableComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class HealthcareService(DomainResource):
    '''
    FHIR HealthcareService resource

     The details of a healthcare service available at a location. If the element is present, it must have either a @value, an @id, or extensions

    identifier ->  External identifiers for this item.
    providedBy ->  The organization that provides this healthcare service.
    serviceCategory ->  Identifies the broad category of service being performed or delivered.
    serviceType ->  The specific type of service that may be delivered or performed.
    specialty ->  Collection of specialties handled by the service site. This is more of a medical term.
    location ->  The location(s) where this healthcare service may be provided.
    serviceName ->  Further description of the service as it would be presented to a consumer while searching.
    comment ->  Any additional description of the service and/or any specific issues not covered by the other attributes, which can be displayed as further detail under the serviceName.
    extraDetails ->  Extra details about the service that can't be placed in the other fields.
    photo ->  If there is a photo/symbol associated with this HealthcareService, it may be included here to facilitate quick identification of the service in a list.
    telecom ->  List of contacts related to this specific healthcare service.
    coverageArea ->  The location(s) that this service is available to (not where the service is provided).
    serviceProvisionCode ->  The code(s) that detail the conditions under which the healthcare service is available/offered.
    eligibility ->  Does this service have specific eligibility requirements that need to be met in order to use the service?
    eligibilityNote ->  Describes the eligibility conditions for the service.
    programName ->  Program Names that can be used to categorize the service.
    characteristic ->  Collection of characteristics (attributes).
    referralMethod ->  Ways that the service accepts referrals, if this is not provided then it is implied that no referral is required.
    publicKey ->  The public part of the 'keys' allocated to an Organization by an accredited body to support secure exchange of data over the internet. To be provided by the Organization, where available.
    appointmentRequired ->  Indicates whether or not a prospective consumer will require an appointment for a particular service at a site to be provided by the Organization. Indicates if an appointment is required for access to this service.
    availableTime ->  A collection of times that the Service Site is available.
    notAvailable ->  The HealthcareService is not available during this period of time due to the provided reason.
    availabilityExceptions ->  A description of site availability exceptions, e.g. public holiday availability. Succinctly describing all possible exceptions to normal site availability as details in the available Times and not available Times.

    # Search parameters
        HealthcareService.search.characteristic
        HealthcareService.search.identifier
        HealthcareService.search.location
        HealthcareService.search.name
        HealthcareService.search.organization
        HealthcareService.search.programname
        HealthcareService.search.servicecategory
        HealthcareService.search.servicetype
    '''
    # search parameters
    par = [("characteristic", "token"),
           ("identifier", "token"),
           ("location", "reference"),
           ("name", "string"),
           ("organization", "reference"),
           ("programname", "string"),
           ("servicecategory", "token"),
           ("servicetype", "token")]

    search = Params(par, "HealthcareService")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'identifier':
                    list_to_add.append(Identifier(obj))
                elif key == 'serviceType':
                    list_to_add.append(CodeableConcept(obj))
                elif key == 'specialty':
                    list_to_add.append(CodeableConcept(obj))
                elif key == 'location':
                    list_to_add.append(Reference(obj))
                elif key == 'telecom':
                    list_to_add.append(ContactPoint(obj))
                elif key == 'coverageArea':
                    list_to_add.append(Reference(obj))
                elif key == 'serviceProvisionCode':
                    list_to_add.append(CodeableConcept(obj))
                elif key == 'characteristic':
                    list_to_add.append(CodeableConcept(obj))
                elif key == 'referralMethod':
                    list_to_add.append(CodeableConcept(obj))
                elif key == 'availableTime':
                    list_to_add.append(HealthcareServiceAvailableTimeComponent(obj))
                elif key == 'notAvailable':
                    list_to_add.append(HealthcareServiceNotAvailableComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR HealthcareService __new__
        '''
        if json == None:
            return None
        else:
            return super(HealthcareService, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR HealthcareService constructor
        '''
        logging.info("FHIR HealthcareService: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "HealthcareService"
        if 'identifier' in self.__json:
            if isinstance(self.__json['identifier'], list):
                self.identifier = self.__add_list('identifier')
            else:
                self.identifier = Identifier(self.__add('identifier'))
        else:
            self.identifier = None
        self.providedBy = Reference(self.__add('providedBy'))
        self.serviceCategory = CodeableConcept(self.__add('serviceCategory'))
        if 'serviceType' in self.__json:
            if isinstance(self.__json['serviceType'], list):
                self.serviceType = self.__add_list('serviceType')
            else:
                self.serviceType = CodeableConcept(self.__add('serviceType'))
        else:
            self.serviceType = None
        if 'specialty' in self.__json:
            if isinstance(self.__json['specialty'], list):
                self.specialty = self.__add_list('specialty')
            else:
                self.specialty = CodeableConcept(self.__add('specialty'))
        else:
            self.specialty = None
        if 'location' in self.__json:
            if isinstance(self.__json['location'], list):
                self.location = self.__add_list('location')
            else:
                self.location = Reference(self.__add('location'))
        else:
            self.location = None
        self.serviceName = self.__add('serviceName')
        self.comment = self.__add('comment')
        self.extraDetails = self.__add('extraDetails')
        self.photo = Attachment(self.__add('photo'))
        if 'telecom' in self.__json:
            if isinstance(self.__json['telecom'], list):
                self.telecom = self.__add_list('telecom')
            else:
                self.telecom = ContactPoint(self.__add('telecom'))
        else:
            self.telecom = None
        if 'coverageArea' in self.__json:
            if isinstance(self.__json['coverageArea'], list):
                self.coverageArea = self.__add_list('coverageArea')
            else:
                self.coverageArea = Reference(self.__add('coverageArea'))
        else:
            self.coverageArea = None
        if 'serviceProvisionCode' in self.__json:
            if isinstance(self.__json['serviceProvisionCode'], list):
                self.serviceProvisionCode = self.__add_list('serviceProvisionCode')
            else:
                self.serviceProvisionCode = CodeableConcept(self.__add('serviceProvisionCode'))
        else:
            self.serviceProvisionCode = None
        self.eligibility = CodeableConcept(self.__add('eligibility'))
        self.eligibilityNote = self.__add('eligibilityNote')
        if 'programName' in self.__json:
            if isinstance(self.__json['programName'], list):
                self.programName = self.__add_list('programName')
            else:
                self.programName = self.__add('programName')
        else:
            self.programName = None
        if 'characteristic' in self.__json:
            if isinstance(self.__json['characteristic'], list):
                self.characteristic = self.__add_list('characteristic')
            else:
                self.characteristic = CodeableConcept(self.__add('characteristic'))
        else:
            self.characteristic = None
        if 'referralMethod' in self.__json:
            if isinstance(self.__json['referralMethod'], list):
                self.referralMethod = self.__add_list('referralMethod')
            else:
                self.referralMethod = CodeableConcept(self.__add('referralMethod'))
        else:
            self.referralMethod = None
        self.publicKey = self.__add('publicKey')
        self.appointmentRequired = Boolean(self.__add('appointmentRequired'))
        if 'availableTime' in self.__json:
            if isinstance(self.__json['availableTime'], list):
                self.availableTime = self.__add_list('availableTime')
            else:
                self.availableTime = HealthcareServiceAvailableTimeComponent(self.__add('availableTime'))
        else:
            self.availableTime = None
        if 'notAvailable' in self.__json:
            if isinstance(self.__json['notAvailable'], list):
                self.notAvailable = self.__add_list('notAvailable')
            else:
                self.notAvailable = HealthcareServiceNotAvailableComponent(self.__add('notAvailable'))
        else:
            self.notAvailable = None
        self.availabilityExceptions = self.__add('availabilityExceptions')


        # Parent Resource Init
        super(HealthcareService, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identifier:
            self.__json['identifier'] = self.__get_list(self.identifier)
        if self.providedBy:
            self.__json['providedBy'] = self.providedBy.json
        if self.serviceCategory:
            self.__json['serviceCategory'] = self.serviceCategory.json
        if self.serviceType:
            self.__json['serviceType'] = self.__get_list(self.serviceType)
        if self.specialty:
            self.__json['specialty'] = self.__get_list(self.specialty)
        if self.location:
            self.__json['location'] = self.__get_list(self.location)
        if self.serviceName:
            self.__json['serviceName'] = self.serviceName
        if self.comment:
            self.__json['comment'] = self.comment
        if self.extraDetails:
            self.__json['extraDetails'] = self.extraDetails
        if self.photo:
            self.__json['photo'] = self.photo.json
        if self.telecom:
            self.__json['telecom'] = self.__get_list(self.telecom)
        if self.coverageArea:
            self.__json['coverageArea'] = self.__get_list(self.coverageArea)
        if self.serviceProvisionCode:
            self.__json['serviceProvisionCode'] = self.__get_list(self.serviceProvisionCode)
        if self.eligibility:
            self.__json['eligibility'] = self.eligibility.json
        if self.eligibilityNote:
            self.__json['eligibilityNote'] = self.eligibilityNote
        if self.programName:
            self.__json['programName'] = self.__get_list(self.programName)
        if self.characteristic:
            self.__json['characteristic'] = self.__get_list(self.characteristic)
        if self.referralMethod:
            self.__json['referralMethod'] = self.__get_list(self.referralMethod)
        if self.publicKey:
            self.__json['publicKey'] = self.publicKey
        if self.appointmentRequired:
            self.__json['appointmentRequired'] = self.appointmentRequired.json
        if self.availableTime:
            self.__json['availableTime'] = self.__get_list(self.availableTime)
        if self.notAvailable:
            self.__json['notAvailable'] = self.__get_list(self.notAvailable)
        if self.availabilityExceptions:
            self.__json['availabilityExceptions'] = self.availabilityExceptions

        # Add json attributes
        self.__json = super(HealthcareService, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR HealthcareService string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ImagingExcerptDicomComponent(BackboneElement):
    '''
    FHIR ImagingExcerptDicomComponent resource

     Methods of accessing using DICOM web technologies.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ImagingExcerptDicomComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ImagingExcerptDicomComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ImagingExcerptDicomComponent constructor
        '''
        logging.info("FHIR ImagingExcerptDicomComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ImagingExcerptDicomComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ImagingExcerptViewableComponent(BackboneElement):
    '''
    FHIR ImagingExcerptViewableComponent resource

     A set of viewable reference images of various  types.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ImagingExcerptViewableComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ImagingExcerptViewableComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ImagingExcerptViewableComponent constructor
        '''
        logging.info("FHIR ImagingExcerptViewableComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.contentType = self.__add('contentType')
        self.height = self.__add('height')
        self.width = self.__add('width')
        self.frames = self.__add('frames')
        self.duration = self.__add('duration')
        self.size = self.__add('size')
        self.title = self.__add('title')
        self.url = self.__add('url')



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.contentType:
            self.__json['contentType'] = self.contentType
        if self.height:
            self.__json['height'] = self.height
        if self.width:
            self.__json['width'] = self.width
        if self.frames:
            self.__json['frames'] = self.frames
        if self.duration:
            self.__json['duration'] = self.duration
        if self.size:
            self.__json['size'] = self.size
        if self.title:
            self.__json['title'] = self.title
        if self.url:
            self.__json['url'] = self.url


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ImagingExcerptViewableComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ImagingExcerptDicom1Component(BackboneElement):
    '''
    FHIR ImagingExcerptDicom1Component resource

     Methods of accessing using DICOM web technologies.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ImagingExcerptDicom1Component __new__
        '''
        if json == None:
            return None
        else:
            return super(ImagingExcerptDicom1Component, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ImagingExcerptDicom1Component constructor
        '''
        logging.info("FHIR ImagingExcerptDicom1Component: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ImagingExcerptDicom1Component string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ImagingExcerptDicom2Component(BackboneElement):
    '''
    FHIR ImagingExcerptDicom2Component resource

     Methods of accessing using DICOM web technologies.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ImagingExcerptDicom2Component __new__
        '''
        if json == None:
            return None
        else:
            return super(ImagingExcerptDicom2Component, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ImagingExcerptDicom2Component constructor
        '''
        logging.info("FHIR ImagingExcerptDicom2Component: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ImagingExcerptDicom2Component string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ImagingExcerptInstanceComponent(BackboneElement):
    '''
    FHIR ImagingExcerptInstanceComponent resource

     Identity and locating information of the selected DICOM SOP instances.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'dicom':
                    list_to_add.append(ImagingExcerptDicom2Component(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ImagingExcerptInstanceComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ImagingExcerptInstanceComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ImagingExcerptInstanceComponent constructor
        '''
        logging.info("FHIR ImagingExcerptInstanceComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.sopClass = self.__add('sopClass')
        self.uid = self.__add('uid')
        if 'dicom' in self.__json:
            if isinstance(self.__json['dicom'], list):
                self.dicom = self.__add_list('dicom')
            else:
                self.dicom = ImagingExcerptDicom2Component(self.__add('dicom'))
        else:
            self.dicom = None
        if 'frameNumbers' in self.__json:
            if isinstance(self.__json['frameNumbers'], list):
                self.frameNumbers = self.__add_list('frameNumbers')
            else:
                self.frameNumbers = self.__add('frameNumbers')
        else:
            self.frameNumbers = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.sopClass:
            self.__json['sopClass'] = self.sopClass
        if self.uid:
            self.__json['uid'] = self.uid
        if self.dicom:
            self.__json['dicom'] = self.__get_list(self.dicom)
        if self.frameNumbers:
            self.__json['frameNumbers'] = self.__get_list(self.frameNumbers)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ImagingExcerptInstanceComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ImagingExcerptSeriesComponent(BackboneElement):
    '''
    FHIR ImagingExcerptSeriesComponent resource

     Series identity and locating information of the DICOM SOP instances in the selection.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'dicom':
                    list_to_add.append(ImagingExcerptDicom1Component(obj))
                elif key == 'instance':
                    list_to_add.append(ImagingExcerptInstanceComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ImagingExcerptSeriesComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ImagingExcerptSeriesComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ImagingExcerptSeriesComponent constructor
        '''
        logging.info("FHIR ImagingExcerptSeriesComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.uid = self.__add('uid')
        if 'dicom' in self.__json:
            if isinstance(self.__json['dicom'], list):
                self.dicom = self.__add_list('dicom')
            else:
                self.dicom = ImagingExcerptDicom1Component(self.__add('dicom'))
        else:
            self.dicom = None
        if 'instance' in self.__json:
            if isinstance(self.__json['instance'], list):
                self.instance = self.__add_list('instance')
            else:
                self.instance = ImagingExcerptInstanceComponent(self.__add('instance'))
        else:
            self.instance = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.uid:
            self.__json['uid'] = self.uid
        if self.dicom:
            self.__json['dicom'] = self.__get_list(self.dicom)
        if self.instance:
            self.__json['instance'] = self.__get_list(self.instance)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ImagingExcerptSeriesComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ImagingExcerptStudyComponent(BackboneElement):
    '''
    FHIR ImagingExcerptStudyComponent resource

     Study identity and locating information of the DICOM SOP instances in the selection.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'dicom':
                    list_to_add.append(ImagingExcerptDicomComponent(obj))
                elif key == 'viewable':
                    list_to_add.append(ImagingExcerptViewableComponent(obj))
                elif key == 'series':
                    list_to_add.append(ImagingExcerptSeriesComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ImagingExcerptStudyComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ImagingExcerptStudyComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ImagingExcerptStudyComponent constructor
        '''
        logging.info("FHIR ImagingExcerptStudyComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.uid = self.__add('uid')
        self.imagingStudy = Reference(self.__add('imagingStudy'))
        if 'dicom' in self.__json:
            if isinstance(self.__json['dicom'], list):
                self.dicom = self.__add_list('dicom')
            else:
                self.dicom = ImagingExcerptDicomComponent(self.__add('dicom'))
        else:
            self.dicom = None
        if 'viewable' in self.__json:
            if isinstance(self.__json['viewable'], list):
                self.viewable = self.__add_list('viewable')
            else:
                self.viewable = ImagingExcerptViewableComponent(self.__add('viewable'))
        else:
            self.viewable = None
        if 'series' in self.__json:
            if isinstance(self.__json['series'], list):
                self.series = self.__add_list('series')
            else:
                self.series = ImagingExcerptSeriesComponent(self.__add('series'))
        else:
            self.series = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.uid:
            self.__json['uid'] = self.uid
        if self.imagingStudy:
            self.__json['imagingStudy'] = self.imagingStudy.json
        if self.dicom:
            self.__json['dicom'] = self.__get_list(self.dicom)
        if self.viewable:
            self.__json['viewable'] = self.__get_list(self.viewable)
        if self.series:
            self.__json['series'] = self.__get_list(self.series)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ImagingExcerptStudyComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ImagingExcerpt(DomainResource):
    '''
    FHIR ImagingExcerpt resource

     A manifest of a set of DICOM Service-Object Pair Instances (SOP Instances).  The referenced SOP Instances (images or other content) are for a single patient, and may be from one or more studies. The referenced SOP Instances have been selected for a purpose, such as quality assurance, conference, or consult. Reflecting that range of purposes, typical ImagingExcerpt resources may include all SOP Instances in a study (perhaps for sharing through a Health Information Exchange); key images from multiple studies (for reference by a referring or treating physician); a multi-frame ultrasound instance ("cine" video clip) and a set of measurements taken from that instance (for inclusion in a teaching file); and so on. If the element is present, it must have either a @value, an @id, or extensions

    uid ->  Unique identifier of the DICOM Key Object Selection (KOS) representation.
    patient ->  A patient resource reference which is the patient subject of all DICOM SOP Instances in this ImagingExcerpt.
    authoringTime ->  Date and time when the selection of the referenced instances were made. It is (typically) different from the creation date of the selection resource, and from dates associated with the referenced instances (e.g. capture time of the referenced image).
    author ->  Author of ImagingExcerpt. It can be a human author or a device which made the decision of the SOP instances selected. For example, a radiologist selected a set of imaging SOP instances to attach in a diagnostic report, and a CAD application may author a selection to describe SOP instances it used to generate a detection conclusion.
    title ->  The reason for, or significance of, the selection of objects referenced in the resource.
    description ->  Text description of the DICOM SOP instances selected in the ImagingExcerpt. This should be aligned with the content of the title element, and can provide further explanation of the SOP instances in the selection.
    study ->  Study identity and locating information of the DICOM SOP instances in the selection.

    
    '''
    

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'study':
                    list_to_add.append(ImagingExcerptStudyComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ImagingExcerpt __new__
        '''
        if json == None:
            return None
        else:
            return super(ImagingExcerpt, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ImagingExcerpt constructor
        '''
        logging.info("FHIR ImagingExcerpt: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "ImagingExcerpt"
        self.uid = self.__add('uid')
        self.patient = Reference(self.__add('patient'))
        self.authoringTime = DateTime(self.__add('authoringTime'))
        self.author = Reference(self.__add('author'))
        self.title = CodeableConcept(self.__add('title'))
        self.description = self.__add('description')
        if 'study' in self.__json:
            if isinstance(self.__json['study'], list):
                self.study = self.__add_list('study')
            else:
                self.study = ImagingExcerptStudyComponent(self.__add('study'))
        else:
            self.study = None


        # Parent Resource Init
        super(ImagingExcerpt, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.uid:
            self.__json['uid'] = self.uid
        if self.patient:
            self.__json['patient'] = self.patient.json
        if self.authoringTime:
            self.__json['authoringTime'] = self.authoringTime.json
        if self.author:
            self.__json['author'] = self.author.json
        if self.title:
            self.__json['title'] = self.title.json
        if self.description:
            self.__json['description'] = self.description
        if self.study:
            self.__json['study'] = self.__get_list(self.study)

        # Add json attributes
        self.__json = super(ImagingExcerpt, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR ImagingExcerpt string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ImagingObjectSelectionFrameComponent(BackboneElement):
    '''
    FHIR ImagingObjectSelectionFrameComponent resource

     Identity and location information of the frames in the selected instance.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ImagingObjectSelectionFrameComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ImagingObjectSelectionFrameComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ImagingObjectSelectionFrameComponent constructor
        '''
        logging.info("FHIR ImagingObjectSelectionFrameComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ImagingObjectSelectionFrameComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ImagingObjectSelectionInstanceComponent(BackboneElement):
    '''
    FHIR ImagingObjectSelectionInstanceComponent resource

     Identity and locating information of the selected DICOM SOP instances.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'frame':
                    list_to_add.append(ImagingObjectSelectionFrameComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ImagingObjectSelectionInstanceComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ImagingObjectSelectionInstanceComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ImagingObjectSelectionInstanceComponent constructor
        '''
        logging.info("FHIR ImagingObjectSelectionInstanceComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.sopClass = self.__add('sopClass')
        self.uid = self.__add('uid')
        self.url = self.__add('url')
        if 'frame' in self.__json:
            if isinstance(self.__json['frame'], list):
                self.frame = self.__add_list('frame')
            else:
                self.frame = ImagingObjectSelectionFrameComponent(self.__add('frame'))
        else:
            self.frame = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.sopClass:
            self.__json['sopClass'] = self.sopClass
        if self.uid:
            self.__json['uid'] = self.uid
        if self.url:
            self.__json['url'] = self.url
        if self.frame:
            self.__json['frame'] = self.__get_list(self.frame)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ImagingObjectSelectionInstanceComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ImagingObjectSelectionSeriesComponent(BackboneElement):
    '''
    FHIR ImagingObjectSelectionSeriesComponent resource

     Series identity and locating information of the DICOM SOP instances in the selection.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'instance':
                    list_to_add.append(ImagingObjectSelectionInstanceComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ImagingObjectSelectionSeriesComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ImagingObjectSelectionSeriesComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ImagingObjectSelectionSeriesComponent constructor
        '''
        logging.info("FHIR ImagingObjectSelectionSeriesComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.uid = self.__add('uid')
        self.url = self.__add('url')
        if 'instance' in self.__json:
            if isinstance(self.__json['instance'], list):
                self.instance = self.__add_list('instance')
            else:
                self.instance = ImagingObjectSelectionInstanceComponent(self.__add('instance'))
        else:
            self.instance = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.uid:
            self.__json['uid'] = self.uid
        if self.url:
            self.__json['url'] = self.url
        if self.instance:
            self.__json['instance'] = self.__get_list(self.instance)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ImagingObjectSelectionSeriesComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ImagingObjectSelectionStudyComponent(BackboneElement):
    '''
    FHIR ImagingObjectSelectionStudyComponent resource

     Study identity and locating information of the DICOM SOP instances in the selection.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'series':
                    list_to_add.append(ImagingObjectSelectionSeriesComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ImagingObjectSelectionStudyComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ImagingObjectSelectionStudyComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ImagingObjectSelectionStudyComponent constructor
        '''
        logging.info("FHIR ImagingObjectSelectionStudyComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.uid = self.__add('uid')
        self.url = self.__add('url')
        self.imagingStudy = Reference(self.__add('imagingStudy'))
        if 'series' in self.__json:
            if isinstance(self.__json['series'], list):
                self.series = self.__add_list('series')
            else:
                self.series = ImagingObjectSelectionSeriesComponent(self.__add('series'))
        else:
            self.series = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.uid:
            self.__json['uid'] = self.uid
        if self.url:
            self.__json['url'] = self.url
        if self.imagingStudy:
            self.__json['imagingStudy'] = self.imagingStudy.json
        if self.series:
            self.__json['series'] = self.__get_list(self.series)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ImagingObjectSelectionStudyComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ImagingObjectSelection(DomainResource):
    '''
    FHIR ImagingObjectSelection resource

     A manifest of a set of DICOM Service-Object Pair Instances (SOP Instances).  The referenced SOP Instances (images or other content) are for a single patient, and may be from one or more studies. The referenced SOP Instances have been selected for a purpose, such as quality assurance, conference, or consult. Reflecting that range of purposes, typical ImagingObjectSelection resources may include all SOP Instances in a study (perhaps for sharing through a Health Information Exchange); key images from multiple studies (for reference by a referring or treating physician); a multi-frame ultrasound instance ("cine" video clip) and a set of measurements taken from that instance (for inclusion in a teaching file); and so on. If the element is present, it must have either a @value, an @id, or extensions

    uid ->  Instance UID of the DICOM KOS SOP Instances represented in this resource.
    patient ->  A patient resource reference which is the patient subject of all DICOM SOP Instances in this ImagingObjectSelection.
    authoringTime ->  Date and time when the selection of the referenced instances were made. It is (typically) different from the creation date of the selection resource, and from dates associated with the referenced instances (e.g. capture time of the referenced image).
    author ->  Author of ImagingObjectSelection. It can be a human author or a device which made the decision of the SOP instances selected. For example, a radiologist selected a set of imaging SOP instances to attach in a diagnostic report, and a CAD application may author a selection to describe SOP instances it used to generate a detection conclusion.
    title ->  The reason for, or significance of, the selection of objects referenced in the resource.
    description ->  Text description of the DICOM SOP instances selected in the ImagingObjectSelection. This should be aligned with the content of the title element, and can provide further explanation of the SOP instances in the selection.
    study ->  Study identity and locating information of the DICOM SOP instances in the selection.

    # Search parameters
        ImagingObjectSelection.search.author
        ImagingObjectSelection.search.authoring-time
        ImagingObjectSelection.search.identifier
        ImagingObjectSelection.search.patient
        ImagingObjectSelection.search.selected-study
        ImagingObjectSelection.search.title
    '''
    # search parameters
    par = [("author", "reference"),
           ("authoring-time", "date"),
           ("identifier", "uri"),
           ("patient", "reference"),
           ("selected-study", "uri"),
           ("title", "token")]

    search = Params(par, "ImagingObjectSelection")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'study':
                    list_to_add.append(ImagingObjectSelectionStudyComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ImagingObjectSelection __new__
        '''
        if json == None:
            return None
        else:
            return super(ImagingObjectSelection, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ImagingObjectSelection constructor
        '''
        logging.info("FHIR ImagingObjectSelection: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "ImagingObjectSelection"
        self.uid = self.__add('uid')
        self.patient = Reference(self.__add('patient'))
        self.authoringTime = DateTime(self.__add('authoringTime'))
        self.author = Reference(self.__add('author'))
        self.title = CodeableConcept(self.__add('title'))
        self.description = self.__add('description')
        if 'study' in self.__json:
            if isinstance(self.__json['study'], list):
                self.study = self.__add_list('study')
            else:
                self.study = ImagingObjectSelectionStudyComponent(self.__add('study'))
        else:
            self.study = None


        # Parent Resource Init
        super(ImagingObjectSelection, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.uid:
            self.__json['uid'] = self.uid
        if self.patient:
            self.__json['patient'] = self.patient.json
        if self.authoringTime:
            self.__json['authoringTime'] = self.authoringTime.json
        if self.author:
            self.__json['author'] = self.author.json
        if self.title:
            self.__json['title'] = self.title.json
        if self.description:
            self.__json['description'] = self.description
        if self.study:
            self.__json['study'] = self.__get_list(self.study)

        # Add json attributes
        self.__json = super(ImagingObjectSelection, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR ImagingObjectSelection string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ImagingStudyInstanceComponent(BackboneElement):
    '''
    FHIR ImagingStudyInstanceComponent resource

     A single SOP Instance within the series, e.g. an image, or presentation state.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'content':
                    list_to_add.append(Attachment(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ImagingStudyInstanceComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ImagingStudyInstanceComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ImagingStudyInstanceComponent constructor
        '''
        logging.info("FHIR ImagingStudyInstanceComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.uid = self.__add('uid')
        self.number = self.__add('number')
        self.sopClass = self.__add('sopClass')
        self.type = self.__add('type')
        self.title = self.__add('title')
        if 'content' in self.__json:
            if isinstance(self.__json['content'], list):
                self.content = self.__add_list('content')
            else:
                self.content = Attachment(self.__add('content'))
        else:
            self.content = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.uid:
            self.__json['uid'] = self.uid
        if self.number:
            self.__json['number'] = self.number
        if self.sopClass:
            self.__json['sopClass'] = self.sopClass
        if self.type:
            self.__json['type'] = self.type
        if self.title:
            self.__json['title'] = self.title
        if self.content:
            self.__json['content'] = self.__get_list(self.content)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ImagingStudyInstanceComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ImagingStudySeriesComponent(BackboneElement):
    '''
    FHIR ImagingStudySeriesComponent resource

     Each study has one or more series of images or other content.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'instance':
                    list_to_add.append(ImagingStudyInstanceComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ImagingStudySeriesComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ImagingStudySeriesComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ImagingStudySeriesComponent constructor
        '''
        logging.info("FHIR ImagingStudySeriesComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.uid = self.__add('uid')
        self.number = self.__add('number')
        self.modality = Coding(self.__add('modality'))
        self.description = self.__add('description')
        self.numberOfInstances = self.__add('numberOfInstances')
        self.availability = self.__add('availability')
        self.url = self.__add('url')
        self.bodySite = Coding(self.__add('bodySite'))
        self.laterality = Coding(self.__add('laterality'))
        self.started = DateTime(self.__add('started'))
        if 'instance' in self.__json:
            if isinstance(self.__json['instance'], list):
                self.instance = self.__add_list('instance')
            else:
                self.instance = ImagingStudyInstanceComponent(self.__add('instance'))
        else:
            self.instance = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.uid:
            self.__json['uid'] = self.uid
        if self.number:
            self.__json['number'] = self.number
        if self.modality:
            self.__json['modality'] = self.modality.json
        if self.description:
            self.__json['description'] = self.description
        if self.numberOfInstances:
            self.__json['numberOfInstances'] = self.numberOfInstances
        if self.availability:
            self.__json['availability'] = self.availability
        if self.url:
            self.__json['url'] = self.url
        if self.bodySite:
            self.__json['bodySite'] = self.bodySite.json
        if self.laterality:
            self.__json['laterality'] = self.laterality.json
        if self.started:
            self.__json['started'] = self.started.json
        if self.instance:
            self.__json['instance'] = self.__get_list(self.instance)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ImagingStudySeriesComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ImagingStudy(DomainResource):
    '''
    FHIR ImagingStudy resource

     Representation of the content produced in a DICOM imaging study. A study comprises a set of series, each of which includes a set of Service-Object Pair Instances (SOP Instances - images or other data) acquired or produced in a common context.  A series is of only one modality (e.g. X-ray, CT, MR, ultrasound), but a study may have multiple series of different modalities. If the element is present, it must have either a @value, an @id, or extensions

    uid ->  Formal identifier for the study.
    accession ->  Accession Number is an identifier related to some aspect of imaging workflow and data management. Usage may vary across different institutions.  See for instance [IHE Radiology Technical Framework Volume 1 Appendix A](http://www.ihe.net/uploadedFiles/Documents/Radiology/IHE_RAD_TF_Rev13.0_Vol1_FT_2014-07-30.pdf).
    identifier ->  Other identifiers for the study.
    availability ->  Availability of study (online, offline or nearline). "ONLINE"  | "OFFLINE"  | "NEARLINE"  | "UNAVAILABLE" 
    modalityList ->  A list of all the Series.ImageModality values that are actual acquisition modalities, i.e. those in the DICOM Context Group 29 (value set OID 1.2.840.10008.6.1.19).
    patient ->  The patient imaged in the study.
    started ->  Date and Time the study started.
    order ->  A list of the diagnostic orders that resulted in this imaging study being performed.
    referrer ->  The requesting/referring physician.
    interpreter ->  Who read the study and interpreted the images or other content.
    url ->  WADO-RS resource where Study is available.
    numberOfSeries ->  Number of Series in Study.
    numberOfInstances ->  Number of SOP Instances in Study.
    procedure ->  Type of procedure performed.
    description ->  Institution-generated description or classification of the Study performed.
    series ->  Each study has one or more series of images or other content.

    # Search parameters
        ImagingStudy.search.accession
        ImagingStudy.search.bodysite
        ImagingStudy.search.dicom-class
        ImagingStudy.search.modality
        ImagingStudy.search.order
        ImagingStudy.search.patient
        ImagingStudy.search.series
        ImagingStudy.search.started
        ImagingStudy.search.study
        ImagingStudy.search.uid
    '''
    # search parameters
    par = [("accession", "token"),
           ("bodysite", "token"),
           ("dicom-class", "uri"),
           ("modality", "token"),
           ("order", "reference"),
           ("patient", "reference"),
           ("series", "uri"),
           ("started", "date"),
           ("study", "uri"),
           ("uid", "uri")]

    search = Params(par, "ImagingStudy")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'identifier':
                    list_to_add.append(Identifier(obj))
                elif key == 'modalityList':
                    list_to_add.append(Coding(obj))
                elif key == 'order':
                    list_to_add.append(Reference(obj))
                elif key == 'procedure':
                    list_to_add.append(Reference(obj))
                elif key == 'series':
                    list_to_add.append(ImagingStudySeriesComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ImagingStudy __new__
        '''
        if json == None:
            return None
        else:
            return super(ImagingStudy, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ImagingStudy constructor
        '''
        logging.info("FHIR ImagingStudy: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "ImagingStudy"
        self.uid = self.__add('uid')
        self.accession = Identifier(self.__add('accession'))
        if 'identifier' in self.__json:
            if isinstance(self.__json['identifier'], list):
                self.identifier = self.__add_list('identifier')
            else:
                self.identifier = Identifier(self.__add('identifier'))
        else:
            self.identifier = None
        self.availability = self.__add('availability')
        if 'modalityList' in self.__json:
            if isinstance(self.__json['modalityList'], list):
                self.modalityList = self.__add_list('modalityList')
            else:
                self.modalityList = Coding(self.__add('modalityList'))
        else:
            self.modalityList = None
        self.patient = Reference(self.__add('patient'))
        self.started = DateTime(self.__add('started'))
        if 'order' in self.__json:
            if isinstance(self.__json['order'], list):
                self.order = self.__add_list('order')
            else:
                self.order = Reference(self.__add('order'))
        else:
            self.order = None
        self.referrer = Reference(self.__add('referrer'))
        self.interpreter = Reference(self.__add('interpreter'))
        self.url = self.__add('url')
        self.numberOfSeries = self.__add('numberOfSeries')
        self.numberOfInstances = self.__add('numberOfInstances')
        if 'procedure' in self.__json:
            if isinstance(self.__json['procedure'], list):
                self.procedure = self.__add_list('procedure')
            else:
                self.procedure = Reference(self.__add('procedure'))
        else:
            self.procedure = None
        self.description = self.__add('description')
        if 'series' in self.__json:
            if isinstance(self.__json['series'], list):
                self.series = self.__add_list('series')
            else:
                self.series = ImagingStudySeriesComponent(self.__add('series'))
        else:
            self.series = None


        # Parent Resource Init
        super(ImagingStudy, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.uid:
            self.__json['uid'] = self.uid
        if self.accession:
            self.__json['accession'] = self.accession.json
        if self.identifier:
            self.__json['identifier'] = self.__get_list(self.identifier)
        if self.availability:
            self.__json['availability'] = self.availability
        if self.modalityList:
            self.__json['modalityList'] = self.__get_list(self.modalityList)
        if self.patient:
            self.__json['patient'] = self.patient.json
        if self.started:
            self.__json['started'] = self.started.json
        if self.order:
            self.__json['order'] = self.__get_list(self.order)
        if self.referrer:
            self.__json['referrer'] = self.referrer.json
        if self.interpreter:
            self.__json['interpreter'] = self.interpreter.json
        if self.url:
            self.__json['url'] = self.url
        if self.numberOfSeries:
            self.__json['numberOfSeries'] = self.numberOfSeries
        if self.numberOfInstances:
            self.__json['numberOfInstances'] = self.numberOfInstances
        if self.procedure:
            self.__json['procedure'] = self.__get_list(self.procedure)
        if self.description:
            self.__json['description'] = self.description
        if self.series:
            self.__json['series'] = self.__get_list(self.series)

        # Add json attributes
        self.__json = super(ImagingStudy, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR ImagingStudy string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ImmunizationExplanationComponent(BackboneElement):
    '''
    FHIR ImmunizationExplanationComponent resource

     Reasons why a vaccine was or was not administered.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'reason':
                    list_to_add.append(CodeableConcept(obj))
                elif key == 'reasonNotGiven':
                    list_to_add.append(CodeableConcept(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ImmunizationExplanationComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ImmunizationExplanationComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ImmunizationExplanationComponent constructor
        '''
        logging.info("FHIR ImmunizationExplanationComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        if 'reason' in self.__json:
            if isinstance(self.__json['reason'], list):
                self.reason = self.__add_list('reason')
            else:
                self.reason = CodeableConcept(self.__add('reason'))
        else:
            self.reason = None
        if 'reasonNotGiven' in self.__json:
            if isinstance(self.__json['reasonNotGiven'], list):
                self.reasonNotGiven = self.__add_list('reasonNotGiven')
            else:
                self.reasonNotGiven = CodeableConcept(self.__add('reasonNotGiven'))
        else:
            self.reasonNotGiven = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.reason:
            self.__json['reason'] = self.__get_list(self.reason)
        if self.reasonNotGiven:
            self.__json['reasonNotGiven'] = self.__get_list(self.reasonNotGiven)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ImmunizationExplanationComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ImmunizationReactionComponent(BackboneElement):
    '''
    FHIR ImmunizationReactionComponent resource

     Categorical data indicating that an adverse event is associated in time to an immunization.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ImmunizationReactionComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ImmunizationReactionComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ImmunizationReactionComponent constructor
        '''
        logging.info("FHIR ImmunizationReactionComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.date = DateTime(self.__add('date'))
        self.detail = Reference(self.__add('detail'))
        self.reported = Boolean(self.__add('reported'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.date:
            self.__json['date'] = self.date.json
        if self.detail:
            self.__json['detail'] = self.detail.json
        if self.reported:
            self.__json['reported'] = self.reported.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ImmunizationReactionComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ImmunizationVaccinationProtocolComponent(BackboneElement):
    '''
    FHIR ImmunizationVaccinationProtocolComponent resource

     Contains information about the protocol(s) under which the vaccine was administered.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'targetDisease':
                    list_to_add.append(CodeableConcept(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ImmunizationVaccinationProtocolComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ImmunizationVaccinationProtocolComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ImmunizationVaccinationProtocolComponent constructor
        '''
        logging.info("FHIR ImmunizationVaccinationProtocolComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.doseSequence = self.__add('doseSequence')
        self.description = self.__add('description')
        self.authority = Reference(self.__add('authority'))
        self.series = self.__add('series')
        self.seriesDoses = self.__add('seriesDoses')
        if 'targetDisease' in self.__json:
            if isinstance(self.__json['targetDisease'], list):
                self.targetDisease = self.__add_list('targetDisease')
            else:
                self.targetDisease = CodeableConcept(self.__add('targetDisease'))
        else:
            self.targetDisease = None
        self.doseStatus = CodeableConcept(self.__add('doseStatus'))
        self.doseStatusReason = CodeableConcept(self.__add('doseStatusReason'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.doseSequence:
            self.__json['doseSequence'] = self.doseSequence
        if self.description:
            self.__json['description'] = self.description
        if self.authority:
            self.__json['authority'] = self.authority.json
        if self.series:
            self.__json['series'] = self.series
        if self.seriesDoses:
            self.__json['seriesDoses'] = self.seriesDoses
        if self.targetDisease:
            self.__json['targetDisease'] = self.__get_list(self.targetDisease)
        if self.doseStatus:
            self.__json['doseStatus'] = self.doseStatus.json
        if self.doseStatusReason:
            self.__json['doseStatusReason'] = self.doseStatusReason.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ImmunizationVaccinationProtocolComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class Immunization(DomainResource):
    '''
    FHIR Immunization resource

     Describes the event of a patient being administered a vaccination or a record of a vaccination as reported by a patient, a clinician or another party and may include vaccine reaction information and what vaccination protocol was followed. If the element is present, it must have either a @value, an @id, or extensions

    identifier ->  A unique identifier assigned to this immunization record.
    status ->  Indicates the current status of the vaccination event.
    date ->  Date vaccine administered or was to be administered.
    vaccineCode ->  Vaccine that was administered or was to be administered.
    patient ->  The patient who either received or did not receive the immunization.
    wasNotGiven ->  Indicates if the vaccination was or was not given.
    reported ->  True if this administration was reported rather than directly administered.
    performer ->  Clinician who administered the vaccine.
    requester ->  Clinician who ordered the vaccination.
    encounter ->  The visit or admission or other contact between patient and health care provider the immunization was performed as part of.
    manufacturer ->  Name of vaccine manufacturer.
    location ->  The service delivery location where the vaccine administration occurred.
    lotNumber ->  Lot number of the  vaccine product.
    expirationDate ->  Date vaccine batch expires.
    site ->  Body site where vaccine was administered.
    route ->  The path by which the vaccine product is taken into the body.
    doseQuantity ->  The quantity of vaccine product that was administered.
    note ->  Extra information about the immunization that is not conveyed by the other attributes.
    explanation ->  Reasons why a vaccine was or was not administered.
    reaction ->  Categorical data indicating that an adverse event is associated in time to an immunization.
    vaccinationProtocol ->  Contains information about the protocol(s) under which the vaccine was administered.

    # Search parameters
        Immunization.search.date
        Immunization.search.dose-sequence
        Immunization.search.identifier
        Immunization.search.location
        Immunization.search.lot-number
        Immunization.search.manufacturer
        Immunization.search.notgiven
        Immunization.search.patient
        Immunization.search.performer
        Immunization.search.reaction
        Immunization.search.reaction-date
        Immunization.search.reason
        Immunization.search.reason-not-given
        Immunization.search.requester
        Immunization.search.status
        Immunization.search.vaccine-code
    '''
    # search parameters
    par = [("date", "date"),
           ("dose-sequence", "number"),
           ("identifier", "token"),
           ("location", "reference"),
           ("lot-number", "string"),
           ("manufacturer", "reference"),
           ("notgiven", "token"),
           ("patient", "reference"),
           ("performer", "reference"),
           ("reaction", "reference"),
           ("reaction-date", "date"),
           ("reason", "token"),
           ("reason-not-given", "token"),
           ("requester", "reference"),
           ("status", "token"),
           ("vaccine-code", "token")]

    search = Params(par, "Immunization")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'identifier':
                    list_to_add.append(Identifier(obj))
                elif key == 'note':
                    list_to_add.append(Annotation(obj))
                elif key == 'reaction':
                    list_to_add.append(ImmunizationReactionComponent(obj))
                elif key == 'vaccinationProtocol':
                    list_to_add.append(ImmunizationVaccinationProtocolComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR Immunization __new__
        '''
        if json == None:
            return None
        else:
            return super(Immunization, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR Immunization constructor
        '''
        logging.info("FHIR Immunization: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "Immunization"
        if 'identifier' in self.__json:
            if isinstance(self.__json['identifier'], list):
                self.identifier = self.__add_list('identifier')
            else:
                self.identifier = Identifier(self.__add('identifier'))
        else:
            self.identifier = None
        self.status = self.__add('status')
        self.date = DateTime(self.__add('date'))
        self.vaccineCode = CodeableConcept(self.__add('vaccineCode'))
        self.patient = Reference(self.__add('patient'))
        self.wasNotGiven = Boolean(self.__add('wasNotGiven'))
        self.reported = Boolean(self.__add('reported'))
        self.performer = Reference(self.__add('performer'))
        self.requester = Reference(self.__add('requester'))
        self.encounter = Reference(self.__add('encounter'))
        self.manufacturer = Reference(self.__add('manufacturer'))
        self.location = Reference(self.__add('location'))
        self.lotNumber = self.__add('lotNumber')
        self.expirationDate = Date(self.__add('expirationDate'))
        self.site = CodeableConcept(self.__add('site'))
        self.route = CodeableConcept(self.__add('route'))
        self.doseQuantity = SimpleQuantity(self.__add('doseQuantity'))
        if 'note' in self.__json:
            if isinstance(self.__json['note'], list):
                self.note = self.__add_list('note')
            else:
                self.note = Annotation(self.__add('note'))
        else:
            self.note = None
        self.explanation = ImmunizationExplanationComponent(self.__add('explanation'))
        if 'reaction' in self.__json:
            if isinstance(self.__json['reaction'], list):
                self.reaction = self.__add_list('reaction')
            else:
                self.reaction = ImmunizationReactionComponent(self.__add('reaction'))
        else:
            self.reaction = None
        if 'vaccinationProtocol' in self.__json:
            if isinstance(self.__json['vaccinationProtocol'], list):
                self.vaccinationProtocol = self.__add_list('vaccinationProtocol')
            else:
                self.vaccinationProtocol = ImmunizationVaccinationProtocolComponent(self.__add('vaccinationProtocol'))
        else:
            self.vaccinationProtocol = None


        # Parent Resource Init
        super(Immunization, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identifier:
            self.__json['identifier'] = self.__get_list(self.identifier)
        if self.status:
            self.__json['status'] = self.status
        if self.date:
            self.__json['date'] = self.date.json
        if self.vaccineCode:
            self.__json['vaccineCode'] = self.vaccineCode.json
        if self.patient:
            self.__json['patient'] = self.patient.json
        if self.wasNotGiven:
            self.__json['wasNotGiven'] = self.wasNotGiven.json
        if self.reported:
            self.__json['reported'] = self.reported.json
        if self.performer:
            self.__json['performer'] = self.performer.json
        if self.requester:
            self.__json['requester'] = self.requester.json
        if self.encounter:
            self.__json['encounter'] = self.encounter.json
        if self.manufacturer:
            self.__json['manufacturer'] = self.manufacturer.json
        if self.location:
            self.__json['location'] = self.location.json
        if self.lotNumber:
            self.__json['lotNumber'] = self.lotNumber
        if self.expirationDate:
            self.__json['expirationDate'] = self.expirationDate.json
        if self.site:
            self.__json['site'] = self.site.json
        if self.route:
            self.__json['route'] = self.route.json
        if self.doseQuantity:
            self.__json['doseQuantity'] = self.doseQuantity.json
        if self.note:
            self.__json['note'] = self.__get_list(self.note)
        if self.explanation:
            self.__json['explanation'] = self.explanation.json
        if self.reaction:
            self.__json['reaction'] = self.__get_list(self.reaction)
        if self.vaccinationProtocol:
            self.__json['vaccinationProtocol'] = self.__get_list(self.vaccinationProtocol)

        # Add json attributes
        self.__json = super(Immunization, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR Immunization string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ImmunizationRecommendationDateCriterionComponent(BackboneElement):
    '''
    FHIR ImmunizationRecommendationDateCriterionComponent resource

     Vaccine date recommendations.  For example, earliest date to administer, latest date to administer, etc.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ImmunizationRecommendationDateCriterionComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ImmunizationRecommendationDateCriterionComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ImmunizationRecommendationDateCriterionComponent constructor
        '''
        logging.info("FHIR ImmunizationRecommendationDateCriterionComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ImmunizationRecommendationDateCriterionComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ImmunizationRecommendationProtocolComponent(BackboneElement):
    '''
    FHIR ImmunizationRecommendationProtocolComponent resource

     Contains information about the protocol under which the vaccine was administered.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ImmunizationRecommendationProtocolComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ImmunizationRecommendationProtocolComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ImmunizationRecommendationProtocolComponent constructor
        '''
        logging.info("FHIR ImmunizationRecommendationProtocolComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ImmunizationRecommendationProtocolComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ImmunizationRecommendationRecommendationComponent(BackboneElement):
    '''
    FHIR ImmunizationRecommendationRecommendationComponent resource

     Vaccine administration recommendations.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'dateCriterion':
                    list_to_add.append(ImmunizationRecommendationDateCriterionComponent(obj))
                elif key == 'supportingImmunization':
                    list_to_add.append(Reference(obj))
                elif key == 'supportingPatientInformation':
                    list_to_add.append(Reference(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ImmunizationRecommendationRecommendationComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ImmunizationRecommendationRecommendationComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ImmunizationRecommendationRecommendationComponent constructor
        '''
        logging.info("FHIR ImmunizationRecommendationRecommendationComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.date = DateTime(self.__add('date'))
        self.vaccineCode = CodeableConcept(self.__add('vaccineCode'))
        self.doseNumber = self.__add('doseNumber')
        self.forecastStatus = CodeableConcept(self.__add('forecastStatus'))
        if 'dateCriterion' in self.__json:
            if isinstance(self.__json['dateCriterion'], list):
                self.dateCriterion = self.__add_list('dateCriterion')
            else:
                self.dateCriterion = ImmunizationRecommendationDateCriterionComponent(self.__add('dateCriterion'))
        else:
            self.dateCriterion = None
        self.protocol = ImmunizationRecommendationProtocolComponent(self.__add('protocol'))
        if 'supportingImmunization' in self.__json:
            if isinstance(self.__json['supportingImmunization'], list):
                self.supportingImmunization = self.__add_list('supportingImmunization')
            else:
                self.supportingImmunization = Reference(self.__add('supportingImmunization'))
        else:
            self.supportingImmunization = None
        if 'supportingPatientInformation' in self.__json:
            if isinstance(self.__json['supportingPatientInformation'], list):
                self.supportingPatientInformation = self.__add_list('supportingPatientInformation')
            else:
                self.supportingPatientInformation = Reference(self.__add('supportingPatientInformation'))
        else:
            self.supportingPatientInformation = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.date:
            self.__json['date'] = self.date.json
        if self.vaccineCode:
            self.__json['vaccineCode'] = self.vaccineCode.json
        if self.doseNumber:
            self.__json['doseNumber'] = self.doseNumber
        if self.forecastStatus:
            self.__json['forecastStatus'] = self.forecastStatus.json
        if self.dateCriterion:
            self.__json['dateCriterion'] = self.__get_list(self.dateCriterion)
        if self.protocol:
            self.__json['protocol'] = self.protocol.json
        if self.supportingImmunization:
            self.__json['supportingImmunization'] = self.__get_list(self.supportingImmunization)
        if self.supportingPatientInformation:
            self.__json['supportingPatientInformation'] = self.__get_list(self.supportingPatientInformation)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ImmunizationRecommendationRecommendationComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ImmunizationRecommendation(DomainResource):
    '''
    FHIR ImmunizationRecommendation resource

     A patient's point-in-time immunization and recommendation (i.e. forecasting a patient's immunization eligibility according to a published schedule) with optional supporting justification. If the element is present, it must have either a @value, an @id, or extensions

    identifier ->  A unique identifier assigned to this particular recommendation record.
    patient ->  The patient for whom the recommendations are for.
    recommendation ->  Vaccine administration recommendations.

    # Search parameters
        ImmunizationRecommendation.search.date
        ImmunizationRecommendation.search.dose-number
        ImmunizationRecommendation.search.dose-sequence
        ImmunizationRecommendation.search.identifier
        ImmunizationRecommendation.search.information
        ImmunizationRecommendation.search.patient
        ImmunizationRecommendation.search.status
        ImmunizationRecommendation.search.support
        ImmunizationRecommendation.search.vaccine-type
    '''
    # search parameters
    par = [("date", "date"),
           ("dose-number", "number"),
           ("dose-sequence", "number"),
           ("identifier", "token"),
           ("information", "reference"),
           ("patient", "reference"),
           ("status", "token"),
           ("support", "reference"),
           ("vaccine-type", "token")]

    search = Params(par, "ImmunizationRecommendation")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'identifier':
                    list_to_add.append(Identifier(obj))
                elif key == 'recommendation':
                    list_to_add.append(ImmunizationRecommendationRecommendationComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ImmunizationRecommendation __new__
        '''
        if json == None:
            return None
        else:
            return super(ImmunizationRecommendation, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ImmunizationRecommendation constructor
        '''
        logging.info("FHIR ImmunizationRecommendation: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "ImmunizationRecommendation"
        if 'identifier' in self.__json:
            if isinstance(self.__json['identifier'], list):
                self.identifier = self.__add_list('identifier')
            else:
                self.identifier = Identifier(self.__add('identifier'))
        else:
            self.identifier = None
        self.patient = Reference(self.__add('patient'))
        if 'recommendation' in self.__json:
            if isinstance(self.__json['recommendation'], list):
                self.recommendation = self.__add_list('recommendation')
            else:
                self.recommendation = ImmunizationRecommendationRecommendationComponent(self.__add('recommendation'))
        else:
            self.recommendation = None


        # Parent Resource Init
        super(ImmunizationRecommendation, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identifier:
            self.__json['identifier'] = self.__get_list(self.identifier)
        if self.patient:
            self.__json['patient'] = self.patient.json
        if self.recommendation:
            self.__json['recommendation'] = self.__get_list(self.recommendation)

        # Add json attributes
        self.__json = super(ImmunizationRecommendation, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR ImmunizationRecommendation string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ImplementationGuideContactComponent(BackboneElement):
    '''
    FHIR ImplementationGuideContactComponent resource

     Contacts to assist a user in finding and communicating with the publisher.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'telecom':
                    list_to_add.append(ContactPoint(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ImplementationGuideContactComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ImplementationGuideContactComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ImplementationGuideContactComponent constructor
        '''
        logging.info("FHIR ImplementationGuideContactComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.name = self.__add('name')
        if 'telecom' in self.__json:
            if isinstance(self.__json['telecom'], list):
                self.telecom = self.__add_list('telecom')
            else:
                self.telecom = ContactPoint(self.__add('telecom'))
        else:
            self.telecom = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.name:
            self.__json['name'] = self.name
        if self.telecom:
            self.__json['telecom'] = self.__get_list(self.telecom)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ImplementationGuideContactComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ImplementationGuideDependencyComponent(BackboneElement):
    '''
    FHIR ImplementationGuideDependencyComponent resource

     Another implementation guide that this implementation depends on. Typically, an implementation guide uses value sets, profiles etc.defined in other implementation guides.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ImplementationGuideDependencyComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ImplementationGuideDependencyComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ImplementationGuideDependencyComponent constructor
        '''
        logging.info("FHIR ImplementationGuideDependencyComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.type = self.__add('type')
        self.uri = self.__add('uri')



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.type:
            self.__json['type'] = self.type
        if self.uri:
            self.__json['uri'] = self.uri


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ImplementationGuideDependencyComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ImplementationGuideResourceComponent(BackboneElement):
    '''
    FHIR ImplementationGuideResourceComponent resource

     A resource that is part of the implementation guide. Conformance resources (value set, structure definition, conformance statements etc.) are obvious candidates for inclusion, but any kind of resource can be included as an example resource.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ImplementationGuideResourceComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ImplementationGuideResourceComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ImplementationGuideResourceComponent constructor
        '''
        logging.info("FHIR ImplementationGuideResourceComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.example = Boolean(self.__add('example'))
        self.name = self.__add('name')
        self.description = self.__add('description')
        self.acronym = self.__add('acronym')
        self.exampleFor = Reference(self.__add('exampleFor'))
        self.sourceUri = self.__add('sourceUri')
        self.sourceReference = Reference(self.__add('sourceReference'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.example:
            self.__json['example'] = self.example.json
        if self.name:
            self.__json['name'] = self.name
        if self.description:
            self.__json['description'] = self.description
        if self.acronym:
            self.__json['acronym'] = self.acronym
        if self.exampleFor:
            self.__json['exampleFor'] = self.exampleFor.json
        if self.sourceUri:
            self.__json['sourceUri'] = self.sourceUri
        if self.sourceReference:
            self.__json['sourceReference'] = self.sourceReference.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ImplementationGuideResourceComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ImplementationGuidePackageComponent(BackboneElement):
    '''
    FHIR ImplementationGuidePackageComponent resource

     A logical group of resources. Logical groups can be used when building pages.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'resource':
                    list_to_add.append(ImplementationGuideResourceComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ImplementationGuidePackageComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ImplementationGuidePackageComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ImplementationGuidePackageComponent constructor
        '''
        logging.info("FHIR ImplementationGuidePackageComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.name = self.__add('name')
        self.description = self.__add('description')
        if 'resource' in self.__json:
            if isinstance(self.__json['resource'], list):
                self.resource = self.__add_list('resource')
            else:
                self.resource = ImplementationGuideResourceComponent(self.__add('resource'))
        else:
            self.resource = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.name:
            self.__json['name'] = self.name
        if self.description:
            self.__json['description'] = self.description
        if self.resource:
            self.__json['resource'] = self.__get_list(self.resource)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ImplementationGuidePackageComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ImplementationGuideGlobalComponent(BackboneElement):
    '''
    FHIR ImplementationGuideGlobalComponent resource

     A set of profiles that all resources covered by this implementation guide must conform to.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ImplementationGuideGlobalComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ImplementationGuideGlobalComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ImplementationGuideGlobalComponent constructor
        '''
        logging.info("FHIR ImplementationGuideGlobalComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.type = self.__add('type')
        self.profile = Reference(self.__add('profile'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.type:
            self.__json['type'] = self.type
        if self.profile:
            self.__json['profile'] = self.profile.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ImplementationGuideGlobalComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ImplementationGuidePageComponent(BackboneElement):
    '''
    FHIR ImplementationGuidePageComponent resource

     A page / section in the implementation guide. The root page is the implementation guide home page.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'page':
                    list_to_add.append(ImplementationGuidePageComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ImplementationGuidePageComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ImplementationGuidePageComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ImplementationGuidePageComponent constructor
        '''
        logging.info("FHIR ImplementationGuidePageComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.source = self.__add('source')
        self.name = self.__add('name')
        self.kind = self.__add('kind')
        if 'type' in self.__json:
            if isinstance(self.__json['type'], list):
                self.type = self.__add_list('type')
            else:
                self.type = self.__add('type')
        else:
            self.type = None
        if 'package' in self.__json:
            if isinstance(self.__json['package'], list):
                self.package = self.__add_list('package')
            else:
                self.package = self.__add('package')
        else:
            self.package = None
        self.format = self.__add('format')
        if 'page' in self.__json:
            if isinstance(self.__json['page'], list):
                self.page = self.__add_list('page')
            else:
                self.page = ImplementationGuidePageComponent(self.__add('page'))
        else:
            self.page = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.source:
            self.__json['source'] = self.source
        if self.name:
            self.__json['name'] = self.name
        if self.kind:
            self.__json['kind'] = self.kind
        if self.type:
            self.__json['type'] = self.__get_list(self.type)
        if self.package:
            self.__json['package'] = self.__get_list(self.package)
        if self.format:
            self.__json['format'] = self.format
        if self.page:
            self.__json['page'] = self.__get_list(self.page)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ImplementationGuidePageComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ImplementationGuide(DomainResource):
    '''
    FHIR ImplementationGuide resource

     A set of rules or how FHIR is used to solve a particular problem. This resource is used to gather all the parts of an implementation guide into a logical whole, and to publish a computable definition of all the parts. If the element is present, it must have either a @value, an @id, or extensions

    url ->  An absolute URL that is used to identify this implementation guide when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this implementation guide is (or will be) published.
    version ->  The identifier that is used to identify this version of the Implementation Guide when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the Implementation Guide author manually.
    name ->  A free text natural language name identifying the Implementation Guide.
    status ->  The status of the Implementation Guide. 
    experimental ->  This Implementation Guide was authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
    publisher ->  The name of the individual or organization that published the implementation guide.
    contact ->  Contacts to assist a user in finding and communicating with the publisher.
    date ->  The date this version of the implementation guide was published. The date must change when the business version changes, if it does, and it must change if the status code changes. In addition, it should change when the substantive content of the implementation guide changes.
    description ->  A free text natural language description of the Implementation Guide and its use.
    useContext ->  The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching of implementation guides. The most common use of this element is to represent the country / jurisdiction for which this implementation guide was defined.
    copyright ->  A copyright statement relating to the implementation guide and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the details of the constraints and mappings.
    fhirVersion ->  The version of the FHIR specification on which this ImplementationGuide is based - this is the formal version of the specification, without the revision number, e.g. [publication].[major].[minor], which is 1.4.0 for this version.
    dependency ->  Another implementation guide that this implementation depends on. Typically, an implementation guide uses value sets, profiles etc.defined in other implementation guides.
    package ->  A logical group of resources. Logical groups can be used when building pages.
    global_ ->  A set of profiles that all resources covered by this implementation guide must conform to.
    binary ->  A binary file that is included in the  implementation guide when it is published.
    page ->  A page / section in the implementation guide. The root page is the implementation guide home page.

    # Search parameters
        ImplementationGuide.search.context
        ImplementationGuide.search.date
        ImplementationGuide.search.dependency
        ImplementationGuide.search.description
        ImplementationGuide.search.experimental
        ImplementationGuide.search.name
        ImplementationGuide.search.publisher
        ImplementationGuide.search.status
        ImplementationGuide.search.url
        ImplementationGuide.search.version
    '''
    # search parameters
    par = [("context", "token"),
           ("date", "date"),
           ("dependency", "uri"),
           ("description", "string"),
           ("experimental", "token"),
           ("name", "string"),
           ("publisher", "string"),
           ("status", "token"),
           ("url", "uri"),
           ("version", "token")]

    search = Params(par, "ImplementationGuide")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'contact':
                    list_to_add.append(ImplementationGuideContactComponent(obj))
                elif key == 'useContext':
                    list_to_add.append(CodeableConcept(obj))
                elif key == 'dependency':
                    list_to_add.append(ImplementationGuideDependencyComponent(obj))
                elif key == 'package':
                    list_to_add.append(ImplementationGuidePackageComponent(obj))
                elif key == 'global_':
                    list_to_add.append(ImplementationGuideGlobalComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ImplementationGuide __new__
        '''
        if json == None:
            return None
        else:
            return super(ImplementationGuide, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ImplementationGuide constructor
        '''
        logging.info("FHIR ImplementationGuide: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "ImplementationGuide"
        self.url = self.__add('url')
        self.version = self.__add('version')
        self.name = self.__add('name')
        self.status = self.__add('status')
        self.experimental = Boolean(self.__add('experimental'))
        self.publisher = self.__add('publisher')
        if 'contact' in self.__json:
            if isinstance(self.__json['contact'], list):
                self.contact = self.__add_list('contact')
            else:
                self.contact = ImplementationGuideContactComponent(self.__add('contact'))
        else:
            self.contact = None
        self.date = DateTime(self.__add('date'))
        self.description = self.__add('description')
        if 'useContext' in self.__json:
            if isinstance(self.__json['useContext'], list):
                self.useContext = self.__add_list('useContext')
            else:
                self.useContext = CodeableConcept(self.__add('useContext'))
        else:
            self.useContext = None
        self.copyright = self.__add('copyright')
        self.fhirVersion = self.__add('fhirVersion')
        if 'dependency' in self.__json:
            if isinstance(self.__json['dependency'], list):
                self.dependency = self.__add_list('dependency')
            else:
                self.dependency = ImplementationGuideDependencyComponent(self.__add('dependency'))
        else:
            self.dependency = None
        if 'package' in self.__json:
            if isinstance(self.__json['package'], list):
                self.package = self.__add_list('package')
            else:
                self.package = ImplementationGuidePackageComponent(self.__add('package'))
        else:
            self.package = None
        if 'global_' in self.__json:
            if isinstance(self.__json['global_'], list):
                self.global_ = self.__add_list('global_')
            else:
                self.global_ = ImplementationGuideGlobalComponent(self.__add('global_'))
        else:
            self.global_ = None
        if 'binary' in self.__json:
            if isinstance(self.__json['binary'], list):
                self.binary = self.__add_list('binary')
            else:
                self.binary = self.__add('binary')
        else:
            self.binary = None
        self.page = ImplementationGuidePageComponent(self.__add('page'))


        # Parent Resource Init
        super(ImplementationGuide, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.url:
            self.__json['url'] = self.url
        if self.version:
            self.__json['version'] = self.version
        if self.name:
            self.__json['name'] = self.name
        if self.status:
            self.__json['status'] = self.status
        if self.experimental:
            self.__json['experimental'] = self.experimental.json
        if self.publisher:
            self.__json['publisher'] = self.publisher
        if self.contact:
            self.__json['contact'] = self.__get_list(self.contact)
        if self.date:
            self.__json['date'] = self.date.json
        if self.description:
            self.__json['description'] = self.description
        if self.useContext:
            self.__json['useContext'] = self.__get_list(self.useContext)
        if self.copyright:
            self.__json['copyright'] = self.copyright
        if self.fhirVersion:
            self.__json['fhirVersion'] = self.fhirVersion
        if self.dependency:
            self.__json['dependency'] = self.__get_list(self.dependency)
        if self.package:
            self.__json['package'] = self.__get_list(self.package)
        if self.global_:
            self.__json['global_'] = self.__get_list(self.global_)
        if self.binary:
            self.__json['binary'] = self.__get_list(self.binary)
        if self.page:
            self.__json['page'] = self.page.json

        # Add json attributes
        self.__json = super(ImplementationGuide, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR ImplementationGuide string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class LibraryModelComponent(BackboneElement):
    '''
    FHIR LibraryModelComponent resource

     A model element describes the model and version used by the library.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR LibraryModelComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(LibraryModelComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR LibraryModelComponent constructor
        '''
        logging.info("FHIR LibraryModelComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.name = self.__add('name')
        self.identifier = self.__add('identifier')
        self.version = self.__add('version')



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.name:
            self.__json['name'] = self.name
        if self.identifier:
            self.__json['identifier'] = self.identifier
        if self.version:
            self.__json['version'] = self.version


        return self.__json
        
    def __repr__(self):
        '''
        FHIR LibraryModelComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class LibraryLibraryComponent(BackboneElement):
    '''
    FHIR LibraryLibraryComponent resource

     A library element describes a library referenced by this library.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR LibraryLibraryComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(LibraryLibraryComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR LibraryLibraryComponent constructor
        '''
        logging.info("FHIR LibraryLibraryComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.name = self.__add('name')
        self.identifier = self.__add('identifier')
        self.version = self.__add('version')
        self.documentAttachment = Attachment(self.__add('documentAttachment'))
        self.documentReference = Reference(self.__add('documentReference'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.name:
            self.__json['name'] = self.name
        if self.identifier:
            self.__json['identifier'] = self.identifier
        if self.version:
            self.__json['version'] = self.version
        if self.documentAttachment:
            self.__json['documentAttachment'] = self.documentAttachment.json
        if self.documentReference:
            self.__json['documentReference'] = self.documentReference.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR LibraryLibraryComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class LibraryCodeSystemComponent(BackboneElement):
    '''
    FHIR LibraryCodeSystemComponent resource

     A code system definition used within the library.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR LibraryCodeSystemComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(LibraryCodeSystemComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR LibraryCodeSystemComponent constructor
        '''
        logging.info("FHIR LibraryCodeSystemComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.name = self.__add('name')
        self.identifier = self.__add('identifier')
        self.version = self.__add('version')



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.name:
            self.__json['name'] = self.name
        if self.identifier:
            self.__json['identifier'] = self.identifier
        if self.version:
            self.__json['version'] = self.version


        return self.__json
        
    def __repr__(self):
        '''
        FHIR LibraryCodeSystemComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class LibraryValueSetComponent(BackboneElement):
    '''
    FHIR LibraryValueSetComponent resource

     A value set definition referenced by the library.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR LibraryValueSetComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(LibraryValueSetComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR LibraryValueSetComponent constructor
        '''
        logging.info("FHIR LibraryValueSetComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.name = self.__add('name')
        self.identifier = self.__add('identifier')
        self.version = self.__add('version')
        if 'codeSystem' in self.__json:
            if isinstance(self.__json['codeSystem'], list):
                self.codeSystem = self.__add_list('codeSystem')
            else:
                self.codeSystem = self.__add('codeSystem')
        else:
            self.codeSystem = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.name:
            self.__json['name'] = self.name
        if self.identifier:
            self.__json['identifier'] = self.identifier
        if self.version:
            self.__json['version'] = self.version
        if self.codeSystem:
            self.__json['codeSystem'] = self.__get_list(self.codeSystem)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR LibraryValueSetComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class Library(DomainResource):
    '''
    FHIR Library resource

     The Library resource provides a representation container for knowledge artifact component definitions. It is effectively an exposure of the header information for a CQL/ELM library. If the element is present, it must have either a @value, an @id, or extensions

    moduleMetadata ->  The metadata for the library, including publishing, life-cycle, version, documentation, and supporting evidence.
    model ->  A model element describes the model and version used by the library.
    library ->  A library element describes a library referenced by this library.
    codeSystem ->  A code system definition used within the library.
    valueSet ->  A value set definition referenced by the library.
    parameter ->  The parameter element defines parameters used by the library.
    dataRequirement ->  The dataRequirement element specifies a data requirement used by some expression within the library.
    document ->  The content of the library as an Attachment. The content may be a reference to a url, or may be directly embedded as a base-64 string. Either way, the content is expected to be a CQL or ELM document.

    
    '''
    

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'model':
                    list_to_add.append(LibraryModelComponent(obj))
                elif key == 'library':
                    list_to_add.append(LibraryLibraryComponent(obj))
                elif key == 'codeSystem':
                    list_to_add.append(LibraryCodeSystemComponent(obj))
                elif key == 'valueSet':
                    list_to_add.append(LibraryValueSetComponent(obj))
                elif key == 'parameter':
                    list_to_add.append(ParameterDefinition(obj))
                elif key == 'dataRequirement':
                    list_to_add.append(DataRequirement(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR Library __new__
        '''
        if json == None:
            return None
        else:
            return super(Library, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR Library constructor
        '''
        logging.info("FHIR Library: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "Library"
        self.moduleMetadata = ModuleMetadata(self.__add('moduleMetadata'))
        if 'model' in self.__json:
            if isinstance(self.__json['model'], list):
                self.model = self.__add_list('model')
            else:
                self.model = LibraryModelComponent(self.__add('model'))
        else:
            self.model = None
        if 'library' in self.__json:
            if isinstance(self.__json['library'], list):
                self.library = self.__add_list('library')
            else:
                self.library = LibraryLibraryComponent(self.__add('library'))
        else:
            self.library = None
        if 'codeSystem' in self.__json:
            if isinstance(self.__json['codeSystem'], list):
                self.codeSystem = self.__add_list('codeSystem')
            else:
                self.codeSystem = LibraryCodeSystemComponent(self.__add('codeSystem'))
        else:
            self.codeSystem = None
        if 'valueSet' in self.__json:
            if isinstance(self.__json['valueSet'], list):
                self.valueSet = self.__add_list('valueSet')
            else:
                self.valueSet = LibraryValueSetComponent(self.__add('valueSet'))
        else:
            self.valueSet = None
        if 'parameter' in self.__json:
            if isinstance(self.__json['parameter'], list):
                self.parameter = self.__add_list('parameter')
            else:
                self.parameter = ParameterDefinition(self.__add('parameter'))
        else:
            self.parameter = None
        if 'dataRequirement' in self.__json:
            if isinstance(self.__json['dataRequirement'], list):
                self.dataRequirement = self.__add_list('dataRequirement')
            else:
                self.dataRequirement = DataRequirement(self.__add('dataRequirement'))
        else:
            self.dataRequirement = None
        self.document = Attachment(self.__add('document'))


        # Parent Resource Init
        super(Library, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.moduleMetadata:
            self.__json['moduleMetadata'] = self.moduleMetadata.json
        if self.model:
            self.__json['model'] = self.__get_list(self.model)
        if self.library:
            self.__json['library'] = self.__get_list(self.library)
        if self.codeSystem:
            self.__json['codeSystem'] = self.__get_list(self.codeSystem)
        if self.valueSet:
            self.__json['valueSet'] = self.__get_list(self.valueSet)
        if self.parameter:
            self.__json['parameter'] = self.__get_list(self.parameter)
        if self.dataRequirement:
            self.__json['dataRequirement'] = self.__get_list(self.dataRequirement)
        if self.document:
            self.__json['document'] = self.document.json

        # Add json attributes
        self.__json = super(Library, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR Library string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class LinkageItemComponent(BackboneElement):
    '''
    FHIR LinkageItemComponent resource

     Identifies one of the records that is considered to refer to the same real-world occurrence as well as how the items hould be evaluated within the collection of linked items.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR LinkageItemComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(LinkageItemComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR LinkageItemComponent constructor
        '''
        logging.info("FHIR LinkageItemComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.type = self.__add('type')
        self.resource = Reference(self.__add('resource'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.type:
            self.__json['type'] = self.type
        if self.resource:
            self.__json['resource'] = self.resource.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR LinkageItemComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class Linkage(DomainResource):
    '''
    FHIR Linkage resource

     Identifies two or more records (resource instances) that are referring to the same real-world "occurrence". If the element is present, it must have either a @value, an @id, or extensions

    author ->  Identifies the user or organization responsible for asserting the linkages and who establishes the context for evaluating the nature of each linkage.
    item ->  Identifies one of the records that is considered to refer to the same real-world occurrence as well as how the items hould be evaluated within the collection of linked items.

    
    '''
    

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'item':
                    list_to_add.append(LinkageItemComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR Linkage __new__
        '''
        if json == None:
            return None
        else:
            return super(Linkage, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR Linkage constructor
        '''
        logging.info("FHIR Linkage: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "Linkage"
        self.author = Reference(self.__add('author'))
        if 'item' in self.__json:
            if isinstance(self.__json['item'], list):
                self.item = self.__add_list('item')
            else:
                self.item = LinkageItemComponent(self.__add('item'))
        else:
            self.item = None


        # Parent Resource Init
        super(Linkage, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.author:
            self.__json['author'] = self.author.json
        if self.item:
            self.__json['item'] = self.__get_list(self.item)

        # Add json attributes
        self.__json = super(Linkage, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR Linkage string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ListEntryComponent(BackboneElement):
    '''
    FHIR ListEntryComponent resource

     Entries in this list.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ListEntryComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ListEntryComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ListEntryComponent constructor
        '''
        logging.info("FHIR ListEntryComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.flag = CodeableConcept(self.__add('flag'))
        self.deleted = Boolean(self.__add('deleted'))
        self.date = DateTime(self.__add('date'))
        self.item = Reference(self.__add('item'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.flag:
            self.__json['flag'] = self.flag.json
        if self.deleted:
            self.__json['deleted'] = self.deleted.json
        if self.date:
            self.__json['date'] = self.date.json
        if self.item:
            self.__json['item'] = self.item.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ListEntryComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class List(DomainResource):
    '''
    FHIR List resource

     A set of information summarized from a list of other resources. If the element is present, it must have either a @value, an @id, or extensions

    identifier ->  Identifier for the List assigned for business purposes outside the context of FHIR.
    status ->  Indicates the current state of this list. 
    mode ->  How this list was prepared - whether it is a working list that is suitable for being maintained on an ongoing basis, or if it represents a snapshot of a list of items from another source, or whether it is a prepared list where items may be marked as added, modified or deleted. 
    title ->  A label for the list assigned by the author.
    code ->  This code defines the purpose of the list - why it was created.
    subject ->  The common subject (or patient) of the resources that are in the list, if there is one.
    encounter ->  The encounter that is the context in which this list was created.
    date ->  The date that the list was prepared.
    source ->  The entity responsible for deciding what the contents of the list were. Where the list was created by a human, this is the same as the author of the list.
    orderedBy ->  What order applies to the items in the list.
    note ->  Comments that apply to the overall list.
    entry ->  Entries in this list.
    emptyReason ->  If the list is empty, why the list is empty.

    # Search parameters
        List.search.code
        List.search.date
        List.search.empty-reason
        List.search.encounter
        List.search.item
        List.search.notes
        List.search.patient
        List.search.source
        List.search.status
        List.search.subject
        List.search.title
    '''
    # search parameters
    par = [("code", "token"),
           ("date", "date"),
           ("empty-reason", "token"),
           ("encounter", "reference"),
           ("item", "reference"),
           ("notes", "string"),
           ("patient", "reference"),
           ("source", "reference"),
           ("status", "token"),
           ("subject", "reference"),
           ("title", "string")]

    search = Params(par, "List")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'identifier':
                    list_to_add.append(Identifier(obj))
                elif key == 'note':
                    list_to_add.append(Annotation(obj))
                elif key == 'entry':
                    list_to_add.append(ListEntryComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR List __new__
        '''
        if json == None:
            return None
        else:
            return super(List, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR List constructor
        '''
        logging.info("FHIR List: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "List"
        if 'identifier' in self.__json:
            if isinstance(self.__json['identifier'], list):
                self.identifier = self.__add_list('identifier')
            else:
                self.identifier = Identifier(self.__add('identifier'))
        else:
            self.identifier = None
        self.status = self.__add('status')
        self.mode = self.__add('mode')
        self.title = self.__add('title')
        self.code = CodeableConcept(self.__add('code'))
        self.subject = Reference(self.__add('subject'))
        self.encounter = Reference(self.__add('encounter'))
        self.date = DateTime(self.__add('date'))
        self.source = Reference(self.__add('source'))
        self.orderedBy = CodeableConcept(self.__add('orderedBy'))
        if 'note' in self.__json:
            if isinstance(self.__json['note'], list):
                self.note = self.__add_list('note')
            else:
                self.note = Annotation(self.__add('note'))
        else:
            self.note = None
        if 'entry' in self.__json:
            if isinstance(self.__json['entry'], list):
                self.entry = self.__add_list('entry')
            else:
                self.entry = ListEntryComponent(self.__add('entry'))
        else:
            self.entry = None
        self.emptyReason = CodeableConcept(self.__add('emptyReason'))


        # Parent Resource Init
        super(List, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identifier:
            self.__json['identifier'] = self.__get_list(self.identifier)
        if self.status:
            self.__json['status'] = self.status
        if self.mode:
            self.__json['mode'] = self.mode
        if self.title:
            self.__json['title'] = self.title
        if self.code:
            self.__json['code'] = self.code.json
        if self.subject:
            self.__json['subject'] = self.subject.json
        if self.encounter:
            self.__json['encounter'] = self.encounter.json
        if self.date:
            self.__json['date'] = self.date.json
        if self.source:
            self.__json['source'] = self.source.json
        if self.orderedBy:
            self.__json['orderedBy'] = self.orderedBy.json
        if self.note:
            self.__json['note'] = self.__get_list(self.note)
        if self.entry:
            self.__json['entry'] = self.__get_list(self.entry)
        if self.emptyReason:
            self.__json['emptyReason'] = self.emptyReason.json

        # Add json attributes
        self.__json = super(List, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR List string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class LocationPositionComponent(BackboneElement):
    '''
    FHIR LocationPositionComponent resource

     The absolute geographic location of the Location, expressed using the WGS84 datum (This is the same co-ordinate system used in KML).

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR LocationPositionComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(LocationPositionComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR LocationPositionComponent constructor
        '''
        logging.info("FHIR LocationPositionComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.longitude = self.__add('longitude')
        self.latitude = self.__add('latitude')
        self.altitude = self.__add('altitude')



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.longitude:
            self.__json['longitude'] = self.longitude
        if self.latitude:
            self.__json['latitude'] = self.latitude
        if self.altitude:
            self.__json['altitude'] = self.altitude


        return self.__json
        
    def __repr__(self):
        '''
        FHIR LocationPositionComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class Location(DomainResource):
    '''
    FHIR Location resource

     Details and position information for a physical place where services are provided  and resources and participants may be stored, found, contained or accommodated. If the element is present, it must have either a @value, an @id, or extensions

    identifier ->  Unique code or number identifying the location to its users.
    status ->  active | suspended | inactive. 
    name ->  Name of the location as used by humans. Does not need to be unique.
    description ->  Description of the Location, which helps in finding or referencing the place.
    mode ->  Indicates whether a resource instance represents a specific location or a class of locations. 
    type ->  Indicates the type of function performed at the location.
    telecom ->  The contact details of communication devices available at the location. This can include phone numbers, fax numbers, mobile numbers, email addresses and web sites.
    address ->  Physical location.
    physicalType ->  Physical form of the location, e.g. building, room, vehicle, road.
    position ->  The absolute geographic location of the Location, expressed using the WGS84 datum (This is the same co-ordinate system used in KML).
    managingOrganization ->  The organization responsible for the provisioning and upkeep of the location.
    partOf ->  Another Location which this Location is physically part of.

    # Search parameters
        Location.search.address
        Location.search.address-city
        Location.search.address-country
        Location.search.address-postalcode
        Location.search.address-state
        Location.search.address-use
        Location.search.identifier
        Location.search.name
        Location.search.near
        Location.search.near-distance
        Location.search.organization
        Location.search.partof
        Location.search.status
        Location.search.type
    '''
    # search parameters
    par = [("address", "string"),
           ("address-city", "string"),
           ("address-country", "string"),
           ("address-postalcode", "string"),
           ("address-state", "string"),
           ("address-use", "token"),
           ("identifier", "token"),
           ("name", "string"),
           ("near", "token"),
           ("near-distance", "token"),
           ("organization", "reference"),
           ("partof", "reference"),
           ("status", "token"),
           ("type", "token")]

    search = Params(par, "Location")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'identifier':
                    list_to_add.append(Identifier(obj))
                elif key == 'telecom':
                    list_to_add.append(ContactPoint(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR Location __new__
        '''
        if json == None:
            return None
        else:
            return super(Location, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR Location constructor
        '''
        logging.info("FHIR Location: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "Location"
        if 'identifier' in self.__json:
            if isinstance(self.__json['identifier'], list):
                self.identifier = self.__add_list('identifier')
            else:
                self.identifier = Identifier(self.__add('identifier'))
        else:
            self.identifier = None
        self.status = self.__add('status')
        self.name = self.__add('name')
        self.description = self.__add('description')
        self.mode = self.__add('mode')
        self.type = CodeableConcept(self.__add('type'))
        if 'telecom' in self.__json:
            if isinstance(self.__json['telecom'], list):
                self.telecom = self.__add_list('telecom')
            else:
                self.telecom = ContactPoint(self.__add('telecom'))
        else:
            self.telecom = None
        self.address = Address(self.__add('address'))
        self.physicalType = CodeableConcept(self.__add('physicalType'))
        self.position = LocationPositionComponent(self.__add('position'))
        self.managingOrganization = Reference(self.__add('managingOrganization'))
        self.partOf = Reference(self.__add('partOf'))


        # Parent Resource Init
        super(Location, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identifier:
            self.__json['identifier'] = self.__get_list(self.identifier)
        if self.status:
            self.__json['status'] = self.status
        if self.name:
            self.__json['name'] = self.name
        if self.description:
            self.__json['description'] = self.description
        if self.mode:
            self.__json['mode'] = self.mode
        if self.type:
            self.__json['type'] = self.type.json
        if self.telecom:
            self.__json['telecom'] = self.__get_list(self.telecom)
        if self.address:
            self.__json['address'] = self.address.json
        if self.physicalType:
            self.__json['physicalType'] = self.physicalType.json
        if self.position:
            self.__json['position'] = self.position.json
        if self.managingOrganization:
            self.__json['managingOrganization'] = self.managingOrganization.json
        if self.partOf:
            self.__json['partOf'] = self.partOf.json

        # Add json attributes
        self.__json = super(Location, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR Location string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class MeasurePopulationComponent(BackboneElement):
    '''
    FHIR MeasurePopulationComponent resource

     A population criteria for the measure.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR MeasurePopulationComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(MeasurePopulationComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR MeasurePopulationComponent constructor
        '''
        logging.info("FHIR MeasurePopulationComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.type = self.__add('type')
        self.identifier = Identifier(self.__add('identifier'))
        self.name = self.__add('name')
        self.description = self.__add('description')
        self.criteria = self.__add('criteria')



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.type:
            self.__json['type'] = self.type
        if self.identifier:
            self.__json['identifier'] = self.identifier.json
        if self.name:
            self.__json['name'] = self.name
        if self.description:
            self.__json['description'] = self.description
        if self.criteria:
            self.__json['criteria'] = self.criteria


        return self.__json
        
    def __repr__(self):
        '''
        FHIR MeasurePopulationComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class MeasureStratifierComponent(BackboneElement):
    '''
    FHIR MeasureStratifierComponent resource

     The stratifier criteria for the measure report, specified as either the name of a valid CQL expression defined within a referenced library, or a valid FHIR Resource Path.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR MeasureStratifierComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(MeasureStratifierComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR MeasureStratifierComponent constructor
        '''
        logging.info("FHIR MeasureStratifierComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.identifier = Identifier(self.__add('identifier'))
        self.criteria = self.__add('criteria')
        self.path = self.__add('path')



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identifier:
            self.__json['identifier'] = self.identifier.json
        if self.criteria:
            self.__json['criteria'] = self.criteria
        if self.path:
            self.__json['path'] = self.path


        return self.__json
        
    def __repr__(self):
        '''
        FHIR MeasureStratifierComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class MeasureGroupComponent(BackboneElement):
    '''
    FHIR MeasureGroupComponent resource

     A group of population criteria for the measure.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'population':
                    list_to_add.append(MeasurePopulationComponent(obj))
                elif key == 'stratifier':
                    list_to_add.append(MeasureStratifierComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR MeasureGroupComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(MeasureGroupComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR MeasureGroupComponent constructor
        '''
        logging.info("FHIR MeasureGroupComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.identifier = Identifier(self.__add('identifier'))
        self.name = self.__add('name')
        self.description = self.__add('description')
        if 'population' in self.__json:
            if isinstance(self.__json['population'], list):
                self.population = self.__add_list('population')
            else:
                self.population = MeasurePopulationComponent(self.__add('population'))
        else:
            self.population = None
        if 'stratifier' in self.__json:
            if isinstance(self.__json['stratifier'], list):
                self.stratifier = self.__add_list('stratifier')
            else:
                self.stratifier = MeasureStratifierComponent(self.__add('stratifier'))
        else:
            self.stratifier = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identifier:
            self.__json['identifier'] = self.identifier.json
        if self.name:
            self.__json['name'] = self.name
        if self.description:
            self.__json['description'] = self.description
        if self.population:
            self.__json['population'] = self.__get_list(self.population)
        if self.stratifier:
            self.__json['stratifier'] = self.__get_list(self.stratifier)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR MeasureGroupComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class MeasureSupplementalDataComponent(BackboneElement):
    '''
    FHIR MeasureSupplementalDataComponent resource

     The supplemental data criteria for the measure report, specified as either the name of a valid CQL expression within a referenced library, or a valid FHIR Resource Path.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR MeasureSupplementalDataComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(MeasureSupplementalDataComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR MeasureSupplementalDataComponent constructor
        '''
        logging.info("FHIR MeasureSupplementalDataComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.identifier = Identifier(self.__add('identifier'))
        if 'usage' in self.__json:
            if isinstance(self.__json['usage'], list):
                self.usage = self.__add_list('usage')
            else:
                self.usage = self.__add('usage')
        else:
            self.usage = None
        self.criteria = self.__add('criteria')
        self.path = self.__add('path')



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identifier:
            self.__json['identifier'] = self.identifier.json
        if self.usage:
            self.__json['usage'] = self.__get_list(self.usage)
        if self.criteria:
            self.__json['criteria'] = self.criteria
        if self.path:
            self.__json['path'] = self.path


        return self.__json
        
    def __repr__(self):
        '''
        FHIR MeasureSupplementalDataComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class Measure(DomainResource):
    '''
    FHIR Measure resource

     The Measure resource provides the definition of a quality measure. If the element is present, it must have either a @value, an @id, or extensions

    moduleMetadata ->  The metadata for the measure, including publishing, life-cycle, version, documentation, and supporting evidence.
    library ->  A reference to a Library resource containing the formal logic used by the measure.
    disclaimer ->  A disclaimer for the use of the measure.
    scoring ->  The measure scoring type, e.g. proportion, CV. 
    type ->  The measure type, e.g. process, outcome. 
    riskAdjustment ->  A description of the risk adjustment factors that may impact the resulting score for the measure and how they may be accounted for when computing and reporting measure results.
    rateAggregation ->  A description of the rate aggregation for the measure.
    rationale ->  The rationale for the measure.
    clinicalRecommendationStatement ->  The clinical recommendation statement for the measure.
    improvementNotation ->  Improvement notation for the measure, e.g. higher score indicates better quality.
    definition ->  A narrative description of the complete measure calculation.
    guidance ->  Additional guidance for the measure including how it can be used in a clinical context, and the intent of the measure.
    set ->  The measure set, e.g. Preventive Care and Screening.
    group ->  A group of population criteria for the measure.
    supplementalData ->  The supplemental data criteria for the measure report, specified as either the name of a valid CQL expression within a referenced library, or a valid FHIR Resource Path.

    
    '''
    

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'library':
                    list_to_add.append(Reference(obj))
                elif key == 'group':
                    list_to_add.append(MeasureGroupComponent(obj))
                elif key == 'supplementalData':
                    list_to_add.append(MeasureSupplementalDataComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR Measure __new__
        '''
        if json == None:
            return None
        else:
            return super(Measure, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR Measure constructor
        '''
        logging.info("FHIR Measure: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "Measure"
        self.moduleMetadata = ModuleMetadata(self.__add('moduleMetadata'))
        if 'library' in self.__json:
            if isinstance(self.__json['library'], list):
                self.library = self.__add_list('library')
            else:
                self.library = Reference(self.__add('library'))
        else:
            self.library = None
        self.disclaimer = self.__add('disclaimer')
        self.scoring = self.__add('scoring')
        if 'type' in self.__json:
            if isinstance(self.__json['type'], list):
                self.type = self.__add_list('type')
            else:
                self.type = self.__add('type')
        else:
            self.type = None
        self.riskAdjustment = self.__add('riskAdjustment')
        self.rateAggregation = self.__add('rateAggregation')
        self.rationale = self.__add('rationale')
        self.clinicalRecommendationStatement = self.__add('clinicalRecommendationStatement')
        self.improvementNotation = self.__add('improvementNotation')
        self.definition = self.__add('definition')
        self.guidance = self.__add('guidance')
        self.set = self.__add('set')
        if 'group' in self.__json:
            if isinstance(self.__json['group'], list):
                self.group = self.__add_list('group')
            else:
                self.group = MeasureGroupComponent(self.__add('group'))
        else:
            self.group = None
        if 'supplementalData' in self.__json:
            if isinstance(self.__json['supplementalData'], list):
                self.supplementalData = self.__add_list('supplementalData')
            else:
                self.supplementalData = MeasureSupplementalDataComponent(self.__add('supplementalData'))
        else:
            self.supplementalData = None


        # Parent Resource Init
        super(Measure, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.moduleMetadata:
            self.__json['moduleMetadata'] = self.moduleMetadata.json
        if self.library:
            self.__json['library'] = self.__get_list(self.library)
        if self.disclaimer:
            self.__json['disclaimer'] = self.disclaimer
        if self.scoring:
            self.__json['scoring'] = self.scoring
        if self.type:
            self.__json['type'] = self.__get_list(self.type)
        if self.riskAdjustment:
            self.__json['riskAdjustment'] = self.riskAdjustment
        if self.rateAggregation:
            self.__json['rateAggregation'] = self.rateAggregation
        if self.rationale:
            self.__json['rationale'] = self.rationale
        if self.clinicalRecommendationStatement:
            self.__json['clinicalRecommendationStatement'] = self.clinicalRecommendationStatement
        if self.improvementNotation:
            self.__json['improvementNotation'] = self.improvementNotation
        if self.definition:
            self.__json['definition'] = self.definition
        if self.guidance:
            self.__json['guidance'] = self.guidance
        if self.set:
            self.__json['set'] = self.set
        if self.group:
            self.__json['group'] = self.__get_list(self.group)
        if self.supplementalData:
            self.__json['supplementalData'] = self.__get_list(self.supplementalData)

        # Add json attributes
        self.__json = super(Measure, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR Measure string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class MeasureReportPopulationComponent(BackboneElement):
    '''
    FHIR MeasureReportPopulationComponent resource

     The populations that make up the population group, one for each type of population appropriate for the measure.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR MeasureReportPopulationComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(MeasureReportPopulationComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR MeasureReportPopulationComponent constructor
        '''
        logging.info("FHIR MeasureReportPopulationComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.type = self.__add('type')
        self.count = self.__add('count')
        self.patients = Reference(self.__add('patients'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.type:
            self.__json['type'] = self.type
        if self.count:
            self.__json['count'] = self.count
        if self.patients:
            self.__json['patients'] = self.patients.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR MeasureReportPopulationComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class MeasureReportGroup1Component(BackboneElement):
    '''
    FHIR MeasureReportGroup1Component resource

     This element contains the results for a single stratum within the stratifier. For example, when stratifying on administrative gender, there will be four strata, one for each possible gender value.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR MeasureReportGroup1Component __new__
        '''
        if json == None:
            return None
        else:
            return super(MeasureReportGroup1Component, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR MeasureReportGroup1Component constructor
        '''
        logging.info("FHIR MeasureReportGroup1Component: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType


        return self.__json
        
    def __repr__(self):
        '''
        FHIR MeasureReportGroup1Component string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class MeasureReportStratifierComponent(BackboneElement):
    '''
    FHIR MeasureReportStratifierComponent resource

     When a measure includes multiple stratifiers, there will be a stratifier group for each stratifier defined by the measure.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'group':
                    list_to_add.append(MeasureReportGroup1Component(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR MeasureReportStratifierComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(MeasureReportStratifierComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR MeasureReportStratifierComponent constructor
        '''
        logging.info("FHIR MeasureReportStratifierComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.identifier = Identifier(self.__add('identifier'))
        if 'group' in self.__json:
            if isinstance(self.__json['group'], list):
                self.group = self.__add_list('group')
            else:
                self.group = MeasureReportGroup1Component(self.__add('group'))
        else:
            self.group = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identifier:
            self.__json['identifier'] = self.identifier.json
        if self.group:
            self.__json['group'] = self.__get_list(self.group)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR MeasureReportStratifierComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class MeasureReportGroup2Component(BackboneElement):
    '''
    FHIR MeasureReportGroup2Component resource

     This element contains the results for a single value within the supplemental data. For example, when reporting supplemental data for administrative gender, there will be four groups, one for each possible gender value.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR MeasureReportGroup2Component __new__
        '''
        if json == None:
            return None
        else:
            return super(MeasureReportGroup2Component, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR MeasureReportGroup2Component constructor
        '''
        logging.info("FHIR MeasureReportGroup2Component: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType


        return self.__json
        
    def __repr__(self):
        '''
        FHIR MeasureReportGroup2Component string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class MeasureReportSupplementalDataComponent(BackboneElement):
    '''
    FHIR MeasureReportSupplementalDataComponent resource

     Supplemental data elements for the measure provide additional information requested by the measure for each patient involved in the populations.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'group':
                    list_to_add.append(MeasureReportGroup2Component(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR MeasureReportSupplementalDataComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(MeasureReportSupplementalDataComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR MeasureReportSupplementalDataComponent constructor
        '''
        logging.info("FHIR MeasureReportSupplementalDataComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.identifier = Identifier(self.__add('identifier'))
        if 'group' in self.__json:
            if isinstance(self.__json['group'], list):
                self.group = self.__add_list('group')
            else:
                self.group = MeasureReportGroup2Component(self.__add('group'))
        else:
            self.group = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identifier:
            self.__json['identifier'] = self.identifier.json
        if self.group:
            self.__json['group'] = self.__get_list(self.group)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR MeasureReportSupplementalDataComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class MeasureReportGroupComponent(BackboneElement):
    '''
    FHIR MeasureReportGroupComponent resource

     The results of the calculation, one for each population group in the measure.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'population':
                    list_to_add.append(MeasureReportPopulationComponent(obj))
                elif key == 'stratifier':
                    list_to_add.append(MeasureReportStratifierComponent(obj))
                elif key == 'supplementalData':
                    list_to_add.append(MeasureReportSupplementalDataComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR MeasureReportGroupComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(MeasureReportGroupComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR MeasureReportGroupComponent constructor
        '''
        logging.info("FHIR MeasureReportGroupComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.identifier = Identifier(self.__add('identifier'))
        if 'population' in self.__json:
            if isinstance(self.__json['population'], list):
                self.population = self.__add_list('population')
            else:
                self.population = MeasureReportPopulationComponent(self.__add('population'))
        else:
            self.population = None
        self.measureScore = self.__add('measureScore')
        if 'stratifier' in self.__json:
            if isinstance(self.__json['stratifier'], list):
                self.stratifier = self.__add_list('stratifier')
            else:
                self.stratifier = MeasureReportStratifierComponent(self.__add('stratifier'))
        else:
            self.stratifier = None
        if 'supplementalData' in self.__json:
            if isinstance(self.__json['supplementalData'], list):
                self.supplementalData = self.__add_list('supplementalData')
            else:
                self.supplementalData = MeasureReportSupplementalDataComponent(self.__add('supplementalData'))
        else:
            self.supplementalData = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identifier:
            self.__json['identifier'] = self.identifier.json
        if self.population:
            self.__json['population'] = self.__get_list(self.population)
        if self.measureScore:
            self.__json['measureScore'] = self.measureScore
        if self.stratifier:
            self.__json['stratifier'] = self.__get_list(self.stratifier)
        if self.supplementalData:
            self.__json['supplementalData'] = self.__get_list(self.supplementalData)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR MeasureReportGroupComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class MeasureReport(DomainResource):
    '''
    FHIR MeasureReport resource

     The MeasureReport resource contains the results of evaluating a measure. If the element is present, it must have either a @value, an @id, or extensions

    measure ->  A reference to the Measure that was evaluated to produce this report.
    type ->  The type of measure report. This may be an individual report, which provides a single patient's score for the measure, a patient listing, which returns the list of patients that meet the various criteria in the measure, or a summary report, which returns a population count for each criteria in the measure. 
    patient ->  Optional Patient if the report was requested for a single patient.
    period ->  The reporting period for which the report was calculated.
    status ->  The report status. No data will be available until the report status is complete. 
    date ->  The date this measure report was generated.
    reportingOrganization ->  Reporting Organization.
    group ->  The results of the calculation, one for each population group in the measure.
    evaluatedResources ->  A reference to a Bundle containing the Resources that were used in the evaluation of this report.

    
    '''
    

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'group':
                    list_to_add.append(MeasureReportGroupComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR MeasureReport __new__
        '''
        if json == None:
            return None
        else:
            return super(MeasureReport, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR MeasureReport constructor
        '''
        logging.info("FHIR MeasureReport: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "MeasureReport"
        self.measure = Reference(self.__add('measure'))
        self.type = self.__add('type')
        self.patient = Reference(self.__add('patient'))
        self.period = Period(self.__add('period'))
        self.status = self.__add('status')
        self.date = DateTime(self.__add('date'))
        self.reportingOrganization = Reference(self.__add('reportingOrganization'))
        if 'group' in self.__json:
            if isinstance(self.__json['group'], list):
                self.group = self.__add_list('group')
            else:
                self.group = MeasureReportGroupComponent(self.__add('group'))
        else:
            self.group = None
        self.evaluatedResources = Reference(self.__add('evaluatedResources'))


        # Parent Resource Init
        super(MeasureReport, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.measure:
            self.__json['measure'] = self.measure.json
        if self.type:
            self.__json['type'] = self.type
        if self.patient:
            self.__json['patient'] = self.patient.json
        if self.period:
            self.__json['period'] = self.period.json
        if self.status:
            self.__json['status'] = self.status
        if self.date:
            self.__json['date'] = self.date.json
        if self.reportingOrganization:
            self.__json['reportingOrganization'] = self.reportingOrganization.json
        if self.group:
            self.__json['group'] = self.__get_list(self.group)
        if self.evaluatedResources:
            self.__json['evaluatedResources'] = self.evaluatedResources.json

        # Add json attributes
        self.__json = super(MeasureReport, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR MeasureReport string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class Media(DomainResource):
    '''
    FHIR Media resource

     A photo, video, or audio recording acquired or used in healthcare. The actual content may be inline or provided by direct reference. If the element is present, it must have either a @value, an @id, or extensions

    identifier ->  Identifiers associated with the image - these may include identifiers for the image itself, identifiers for the context of its collection (e.g. series ids) and context ids such as accession numbers or other workflow identifiers.
    type ->  Whether the media is a photo (still image), an audio recording, or a video recording. 
    subtype ->  Details of the type of the media - usually, how it was acquired (what type of device). If images sourced from a DICOM system, are wrapped in a Media resource, then this is the modality.
    view ->  The name of the imaging view e.g. Lateral or Antero-posterior (AP).
    subject ->  Who/What this Media is a record of.
    operator ->  The person who administered the collection of the image.
    deviceName ->  The name of the device / manufacturer of the device  that was used to make the recording.
    height ->  Height of the image in pixels (photo/video).
    width ->  Width of the image in pixels (photo/video).
    frames ->  The number of frames in a photo. This is used with a multi-page fax, or an imaging acquisition context that takes multiple slices in a single image, or an animated gif. If there is more than one frame, this SHALL have a value in order to alert interface software that a multi-frame capable rendering widget is required.
    duration ->  The duration of the recording in seconds - for audio and video.
    content ->  The actual content of the media - inline or by direct reference to the media source file.

    # Search parameters
        Media.search.created
        Media.search.identifier
        Media.search.operator
        Media.search.patient
        Media.search.subject
        Media.search.subtype
        Media.search.type
        Media.search.view
    '''
    # search parameters
    par = [("created", "date"),
           ("identifier", "token"),
           ("operator", "reference"),
           ("patient", "reference"),
           ("subject", "reference"),
           ("subtype", "token"),
           ("type", "token"),
           ("view", "token")]

    search = Params(par, "Media")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'identifier':
                    list_to_add.append(Identifier(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR Media __new__
        '''
        if json == None:
            return None
        else:
            return super(Media, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR Media constructor
        '''
        logging.info("FHIR Media: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "Media"
        if 'identifier' in self.__json:
            if isinstance(self.__json['identifier'], list):
                self.identifier = self.__add_list('identifier')
            else:
                self.identifier = Identifier(self.__add('identifier'))
        else:
            self.identifier = None
        self.type = self.__add('type')
        self.subtype = CodeableConcept(self.__add('subtype'))
        self.view = CodeableConcept(self.__add('view'))
        self.subject = Reference(self.__add('subject'))
        self.operator = Reference(self.__add('operator'))
        self.deviceName = self.__add('deviceName')
        self.height = self.__add('height')
        self.width = self.__add('width')
        self.frames = self.__add('frames')
        self.duration = self.__add('duration')
        self.content = Attachment(self.__add('content'))


        # Parent Resource Init
        super(Media, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identifier:
            self.__json['identifier'] = self.__get_list(self.identifier)
        if self.type:
            self.__json['type'] = self.type
        if self.subtype:
            self.__json['subtype'] = self.subtype.json
        if self.view:
            self.__json['view'] = self.view.json
        if self.subject:
            self.__json['subject'] = self.subject.json
        if self.operator:
            self.__json['operator'] = self.operator.json
        if self.deviceName:
            self.__json['deviceName'] = self.deviceName
        if self.height:
            self.__json['height'] = self.height
        if self.width:
            self.__json['width'] = self.width
        if self.frames:
            self.__json['frames'] = self.frames
        if self.duration:
            self.__json['duration'] = self.duration
        if self.content:
            self.__json['content'] = self.content.json

        # Add json attributes
        self.__json = super(Media, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR Media string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class MedicationIngredientComponent(BackboneElement):
    '''
    FHIR MedicationIngredientComponent resource

     Identifies a particular constituent of interest in the product.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR MedicationIngredientComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(MedicationIngredientComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR MedicationIngredientComponent constructor
        '''
        logging.info("FHIR MedicationIngredientComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.amount = Ratio(self.__add('amount'))
        self.itemCodeableConcept = CodeableConcept(self.__add('itemCodeableConcept'))
        self.itemReference = Reference(self.__add('itemReference'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.amount:
            self.__json['amount'] = self.amount.json
        if self.itemCodeableConcept:
            self.__json['itemCodeableConcept'] = self.itemCodeableConcept.json
        if self.itemReference:
            self.__json['itemReference'] = self.itemReference.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR MedicationIngredientComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class MedicationBatchComponent(BackboneElement):
    '''
    FHIR MedicationBatchComponent resource

     Information about a group of medication produced or packaged from one production run.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR MedicationBatchComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(MedicationBatchComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR MedicationBatchComponent constructor
        '''
        logging.info("FHIR MedicationBatchComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType


        return self.__json
        
    def __repr__(self):
        '''
        FHIR MedicationBatchComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class MedicationProductComponent(BackboneElement):
    '''
    FHIR MedicationProductComponent resource

     Information that only applies to products (not packages).

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'ingredient':
                    list_to_add.append(MedicationIngredientComponent(obj))
                elif key == 'batch':
                    list_to_add.append(MedicationBatchComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR MedicationProductComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(MedicationProductComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR MedicationProductComponent constructor
        '''
        logging.info("FHIR MedicationProductComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.form = CodeableConcept(self.__add('form'))
        if 'ingredient' in self.__json:
            if isinstance(self.__json['ingredient'], list):
                self.ingredient = self.__add_list('ingredient')
            else:
                self.ingredient = MedicationIngredientComponent(self.__add('ingredient'))
        else:
            self.ingredient = None
        if 'batch' in self.__json:
            if isinstance(self.__json['batch'], list):
                self.batch = self.__add_list('batch')
            else:
                self.batch = MedicationBatchComponent(self.__add('batch'))
        else:
            self.batch = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.form:
            self.__json['form'] = self.form.json
        if self.ingredient:
            self.__json['ingredient'] = self.__get_list(self.ingredient)
        if self.batch:
            self.__json['batch'] = self.__get_list(self.batch)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR MedicationProductComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class MedicationContentComponent(BackboneElement):
    '''
    FHIR MedicationContentComponent resource

     A set of components that go to make up the described item.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR MedicationContentComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(MedicationContentComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR MedicationContentComponent constructor
        '''
        logging.info("FHIR MedicationContentComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType


        return self.__json
        
    def __repr__(self):
        '''
        FHIR MedicationContentComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class MedicationPackageComponent(BackboneElement):
    '''
    FHIR MedicationPackageComponent resource

     Information that only applies to packages (not products).

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'content':
                    list_to_add.append(MedicationContentComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR MedicationPackageComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(MedicationPackageComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR MedicationPackageComponent constructor
        '''
        logging.info("FHIR MedicationPackageComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.container = CodeableConcept(self.__add('container'))
        if 'content' in self.__json:
            if isinstance(self.__json['content'], list):
                self.content = self.__add_list('content')
            else:
                self.content = MedicationContentComponent(self.__add('content'))
        else:
            self.content = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.container:
            self.__json['container'] = self.container.json
        if self.content:
            self.__json['content'] = self.__get_list(self.content)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR MedicationPackageComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class Medication(DomainResource):
    '''
    FHIR Medication resource

     This resource is primarily used for the identification and definition of a medication. It covers the ingredients and the packaging for a medication. If the element is present, it must have either a @value, an @id, or extensions

    code ->  A code (or set of codes) that specify this medication, or a textual description if no code is available. Usage note: This could be a standard medication code such as a code from RxNorm, SNOMED CT, IDMP etc. It could also be a national or local formulary code, optionally with translations to other code systems.
    isBrand ->  Set to true if the item is attributable to a specific manufacturer.
    manufacturer ->  Describes the details of the manufacturer.
    product ->  Information that only applies to products (not packages).
    package ->  Information that only applies to packages (not products).

    # Search parameters
        Medication.search.code
        Medication.search.container
        Medication.search.content
        Medication.search.form
        Medication.search.ingredient
        Medication.search.manufacturer
    '''
    # search parameters
    par = [("code", "token"),
           ("container", "token"),
           ("content", "reference"),
           ("form", "token"),
           ("ingredient", "reference"),
           ("manufacturer", "reference")]

    search = Params(par, "Medication")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR Medication __new__
        '''
        if json == None:
            return None
        else:
            return super(Medication, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR Medication constructor
        '''
        logging.info("FHIR Medication: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "Medication"
        self.code = CodeableConcept(self.__add('code'))
        self.isBrand = Boolean(self.__add('isBrand'))
        self.manufacturer = Reference(self.__add('manufacturer'))
        self.product = MedicationProductComponent(self.__add('product'))
        self.package = MedicationPackageComponent(self.__add('package'))


        # Parent Resource Init
        super(Medication, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.code:
            self.__json['code'] = self.code.json
        if self.isBrand:
            self.__json['isBrand'] = self.isBrand.json
        if self.manufacturer:
            self.__json['manufacturer'] = self.manufacturer.json
        if self.product:
            self.__json['product'] = self.product.json
        if self.package:
            self.__json['package'] = self.package.json

        # Add json attributes
        self.__json = super(Medication, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR Medication string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class MedicationAdministrationDosageComponent(BackboneElement):
    '''
    FHIR MedicationAdministrationDosageComponent resource

     Describes the medication dosage information details e.g. dose, rate, site, route, etc.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR MedicationAdministrationDosageComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(MedicationAdministrationDosageComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR MedicationAdministrationDosageComponent constructor
        '''
        logging.info("FHIR MedicationAdministrationDosageComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.text = self.__add('text')
        self.route = CodeableConcept(self.__add('route'))
        self.method = CodeableConcept(self.__add('method'))
        self.quantity = SimpleQuantity(self.__add('quantity'))
        self.siteCodeableConcept = CodeableConcept(self.__add('siteCodeableConcept'))
        self.siteReference = Reference(self.__add('siteReference'))
        self.rateRatio = Ratio(self.__add('rateRatio'))
        self.rateRange = Range(self.__add('rateRange'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.text:
            self.__json['text'] = self.text
        if self.route:
            self.__json['route'] = self.route.json
        if self.method:
            self.__json['method'] = self.method.json
        if self.quantity:
            self.__json['quantity'] = self.quantity.json
        if self.siteCodeableConcept:
            self.__json['siteCodeableConcept'] = self.siteCodeableConcept.json
        if self.siteReference:
            self.__json['siteReference'] = self.siteReference.json
        if self.rateRatio:
            self.__json['rateRatio'] = self.rateRatio.json
        if self.rateRange:
            self.__json['rateRange'] = self.rateRange.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR MedicationAdministrationDosageComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class MedicationAdministration(DomainResource):
    '''
    FHIR MedicationAdministration resource

     Describes the event of a patient consuming or otherwise being administered a medication.  This may be as simple as swallowing a tablet or it may be a long running infusion.  Related resources tie this event to the authorizing prescription, and the specific encounter between patient and health care practitioner. If the element is present, it must have either a @value, an @id, or extensions

    identifier ->  External identifier - FHIR will generate its own internal identifiers (probably URLs) which do not need to be explicitly managed by the resource.  The identifier here is one that would be used by another non-FHIR system - for example an automated medication pump would provide a record each time it operated; an administration while the patient was off the ward might be made with a different system and entered after the event.  Particularly important if these records have to be updated.
    status ->  Will generally be set to show that the administration has been completed.  For some long running administrations such as infusions it is possible for an administration to be started but not completed or it may be paused while some other process is under way. 
    patient ->  The person or animal receiving the medication.
    encounter ->  The visit, admission or other contact between patient and health care provider the medication administration was performed as part of.
    practitioner ->  The individual who was responsible for giving the medication to the patient.
    prescription ->  The original request, instruction or authority to perform the administration.
    wasNotGiven ->  Set this to true if the record is saying that the medication was NOT administered.
    reasonNotGiven ->  A code indicating why the administration was not performed.
    reasonGiven ->  A code indicating why the medication was given.
    device ->  The device used in administering the medication to the patient.  For example, a particular infusion pump.
    note ->  Extra information about the medication administration that is not conveyed by the other attributes.
    dosage ->  Describes the medication dosage information details e.g. dose, rate, site, route, etc.
    medicationCodeableConcept ->  Identifies the medication that was administered. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.
    medicationReference ->  Identifies the medication that was administered. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.
    effectiveTimeDateTime ->  A specific date/time or interval of time during which the administration took place (or did not take place, when the 'notGiven' attribute is true). For many administrations, such as swallowing a tablet the use of dateTime is more appropriate.
    effectiveTimePeriod ->  A specific date/time or interval of time during which the administration took place (or did not take place, when the 'notGiven' attribute is true). For many administrations, such as swallowing a tablet the use of dateTime is more appropriate.

    # Search parameters
        MedicationAdministration.search.code
        MedicationAdministration.search.device
        MedicationAdministration.search.effectivetime
        MedicationAdministration.search.encounter
        MedicationAdministration.search.identifier
        MedicationAdministration.search.medication
        MedicationAdministration.search.notgiven
        MedicationAdministration.search.patient
        MedicationAdministration.search.practitioner
        MedicationAdministration.search.prescription
        MedicationAdministration.search.status
    '''
    # search parameters
    par = [("code", "token"),
           ("device", "reference"),
           ("effectivetime", "date"),
           ("encounter", "reference"),
           ("identifier", "token"),
           ("medication", "reference"),
           ("notgiven", "token"),
           ("patient", "reference"),
           ("practitioner", "reference"),
           ("prescription", "reference"),
           ("status", "token")]

    search = Params(par, "MedicationAdministration")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'identifier':
                    list_to_add.append(Identifier(obj))
                elif key == 'reasonNotGiven':
                    list_to_add.append(CodeableConcept(obj))
                elif key == 'reasonGiven':
                    list_to_add.append(CodeableConcept(obj))
                elif key == 'device':
                    list_to_add.append(Reference(obj))
                elif key == 'note':
                    list_to_add.append(Annotation(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR MedicationAdministration __new__
        '''
        if json == None:
            return None
        else:
            return super(MedicationAdministration, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR MedicationAdministration constructor
        '''
        logging.info("FHIR MedicationAdministration: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "MedicationAdministration"
        if 'identifier' in self.__json:
            if isinstance(self.__json['identifier'], list):
                self.identifier = self.__add_list('identifier')
            else:
                self.identifier = Identifier(self.__add('identifier'))
        else:
            self.identifier = None
        self.status = self.__add('status')
        self.patient = Reference(self.__add('patient'))
        self.encounter = Reference(self.__add('encounter'))
        self.practitioner = Reference(self.__add('practitioner'))
        self.prescription = Reference(self.__add('prescription'))
        self.wasNotGiven = Boolean(self.__add('wasNotGiven'))
        if 'reasonNotGiven' in self.__json:
            if isinstance(self.__json['reasonNotGiven'], list):
                self.reasonNotGiven = self.__add_list('reasonNotGiven')
            else:
                self.reasonNotGiven = CodeableConcept(self.__add('reasonNotGiven'))
        else:
            self.reasonNotGiven = None
        if 'reasonGiven' in self.__json:
            if isinstance(self.__json['reasonGiven'], list):
                self.reasonGiven = self.__add_list('reasonGiven')
            else:
                self.reasonGiven = CodeableConcept(self.__add('reasonGiven'))
        else:
            self.reasonGiven = None
        if 'device' in self.__json:
            if isinstance(self.__json['device'], list):
                self.device = self.__add_list('device')
            else:
                self.device = Reference(self.__add('device'))
        else:
            self.device = None
        if 'note' in self.__json:
            if isinstance(self.__json['note'], list):
                self.note = self.__add_list('note')
            else:
                self.note = Annotation(self.__add('note'))
        else:
            self.note = None
        self.dosage = MedicationAdministrationDosageComponent(self.__add('dosage'))
        self.medicationCodeableConcept = CodeableConcept(self.__add('medicationCodeableConcept'))
        self.medicationReference = Reference(self.__add('medicationReference'))
        self.effectiveTimeDateTime = DateTime(self.__add('effectiveTimeDateTime'))
        self.effectiveTimePeriod = Period(self.__add('effectiveTimePeriod'))


        # Parent Resource Init
        super(MedicationAdministration, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identifier:
            self.__json['identifier'] = self.__get_list(self.identifier)
        if self.status:
            self.__json['status'] = self.status
        if self.patient:
            self.__json['patient'] = self.patient.json
        if self.encounter:
            self.__json['encounter'] = self.encounter.json
        if self.practitioner:
            self.__json['practitioner'] = self.practitioner.json
        if self.prescription:
            self.__json['prescription'] = self.prescription.json
        if self.wasNotGiven:
            self.__json['wasNotGiven'] = self.wasNotGiven.json
        if self.reasonNotGiven:
            self.__json['reasonNotGiven'] = self.__get_list(self.reasonNotGiven)
        if self.reasonGiven:
            self.__json['reasonGiven'] = self.__get_list(self.reasonGiven)
        if self.device:
            self.__json['device'] = self.__get_list(self.device)
        if self.note:
            self.__json['note'] = self.__get_list(self.note)
        if self.dosage:
            self.__json['dosage'] = self.dosage.json
        if self.medicationCodeableConcept:
            self.__json['medicationCodeableConcept'] = self.medicationCodeableConcept.json
        if self.medicationReference:
            self.__json['medicationReference'] = self.medicationReference.json
        if self.effectiveTimeDateTime:
            self.__json['effectiveTimeDateTime'] = self.effectiveTimeDateTime.json
        if self.effectiveTimePeriod:
            self.__json['effectiveTimePeriod'] = self.effectiveTimePeriod.json

        # Add json attributes
        self.__json = super(MedicationAdministration, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR MedicationAdministration string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class MedicationDispenseDosageInstructionComponent(BackboneElement):
    '''
    FHIR MedicationDispenseDosageInstructionComponent resource

     Indicates how the medication is to be used by the patient.  The pharmacist reviews the medication order prior to dispense and updates the dosageInstruction based on the actual product being dispensed.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR MedicationDispenseDosageInstructionComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(MedicationDispenseDosageInstructionComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR MedicationDispenseDosageInstructionComponent constructor
        '''
        logging.info("FHIR MedicationDispenseDosageInstructionComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.text = self.__add('text')
        self.additionalInstructions = CodeableConcept(self.__add('additionalInstructions'))
        self.timing = Timing(self.__add('timing'))
        self.route = CodeableConcept(self.__add('route'))
        self.method = CodeableConcept(self.__add('method'))
        self.maxDosePerPeriod = Ratio(self.__add('maxDosePerPeriod'))
        self.asNeededBoolean = Boolean(self.__add('asNeededBoolean'))
        self.asNeededCodeableConcept = CodeableConcept(self.__add('asNeededCodeableConcept'))
        self.siteCodeableConcept = CodeableConcept(self.__add('siteCodeableConcept'))
        self.siteReference = Reference(self.__add('siteReference'))
        self.doseRange = Range(self.__add('doseRange'))
        self.doseQuantity = SimpleQuantity(self.__add('doseQuantity'))
        self.rateRatio = Ratio(self.__add('rateRatio'))
        self.rateRange = Range(self.__add('rateRange'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.text:
            self.__json['text'] = self.text
        if self.additionalInstructions:
            self.__json['additionalInstructions'] = self.additionalInstructions.json
        if self.timing:
            self.__json['timing'] = self.timing.json
        if self.route:
            self.__json['route'] = self.route.json
        if self.method:
            self.__json['method'] = self.method.json
        if self.maxDosePerPeriod:
            self.__json['maxDosePerPeriod'] = self.maxDosePerPeriod.json
        if self.asNeededBoolean:
            self.__json['asNeededBoolean'] = self.asNeededBoolean.json
        if self.asNeededCodeableConcept:
            self.__json['asNeededCodeableConcept'] = self.asNeededCodeableConcept.json
        if self.siteCodeableConcept:
            self.__json['siteCodeableConcept'] = self.siteCodeableConcept.json
        if self.siteReference:
            self.__json['siteReference'] = self.siteReference.json
        if self.doseRange:
            self.__json['doseRange'] = self.doseRange.json
        if self.doseQuantity:
            self.__json['doseQuantity'] = self.doseQuantity.json
        if self.rateRatio:
            self.__json['rateRatio'] = self.rateRatio.json
        if self.rateRange:
            self.__json['rateRange'] = self.rateRange.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR MedicationDispenseDosageInstructionComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class MedicationDispenseSubstitutionComponent(BackboneElement):
    '''
    FHIR MedicationDispenseSubstitutionComponent resource

     Indicates whether or not substitution was made as part of the dispense.  In some cases substitution will be expected but does not happen, in other cases substitution is not expected but does happen.  This block explains what substitution did or did not happen and why.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'reason':
                    list_to_add.append(CodeableConcept(obj))
                elif key == 'responsibleParty':
                    list_to_add.append(Reference(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR MedicationDispenseSubstitutionComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(MedicationDispenseSubstitutionComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR MedicationDispenseSubstitutionComponent constructor
        '''
        logging.info("FHIR MedicationDispenseSubstitutionComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.type = CodeableConcept(self.__add('type'))
        if 'reason' in self.__json:
            if isinstance(self.__json['reason'], list):
                self.reason = self.__add_list('reason')
            else:
                self.reason = CodeableConcept(self.__add('reason'))
        else:
            self.reason = None
        if 'responsibleParty' in self.__json:
            if isinstance(self.__json['responsibleParty'], list):
                self.responsibleParty = self.__add_list('responsibleParty')
            else:
                self.responsibleParty = Reference(self.__add('responsibleParty'))
        else:
            self.responsibleParty = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.type:
            self.__json['type'] = self.type.json
        if self.reason:
            self.__json['reason'] = self.__get_list(self.reason)
        if self.responsibleParty:
            self.__json['responsibleParty'] = self.__get_list(self.responsibleParty)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR MedicationDispenseSubstitutionComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class MedicationDispense(DomainResource):
    '''
    FHIR MedicationDispense resource

     Indicates that a medication product is to be or has been dispensed for a named person/patient.  This includes a description of the medication product (supply) provided and the instructions for administering the medication.  The medication dispense is the result of a pharmacy system responding to a medication order. If the element is present, it must have either a @value, an @id, or extensions

    identifier ->  Identifier assigned by the dispensing facility - this is an identifier assigned outside FHIR.
    status ->  A code specifying the state of the set of dispense events. 
    patient ->  A link to a resource representing the person to whom the medication will be given.
    dispenser ->  The individual responsible for dispensing the medication.
    authorizingPrescription ->  Indicates the medication order that is being dispensed against.
    type ->  Indicates the type of dispensing event that is performed. For example, Trial Fill, Completion of Trial, Partial Fill, Emergency Fill, Samples, etc.
    quantity ->  The amount of medication that has been dispensed. Includes unit of measure.
    daysSupply ->  The amount of medication expressed as a timing amount.
    whenPrepared ->  The time when the dispensed product was packaged and reviewed.
    whenHandedOver ->  The time the dispensed product was provided to the patient or their representative.
    destination ->  Identification of the facility/location where the medication was shipped to, as part of the dispense event.
    receiver ->  Identifies the person who picked up the medication.  This will usually be a patient or their caregiver, but some cases exist where it can be a healthcare professional.
    note ->  Extra information about the dispense that could not be conveyed in the other attributes.
    dosageInstruction ->  Indicates how the medication is to be used by the patient.  The pharmacist reviews the medication order prior to dispense and updates the dosageInstruction based on the actual product being dispensed.
    substitution ->  Indicates whether or not substitution was made as part of the dispense.  In some cases substitution will be expected but does not happen, in other cases substitution is not expected but does happen.  This block explains what substitution did or did not happen and why.
    medicationCodeableConcept ->  Identifies the medication being administered. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.
    medicationReference ->  Identifies the medication being administered. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.

    # Search parameters
        MedicationDispense.search.code
        MedicationDispense.search.destination
        MedicationDispense.search.dispenser
        MedicationDispense.search.identifier
        MedicationDispense.search.medication
        MedicationDispense.search.patient
        MedicationDispense.search.prescription
        MedicationDispense.search.receiver
        MedicationDispense.search.responsibleparty
        MedicationDispense.search.status
        MedicationDispense.search.type
        MedicationDispense.search.whenhandedover
        MedicationDispense.search.whenprepared
    '''
    # search parameters
    par = [("code", "token"),
           ("destination", "reference"),
           ("dispenser", "reference"),
           ("identifier", "token"),
           ("medication", "reference"),
           ("patient", "reference"),
           ("prescription", "reference"),
           ("receiver", "reference"),
           ("responsibleparty", "reference"),
           ("status", "token"),
           ("type", "token"),
           ("whenhandedover", "date"),
           ("whenprepared", "date")]

    search = Params(par, "MedicationDispense")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'authorizingPrescription':
                    list_to_add.append(Reference(obj))
                elif key == 'receiver':
                    list_to_add.append(Reference(obj))
                elif key == 'note':
                    list_to_add.append(Annotation(obj))
                elif key == 'dosageInstruction':
                    list_to_add.append(MedicationDispenseDosageInstructionComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR MedicationDispense __new__
        '''
        if json == None:
            return None
        else:
            return super(MedicationDispense, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR MedicationDispense constructor
        '''
        logging.info("FHIR MedicationDispense: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "MedicationDispense"
        self.identifier = Identifier(self.__add('identifier'))
        self.status = self.__add('status')
        self.patient = Reference(self.__add('patient'))
        self.dispenser = Reference(self.__add('dispenser'))
        if 'authorizingPrescription' in self.__json:
            if isinstance(self.__json['authorizingPrescription'], list):
                self.authorizingPrescription = self.__add_list('authorizingPrescription')
            else:
                self.authorizingPrescription = Reference(self.__add('authorizingPrescription'))
        else:
            self.authorizingPrescription = None
        self.type = CodeableConcept(self.__add('type'))
        self.quantity = SimpleQuantity(self.__add('quantity'))
        self.daysSupply = SimpleQuantity(self.__add('daysSupply'))
        self.whenPrepared = DateTime(self.__add('whenPrepared'))
        self.whenHandedOver = DateTime(self.__add('whenHandedOver'))
        self.destination = Reference(self.__add('destination'))
        if 'receiver' in self.__json:
            if isinstance(self.__json['receiver'], list):
                self.receiver = self.__add_list('receiver')
            else:
                self.receiver = Reference(self.__add('receiver'))
        else:
            self.receiver = None
        if 'note' in self.__json:
            if isinstance(self.__json['note'], list):
                self.note = self.__add_list('note')
            else:
                self.note = Annotation(self.__add('note'))
        else:
            self.note = None
        if 'dosageInstruction' in self.__json:
            if isinstance(self.__json['dosageInstruction'], list):
                self.dosageInstruction = self.__add_list('dosageInstruction')
            else:
                self.dosageInstruction = MedicationDispenseDosageInstructionComponent(self.__add('dosageInstruction'))
        else:
            self.dosageInstruction = None
        self.substitution = MedicationDispenseSubstitutionComponent(self.__add('substitution'))
        self.medicationCodeableConcept = CodeableConcept(self.__add('medicationCodeableConcept'))
        self.medicationReference = Reference(self.__add('medicationReference'))


        # Parent Resource Init
        super(MedicationDispense, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identifier:
            self.__json['identifier'] = self.identifier.json
        if self.status:
            self.__json['status'] = self.status
        if self.patient:
            self.__json['patient'] = self.patient.json
        if self.dispenser:
            self.__json['dispenser'] = self.dispenser.json
        if self.authorizingPrescription:
            self.__json['authorizingPrescription'] = self.__get_list(self.authorizingPrescription)
        if self.type:
            self.__json['type'] = self.type.json
        if self.quantity:
            self.__json['quantity'] = self.quantity.json
        if self.daysSupply:
            self.__json['daysSupply'] = self.daysSupply.json
        if self.whenPrepared:
            self.__json['whenPrepared'] = self.whenPrepared.json
        if self.whenHandedOver:
            self.__json['whenHandedOver'] = self.whenHandedOver.json
        if self.destination:
            self.__json['destination'] = self.destination.json
        if self.receiver:
            self.__json['receiver'] = self.__get_list(self.receiver)
        if self.note:
            self.__json['note'] = self.__get_list(self.note)
        if self.dosageInstruction:
            self.__json['dosageInstruction'] = self.__get_list(self.dosageInstruction)
        if self.substitution:
            self.__json['substitution'] = self.substitution.json
        if self.medicationCodeableConcept:
            self.__json['medicationCodeableConcept'] = self.medicationCodeableConcept.json
        if self.medicationReference:
            self.__json['medicationReference'] = self.medicationReference.json

        # Add json attributes
        self.__json = super(MedicationDispense, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR MedicationDispense string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class MedicationOrderDosageInstructionComponent(BackboneElement):
    '''
    FHIR MedicationOrderDosageInstructionComponent resource

     Indicates how the medication is to be used by the patient.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR MedicationOrderDosageInstructionComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(MedicationOrderDosageInstructionComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR MedicationOrderDosageInstructionComponent constructor
        '''
        logging.info("FHIR MedicationOrderDosageInstructionComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.text = self.__add('text')
        self.additionalInstructions = CodeableConcept(self.__add('additionalInstructions'))
        self.timing = Timing(self.__add('timing'))
        self.route = CodeableConcept(self.__add('route'))
        self.method = CodeableConcept(self.__add('method'))
        self.maxDosePerPeriod = Ratio(self.__add('maxDosePerPeriod'))
        self.asNeededBoolean = Boolean(self.__add('asNeededBoolean'))
        self.asNeededCodeableConcept = CodeableConcept(self.__add('asNeededCodeableConcept'))
        self.siteCodeableConcept = CodeableConcept(self.__add('siteCodeableConcept'))
        self.siteReference = Reference(self.__add('siteReference'))
        self.doseRange = Range(self.__add('doseRange'))
        self.doseQuantity = SimpleQuantity(self.__add('doseQuantity'))
        self.rateRatio = Ratio(self.__add('rateRatio'))
        self.rateRange = Range(self.__add('rateRange'))
        self.rateQuantity = SimpleQuantity(self.__add('rateQuantity'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.text:
            self.__json['text'] = self.text
        if self.additionalInstructions:
            self.__json['additionalInstructions'] = self.additionalInstructions.json
        if self.timing:
            self.__json['timing'] = self.timing.json
        if self.route:
            self.__json['route'] = self.route.json
        if self.method:
            self.__json['method'] = self.method.json
        if self.maxDosePerPeriod:
            self.__json['maxDosePerPeriod'] = self.maxDosePerPeriod.json
        if self.asNeededBoolean:
            self.__json['asNeededBoolean'] = self.asNeededBoolean.json
        if self.asNeededCodeableConcept:
            self.__json['asNeededCodeableConcept'] = self.asNeededCodeableConcept.json
        if self.siteCodeableConcept:
            self.__json['siteCodeableConcept'] = self.siteCodeableConcept.json
        if self.siteReference:
            self.__json['siteReference'] = self.siteReference.json
        if self.doseRange:
            self.__json['doseRange'] = self.doseRange.json
        if self.doseQuantity:
            self.__json['doseQuantity'] = self.doseQuantity.json
        if self.rateRatio:
            self.__json['rateRatio'] = self.rateRatio.json
        if self.rateRange:
            self.__json['rateRange'] = self.rateRange.json
        if self.rateQuantity:
            self.__json['rateQuantity'] = self.rateQuantity.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR MedicationOrderDosageInstructionComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class MedicationOrderDispenseRequestComponent(BackboneElement):
    '''
    FHIR MedicationOrderDispenseRequestComponent resource

     Indicates the specific details for the dispense or medication supply part of a medication order (also known as a Medication Prescription).  Note that this information is NOT always sent with the order.  There may be in some settings (e.g. hospitals) institutional or system support for completing the dispense details in the pharmacy department.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR MedicationOrderDispenseRequestComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(MedicationOrderDispenseRequestComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR MedicationOrderDispenseRequestComponent constructor
        '''
        logging.info("FHIR MedicationOrderDispenseRequestComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.validityPeriod = Period(self.__add('validityPeriod'))
        self.numberOfRepeatsAllowed = self.__add('numberOfRepeatsAllowed')
        self.quantity = SimpleQuantity(self.__add('quantity'))
        self.expectedSupplyDuration = Duration(self.__add('expectedSupplyDuration'))
        self.medicationCodeableConcept = CodeableConcept(self.__add('medicationCodeableConcept'))
        self.medicationReference = Reference(self.__add('medicationReference'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.validityPeriod:
            self.__json['validityPeriod'] = self.validityPeriod.json
        if self.numberOfRepeatsAllowed:
            self.__json['numberOfRepeatsAllowed'] = self.numberOfRepeatsAllowed
        if self.quantity:
            self.__json['quantity'] = self.quantity.json
        if self.expectedSupplyDuration:
            self.__json['expectedSupplyDuration'] = self.expectedSupplyDuration.json
        if self.medicationCodeableConcept:
            self.__json['medicationCodeableConcept'] = self.medicationCodeableConcept.json
        if self.medicationReference:
            self.__json['medicationReference'] = self.medicationReference.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR MedicationOrderDispenseRequestComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class MedicationOrderSubstitutionComponent(BackboneElement):
    '''
    FHIR MedicationOrderSubstitutionComponent resource

     Indicates whether or not substitution can or should be part of the dispense. In some cases substitution must happen, in other cases substitution must not happen, and in others it does not matter. This block explains the prescriber's intent. If nothing is specified substitution may be done.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR MedicationOrderSubstitutionComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(MedicationOrderSubstitutionComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR MedicationOrderSubstitutionComponent constructor
        '''
        logging.info("FHIR MedicationOrderSubstitutionComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.type = CodeableConcept(self.__add('type'))
        self.reason = CodeableConcept(self.__add('reason'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.type:
            self.__json['type'] = self.type.json
        if self.reason:
            self.__json['reason'] = self.reason.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR MedicationOrderSubstitutionComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class MedicationOrder(DomainResource):
    '''
    FHIR MedicationOrder resource

     An order for both supply of the medication and the instructions for administration of the medication to a patient. The resource is called "MedicationOrder" rather than "MedicationPrescription" to generalize the use across inpatient and outpatient settings as well as for care plans, etc. If the element is present, it must have either a @value, an @id, or extensions

    identifier ->  External identifier - one that would be used by another non-FHIR system - for example a re-imbursement system might issue its own id for each prescription that is created.  This is particularly important where FHIR only provides part of an entire workflow process where records have to be tracked through an entire system.
    status ->  A code specifying the state of the order.  Generally this will be active or completed state. 
    patient ->  A link to a resource representing the person to whom the medication will be given.
    encounter ->  A link to a resource that identifies the particular occurrence of contact between patient and health care provider.
    dateWritten ->  The date (and perhaps time) when the prescription was written.
    prescriber ->  The healthcare professional responsible for authorizing the prescription.
    reasonCode ->  Can be the reason or the indication for writing the prescription.
    reasonReference ->  Condition that supports why the prescription is being written.
    dateEnded ->  The date (and perhaps time) when the prescription was stopped.
    reasonEnded ->  The reason why the prescription was stopped, if it was.
    note ->  Extra information about the prescription that could not be conveyed by the other attributes.
    dosageInstruction ->  Indicates how the medication is to be used by the patient.
    dispenseRequest ->  Indicates the specific details for the dispense or medication supply part of a medication order (also known as a Medication Prescription).  Note that this information is NOT always sent with the order.  There may be in some settings (e.g. hospitals) institutional or system support for completing the dispense details in the pharmacy department.
    substitution ->  Indicates whether or not substitution can or should be part of the dispense. In some cases substitution must happen, in other cases substitution must not happen, and in others it does not matter. This block explains the prescriber's intent. If nothing is specified substitution may be done.
    priorPrescription ->  A link to a resource representing an earlier order or prescription that this order supersedes.
    medicationCodeableConcept ->  Identifies the medication being administered. This is a link to a resource that represents the medication which may be the details of the medication or simply an attribute carrying a code that identifies the medication from a known list of medications.
    medicationReference ->  Identifies the medication being administered. This is a link to a resource that represents the medication which may be the details of the medication or simply an attribute carrying a code that identifies the medication from a known list of medications.

    # Search parameters
        MedicationOrder.search.code
        MedicationOrder.search.datewritten
        MedicationOrder.search.encounter
        MedicationOrder.search.identifier
        MedicationOrder.search.medication
        MedicationOrder.search.patient
        MedicationOrder.search.prescriber
        MedicationOrder.search.status
    '''
    # search parameters
    par = [("code", "token"),
           ("datewritten", "date"),
           ("encounter", "reference"),
           ("identifier", "token"),
           ("medication", "reference"),
           ("patient", "reference"),
           ("prescriber", "reference"),
           ("status", "token")]

    search = Params(par, "MedicationOrder")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'identifier':
                    list_to_add.append(Identifier(obj))
                elif key == 'reasonCode':
                    list_to_add.append(CodeableConcept(obj))
                elif key == 'reasonReference':
                    list_to_add.append(Reference(obj))
                elif key == 'note':
                    list_to_add.append(Annotation(obj))
                elif key == 'dosageInstruction':
                    list_to_add.append(MedicationOrderDosageInstructionComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR MedicationOrder __new__
        '''
        if json == None:
            return None
        else:
            return super(MedicationOrder, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR MedicationOrder constructor
        '''
        logging.info("FHIR MedicationOrder: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "MedicationOrder"
        if 'identifier' in self.__json:
            if isinstance(self.__json['identifier'], list):
                self.identifier = self.__add_list('identifier')
            else:
                self.identifier = Identifier(self.__add('identifier'))
        else:
            self.identifier = None
        self.status = self.__add('status')
        self.patient = Reference(self.__add('patient'))
        self.encounter = Reference(self.__add('encounter'))
        self.dateWritten = DateTime(self.__add('dateWritten'))
        self.prescriber = Reference(self.__add('prescriber'))
        if 'reasonCode' in self.__json:
            if isinstance(self.__json['reasonCode'], list):
                self.reasonCode = self.__add_list('reasonCode')
            else:
                self.reasonCode = CodeableConcept(self.__add('reasonCode'))
        else:
            self.reasonCode = None
        if 'reasonReference' in self.__json:
            if isinstance(self.__json['reasonReference'], list):
                self.reasonReference = self.__add_list('reasonReference')
            else:
                self.reasonReference = Reference(self.__add('reasonReference'))
        else:
            self.reasonReference = None
        self.dateEnded = DateTime(self.__add('dateEnded'))
        self.reasonEnded = CodeableConcept(self.__add('reasonEnded'))
        if 'note' in self.__json:
            if isinstance(self.__json['note'], list):
                self.note = self.__add_list('note')
            else:
                self.note = Annotation(self.__add('note'))
        else:
            self.note = None
        if 'dosageInstruction' in self.__json:
            if isinstance(self.__json['dosageInstruction'], list):
                self.dosageInstruction = self.__add_list('dosageInstruction')
            else:
                self.dosageInstruction = MedicationOrderDosageInstructionComponent(self.__add('dosageInstruction'))
        else:
            self.dosageInstruction = None
        self.dispenseRequest = MedicationOrderDispenseRequestComponent(self.__add('dispenseRequest'))
        self.substitution = MedicationOrderSubstitutionComponent(self.__add('substitution'))
        self.priorPrescription = Reference(self.__add('priorPrescription'))
        self.medicationCodeableConcept = CodeableConcept(self.__add('medicationCodeableConcept'))
        self.medicationReference = Reference(self.__add('medicationReference'))


        # Parent Resource Init
        super(MedicationOrder, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identifier:
            self.__json['identifier'] = self.__get_list(self.identifier)
        if self.status:
            self.__json['status'] = self.status
        if self.patient:
            self.__json['patient'] = self.patient.json
        if self.encounter:
            self.__json['encounter'] = self.encounter.json
        if self.dateWritten:
            self.__json['dateWritten'] = self.dateWritten.json
        if self.prescriber:
            self.__json['prescriber'] = self.prescriber.json
        if self.reasonCode:
            self.__json['reasonCode'] = self.__get_list(self.reasonCode)
        if self.reasonReference:
            self.__json['reasonReference'] = self.__get_list(self.reasonReference)
        if self.dateEnded:
            self.__json['dateEnded'] = self.dateEnded.json
        if self.reasonEnded:
            self.__json['reasonEnded'] = self.reasonEnded.json
        if self.note:
            self.__json['note'] = self.__get_list(self.note)
        if self.dosageInstruction:
            self.__json['dosageInstruction'] = self.__get_list(self.dosageInstruction)
        if self.dispenseRequest:
            self.__json['dispenseRequest'] = self.dispenseRequest.json
        if self.substitution:
            self.__json['substitution'] = self.substitution.json
        if self.priorPrescription:
            self.__json['priorPrescription'] = self.priorPrescription.json
        if self.medicationCodeableConcept:
            self.__json['medicationCodeableConcept'] = self.medicationCodeableConcept.json
        if self.medicationReference:
            self.__json['medicationReference'] = self.medicationReference.json

        # Add json attributes
        self.__json = super(MedicationOrder, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR MedicationOrder string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class MedicationStatementDosageComponent(BackboneElement):
    '''
    FHIR MedicationStatementDosageComponent resource

     Indicates how the medication is/was used by the patient.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR MedicationStatementDosageComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(MedicationStatementDosageComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR MedicationStatementDosageComponent constructor
        '''
        logging.info("FHIR MedicationStatementDosageComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.text = self.__add('text')
        self.timing = Timing(self.__add('timing'))
        self.route = CodeableConcept(self.__add('route'))
        self.method = CodeableConcept(self.__add('method'))
        self.maxDosePerPeriod = Ratio(self.__add('maxDosePerPeriod'))
        self.asNeededBoolean = Boolean(self.__add('asNeededBoolean'))
        self.asNeededCodeableConcept = CodeableConcept(self.__add('asNeededCodeableConcept'))
        self.siteCodeableConcept = CodeableConcept(self.__add('siteCodeableConcept'))
        self.siteReference = Reference(self.__add('siteReference'))
        self.quantityQuantity = SimpleQuantity(self.__add('quantityQuantity'))
        self.quantityRange = Range(self.__add('quantityRange'))
        self.rateRatio = Ratio(self.__add('rateRatio'))
        self.rateRange = Range(self.__add('rateRange'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.text:
            self.__json['text'] = self.text
        if self.timing:
            self.__json['timing'] = self.timing.json
        if self.route:
            self.__json['route'] = self.route.json
        if self.method:
            self.__json['method'] = self.method.json
        if self.maxDosePerPeriod:
            self.__json['maxDosePerPeriod'] = self.maxDosePerPeriod.json
        if self.asNeededBoolean:
            self.__json['asNeededBoolean'] = self.asNeededBoolean.json
        if self.asNeededCodeableConcept:
            self.__json['asNeededCodeableConcept'] = self.asNeededCodeableConcept.json
        if self.siteCodeableConcept:
            self.__json['siteCodeableConcept'] = self.siteCodeableConcept.json
        if self.siteReference:
            self.__json['siteReference'] = self.siteReference.json
        if self.quantityQuantity:
            self.__json['quantityQuantity'] = self.quantityQuantity.json
        if self.quantityRange:
            self.__json['quantityRange'] = self.quantityRange.json
        if self.rateRatio:
            self.__json['rateRatio'] = self.rateRatio.json
        if self.rateRange:
            self.__json['rateRange'] = self.rateRange.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR MedicationStatementDosageComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class MedicationStatement(DomainResource):
    '''
    FHIR MedicationStatement resource

     A record of a medication that is being consumed by a patient.   A MedicationStatement may indicate that the patient may be taking the medication now, or has taken the medication in the past or will be taking the medication in the future.  The source of this information can be the patient, significant other (such as a family member or spouse), or a clinician.  A common scenario where this information is captured is during the history taking process during a patient visit or stay.   The medication information may come from e.g. the patient's memory, from a prescription bottle,  or from a list of medications the patient, clinician or other party maintains 

The primary difference between a medication statement and a medication administration is that the medication administration has complete administration information and is based on actual administration information from the person who administered the medication.  A medication statement is often, if not always, less specific.  There is no required date/time when the medication was administered, in fact we only know that a source has reported the patient is taking this medication, where details such as time, quantity, or rate or even medication product may be incomplete or missing or less precise.  As stated earlier, the medication statement information may come from the patient's memory, from a prescription bottle or from a list of medications the patient, clinician or other party maintains.  Medication administration is more formal and is not missing detailed information. If the element is present, it must have either a @value, an @id, or extensions

    identifier ->  External identifier - FHIR will generate its own internal identifiers (probably URLs) which do not need to be explicitly managed by the resource.  The identifier here is one that would be used by another non-FHIR system - for example an automated medication pump would provide a record each time it operated; an administration while the patient was off the ward might be made with a different system and entered after the event.  Particularly important if these records have to be updated.
    status ->  A code representing the patient or other source's judgment about the state of the medication used that this statement is about.  Generally this will be active or completed. 
    patient ->  The person or animal who is/was taking the medication.
    informationSource ->  The person who provided the information about the taking of this medication.  Note:  A MedicationStatement may be derived from supportingInformation e.g claims or medicationOrder.
    supportingInformation ->  Allows linking the MedicationStatement to the underlying MedicationOrder, or to other information that supports or is used to derive the MedicationStatement.
    dateAsserted ->  The date when the medication statement was asserted by the information source.
    wasNotTaken ->  Set this to true if the record is saying that the medication was NOT taken.
    reasonNotTaken ->  A code indicating why the medication was not taken.
    note ->  Provides extra information about the medication statement that is not conveyed by the other attributes.
    dosage ->  Indicates how the medication is/was used by the patient.
    medicationCodeableConcept ->  Identifies the medication being administered. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.
    medicationReference ->  Identifies the medication being administered. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.
    effectiveDateTime ->  The interval of time during which it is being asserted that the patient was taking the medication (or was not taking, when the wasNotGiven element is true).
    effectivePeriod ->  The interval of time during which it is being asserted that the patient was taking the medication (or was not taking, when the wasNotGiven element is true).
    reasonForUseCodeableConcept ->  A reason for why the medication is being/was taken.
    reasonForUseReference ->  A reason for why the medication is being/was taken.

    # Search parameters
        MedicationStatement.search.code
        MedicationStatement.search.effectivedate
        MedicationStatement.search.identifier
        MedicationStatement.search.medication
        MedicationStatement.search.patient
        MedicationStatement.search.source
        MedicationStatement.search.status
    '''
    # search parameters
    par = [("code", "token"),
           ("effectivedate", "date"),
           ("identifier", "token"),
           ("medication", "reference"),
           ("patient", "reference"),
           ("source", "reference"),
           ("status", "token")]

    search = Params(par, "MedicationStatement")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'identifier':
                    list_to_add.append(Identifier(obj))
                elif key == 'supportingInformation':
                    list_to_add.append(Reference(obj))
                elif key == 'reasonNotTaken':
                    list_to_add.append(CodeableConcept(obj))
                elif key == 'note':
                    list_to_add.append(Annotation(obj))
                elif key == 'dosage':
                    list_to_add.append(MedicationStatementDosageComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR MedicationStatement __new__
        '''
        if json == None:
            return None
        else:
            return super(MedicationStatement, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR MedicationStatement constructor
        '''
        logging.info("FHIR MedicationStatement: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "MedicationStatement"
        if 'identifier' in self.__json:
            if isinstance(self.__json['identifier'], list):
                self.identifier = self.__add_list('identifier')
            else:
                self.identifier = Identifier(self.__add('identifier'))
        else:
            self.identifier = None
        self.status = self.__add('status')
        self.patient = Reference(self.__add('patient'))
        self.informationSource = Reference(self.__add('informationSource'))
        if 'supportingInformation' in self.__json:
            if isinstance(self.__json['supportingInformation'], list):
                self.supportingInformation = self.__add_list('supportingInformation')
            else:
                self.supportingInformation = Reference(self.__add('supportingInformation'))
        else:
            self.supportingInformation = None
        self.dateAsserted = DateTime(self.__add('dateAsserted'))
        self.wasNotTaken = Boolean(self.__add('wasNotTaken'))
        if 'reasonNotTaken' in self.__json:
            if isinstance(self.__json['reasonNotTaken'], list):
                self.reasonNotTaken = self.__add_list('reasonNotTaken')
            else:
                self.reasonNotTaken = CodeableConcept(self.__add('reasonNotTaken'))
        else:
            self.reasonNotTaken = None
        if 'note' in self.__json:
            if isinstance(self.__json['note'], list):
                self.note = self.__add_list('note')
            else:
                self.note = Annotation(self.__add('note'))
        else:
            self.note = None
        if 'dosage' in self.__json:
            if isinstance(self.__json['dosage'], list):
                self.dosage = self.__add_list('dosage')
            else:
                self.dosage = MedicationStatementDosageComponent(self.__add('dosage'))
        else:
            self.dosage = None
        self.medicationCodeableConcept = CodeableConcept(self.__add('medicationCodeableConcept'))
        self.medicationReference = Reference(self.__add('medicationReference'))
        self.effectiveDateTime = DateTime(self.__add('effectiveDateTime'))
        self.effectivePeriod = Period(self.__add('effectivePeriod'))
        self.reasonForUseCodeableConcept = CodeableConcept(self.__add('reasonForUseCodeableConcept'))
        self.reasonForUseReference = Reference(self.__add('reasonForUseReference'))


        # Parent Resource Init
        super(MedicationStatement, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identifier:
            self.__json['identifier'] = self.__get_list(self.identifier)
        if self.status:
            self.__json['status'] = self.status
        if self.patient:
            self.__json['patient'] = self.patient.json
        if self.informationSource:
            self.__json['informationSource'] = self.informationSource.json
        if self.supportingInformation:
            self.__json['supportingInformation'] = self.__get_list(self.supportingInformation)
        if self.dateAsserted:
            self.__json['dateAsserted'] = self.dateAsserted.json
        if self.wasNotTaken:
            self.__json['wasNotTaken'] = self.wasNotTaken.json
        if self.reasonNotTaken:
            self.__json['reasonNotTaken'] = self.__get_list(self.reasonNotTaken)
        if self.note:
            self.__json['note'] = self.__get_list(self.note)
        if self.dosage:
            self.__json['dosage'] = self.__get_list(self.dosage)
        if self.medicationCodeableConcept:
            self.__json['medicationCodeableConcept'] = self.medicationCodeableConcept.json
        if self.medicationReference:
            self.__json['medicationReference'] = self.medicationReference.json
        if self.effectiveDateTime:
            self.__json['effectiveDateTime'] = self.effectiveDateTime.json
        if self.effectivePeriod:
            self.__json['effectivePeriod'] = self.effectivePeriod.json
        if self.reasonForUseCodeableConcept:
            self.__json['reasonForUseCodeableConcept'] = self.reasonForUseCodeableConcept.json
        if self.reasonForUseReference:
            self.__json['reasonForUseReference'] = self.reasonForUseReference.json

        # Add json attributes
        self.__json = super(MedicationStatement, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR MedicationStatement string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class MessageHeaderResponseComponent(BackboneElement):
    '''
    FHIR MessageHeaderResponseComponent resource

     Information about the message that this message is a response to.  Only present if this message is a response.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR MessageHeaderResponseComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(MessageHeaderResponseComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR MessageHeaderResponseComponent constructor
        '''
        logging.info("FHIR MessageHeaderResponseComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.identifier = self.__add('identifier')
        self.code = self.__add('code')
        self.details = Reference(self.__add('details'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identifier:
            self.__json['identifier'] = self.identifier
        if self.code:
            self.__json['code'] = self.code
        if self.details:
            self.__json['details'] = self.details.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR MessageHeaderResponseComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class MessageHeaderSourceComponent(BackboneElement):
    '''
    FHIR MessageHeaderSourceComponent resource

     The source application from which this message originated.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR MessageHeaderSourceComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(MessageHeaderSourceComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR MessageHeaderSourceComponent constructor
        '''
        logging.info("FHIR MessageHeaderSourceComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.name = self.__add('name')
        self.software = self.__add('software')
        self.version = self.__add('version')
        self.contact = ContactPoint(self.__add('contact'))
        self.endpoint = self.__add('endpoint')



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.name:
            self.__json['name'] = self.name
        if self.software:
            self.__json['software'] = self.software
        if self.version:
            self.__json['version'] = self.version
        if self.contact:
            self.__json['contact'] = self.contact.json
        if self.endpoint:
            self.__json['endpoint'] = self.endpoint


        return self.__json
        
    def __repr__(self):
        '''
        FHIR MessageHeaderSourceComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class MessageHeaderDestinationComponent(BackboneElement):
    '''
    FHIR MessageHeaderDestinationComponent resource

     The destination application which the message is intended for.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR MessageHeaderDestinationComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(MessageHeaderDestinationComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR MessageHeaderDestinationComponent constructor
        '''
        logging.info("FHIR MessageHeaderDestinationComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.name = self.__add('name')
        self.target = Reference(self.__add('target'))
        self.endpoint = self.__add('endpoint')



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.name:
            self.__json['name'] = self.name
        if self.target:
            self.__json['target'] = self.target.json
        if self.endpoint:
            self.__json['endpoint'] = self.endpoint


        return self.__json
        
    def __repr__(self):
        '''
        FHIR MessageHeaderDestinationComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class MessageHeader(DomainResource):
    '''
    FHIR MessageHeader resource

     The header for a message exchange that is either requesting or responding to an action.  The reference(s) that are the subject of the action as well as other information related to the action are typically transmitted in a bundle in which the MessageHeader resource instance is the first resource in the bundle. If the element is present, it must have either a @value, an @id, or extensions

    timestamp ->  The time that the message was sent.
    event ->  Code that identifies the event this message represents and connects it with its definition. Events defined as part of the FHIR specification have the system value "http://hl7.org/fhir/message-events".
    response ->  Information about the message that this message is a response to.  Only present if this message is a response.
    source ->  The source application from which this message originated.
    destination ->  The destination application which the message is intended for.
    enterer ->  The person or device that performed the data entry leading to this message. Where there is more than one candidate, pick the most proximal to the message. Can provide other enterers in extensions.
    author ->  The logical author of the message - the person or device that decided the described event should happen. Where there is more than one candidate, pick the most proximal to the MessageHeader. Can provide other authors in extensions.
    receiver ->  Allows data conveyed by a message to be addressed to a particular person or department when routing to a specific application isn't sufficient.
    responsible ->  The person or organization that accepts overall responsibility for the contents of the message. The implication is that the message event happened under the policies of the responsible party.
    reason ->  Coded indication of the cause for the event - indicates  a reason for the occurrence of the event that is a focus of this message.
    data ->  The actual data of the message - a reference to the root/focus class of the event.

    # Search parameters
        MessageHeader.search.author
        MessageHeader.search.code
        MessageHeader.search.data
        MessageHeader.search.destination
        MessageHeader.search.destination-uri
        MessageHeader.search.enterer
        MessageHeader.search.event
        MessageHeader.search.receiver
        MessageHeader.search.response-id
        MessageHeader.search.responsible
        MessageHeader.search.source
        MessageHeader.search.source-uri
        MessageHeader.search.target
        MessageHeader.search.timestamp
    '''
    # search parameters
    par = [("author", "reference"),
           ("code", "token"),
           ("data", "reference"),
           ("destination", "string"),
           ("destination-uri", "uri"),
           ("enterer", "reference"),
           ("event", "token"),
           ("receiver", "reference"),
           ("response-id", "token"),
           ("responsible", "reference"),
           ("source", "string"),
           ("source-uri", "uri"),
           ("target", "reference"),
           ("timestamp", "date")]

    search = Params(par, "MessageHeader")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'destination':
                    list_to_add.append(MessageHeaderDestinationComponent(obj))
                elif key == 'data':
                    list_to_add.append(Reference(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR MessageHeader __new__
        '''
        if json == None:
            return None
        else:
            return super(MessageHeader, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR MessageHeader constructor
        '''
        logging.info("FHIR MessageHeader: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "MessageHeader"
        self.timestamp = self.__add('timestamp')
        self.event = Coding(self.__add('event'))
        self.response = MessageHeaderResponseComponent(self.__add('response'))
        self.source = MessageHeaderSourceComponent(self.__add('source'))
        if 'destination' in self.__json:
            if isinstance(self.__json['destination'], list):
                self.destination = self.__add_list('destination')
            else:
                self.destination = MessageHeaderDestinationComponent(self.__add('destination'))
        else:
            self.destination = None
        self.enterer = Reference(self.__add('enterer'))
        self.author = Reference(self.__add('author'))
        self.receiver = Reference(self.__add('receiver'))
        self.responsible = Reference(self.__add('responsible'))
        self.reason = CodeableConcept(self.__add('reason'))
        if 'data' in self.__json:
            if isinstance(self.__json['data'], list):
                self.data = self.__add_list('data')
            else:
                self.data = Reference(self.__add('data'))
        else:
            self.data = None


        # Parent Resource Init
        super(MessageHeader, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.timestamp:
            self.__json['timestamp'] = self.timestamp
        if self.event:
            self.__json['event'] = self.event.json
        if self.response:
            self.__json['response'] = self.response.json
        if self.source:
            self.__json['source'] = self.source.json
        if self.destination:
            self.__json['destination'] = self.__get_list(self.destination)
        if self.enterer:
            self.__json['enterer'] = self.enterer.json
        if self.author:
            self.__json['author'] = self.author.json
        if self.receiver:
            self.__json['receiver'] = self.receiver.json
        if self.responsible:
            self.__json['responsible'] = self.responsible.json
        if self.reason:
            self.__json['reason'] = self.reason.json
        if self.data:
            self.__json['data'] = self.__get_list(self.data)

        # Add json attributes
        self.__json = super(MessageHeader, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR MessageHeader string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ModuleDefinitionModelComponent(BackboneElement):
    '''
    FHIR ModuleDefinitionModelComponent resource

     A model reference used by the content.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ModuleDefinitionModelComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ModuleDefinitionModelComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ModuleDefinitionModelComponent constructor
        '''
        logging.info("FHIR ModuleDefinitionModelComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.name = self.__add('name')
        self.identifier = self.__add('identifier')
        self.version = self.__add('version')



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.name:
            self.__json['name'] = self.name
        if self.identifier:
            self.__json['identifier'] = self.identifier
        if self.version:
            self.__json['version'] = self.version


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ModuleDefinitionModelComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ModuleDefinitionLibraryComponent(BackboneElement):
    '''
    FHIR ModuleDefinitionLibraryComponent resource

     A library referenced by the module. The reference must consist of either an id, or a document reference.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ModuleDefinitionLibraryComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ModuleDefinitionLibraryComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ModuleDefinitionLibraryComponent constructor
        '''
        logging.info("FHIR ModuleDefinitionLibraryComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.name = self.__add('name')
        self.identifier = self.__add('identifier')
        self.version = self.__add('version')
        self.documentAttachment = Attachment(self.__add('documentAttachment'))
        self.documentReference = Reference(self.__add('documentReference'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.name:
            self.__json['name'] = self.name
        if self.identifier:
            self.__json['identifier'] = self.identifier
        if self.version:
            self.__json['version'] = self.version
        if self.documentAttachment:
            self.__json['documentAttachment'] = self.documentAttachment.json
        if self.documentReference:
            self.__json['documentReference'] = self.documentReference.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ModuleDefinitionLibraryComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ModuleDefinitionCodeSystemComponent(BackboneElement):
    '''
    FHIR ModuleDefinitionCodeSystemComponent resource

     A code system definition used within the knowledge module.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ModuleDefinitionCodeSystemComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ModuleDefinitionCodeSystemComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ModuleDefinitionCodeSystemComponent constructor
        '''
        logging.info("FHIR ModuleDefinitionCodeSystemComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.name = self.__add('name')
        self.identifier = self.__add('identifier')
        self.version = self.__add('version')



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.name:
            self.__json['name'] = self.name
        if self.identifier:
            self.__json['identifier'] = self.identifier
        if self.version:
            self.__json['version'] = self.version


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ModuleDefinitionCodeSystemComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ModuleDefinitionValueSetComponent(BackboneElement):
    '''
    FHIR ModuleDefinitionValueSetComponent resource

     A value set definition used by the knowledge module.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ModuleDefinitionValueSetComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ModuleDefinitionValueSetComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ModuleDefinitionValueSetComponent constructor
        '''
        logging.info("FHIR ModuleDefinitionValueSetComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.name = self.__add('name')
        self.identifier = self.__add('identifier')
        self.version = self.__add('version')
        if 'codeSystem' in self.__json:
            if isinstance(self.__json['codeSystem'], list):
                self.codeSystem = self.__add_list('codeSystem')
            else:
                self.codeSystem = self.__add('codeSystem')
        else:
            self.codeSystem = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.name:
            self.__json['name'] = self.name
        if self.identifier:
            self.__json['identifier'] = self.identifier
        if self.version:
            self.__json['version'] = self.version
        if self.codeSystem:
            self.__json['codeSystem'] = self.__get_list(self.codeSystem)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ModuleDefinitionValueSetComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ModuleDefinitionParameterComponent(BackboneElement):
    '''
    FHIR ModuleDefinitionParameterComponent resource

     Parameters to the module.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ModuleDefinitionParameterComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ModuleDefinitionParameterComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ModuleDefinitionParameterComponent constructor
        '''
        logging.info("FHIR ModuleDefinitionParameterComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.name = self.__add('name')
        self.use = self.__add('use')
        self.documentation = self.__add('documentation')
        self.type = self.__add('type')
        self.profile = Reference(self.__add('profile'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.name:
            self.__json['name'] = self.name
        if self.use:
            self.__json['use'] = self.use
        if self.documentation:
            self.__json['documentation'] = self.documentation
        if self.type:
            self.__json['type'] = self.type
        if self.profile:
            self.__json['profile'] = self.profile.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ModuleDefinitionParameterComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ModuleDefinitionCodeFilterComponent(BackboneElement):
    '''
    FHIR ModuleDefinitionCodeFilterComponent resource

     Code filters for the required data, if any.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'codeableConcept':
                    list_to_add.append(CodeableConcept(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ModuleDefinitionCodeFilterComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ModuleDefinitionCodeFilterComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ModuleDefinitionCodeFilterComponent constructor
        '''
        logging.info("FHIR ModuleDefinitionCodeFilterComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.path = self.__add('path')
        if 'codeableConcept' in self.__json:
            if isinstance(self.__json['codeableConcept'], list):
                self.codeableConcept = self.__add_list('codeableConcept')
            else:
                self.codeableConcept = CodeableConcept(self.__add('codeableConcept'))
        else:
            self.codeableConcept = None
        self.valueSetString = self.__add('valueSetString')
        self.valueSetReference = Reference(self.__add('valueSetReference'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.path:
            self.__json['path'] = self.path
        if self.codeableConcept:
            self.__json['codeableConcept'] = self.__get_list(self.codeableConcept)
        if self.valueSetString:
            self.__json['valueSetString'] = self.valueSetString
        if self.valueSetReference:
            self.__json['valueSetReference'] = self.valueSetReference.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ModuleDefinitionCodeFilterComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ModuleDefinitionDateFilterComponent(BackboneElement):
    '''
    FHIR ModuleDefinitionDateFilterComponent resource

     Date filters for the required data, if any.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ModuleDefinitionDateFilterComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ModuleDefinitionDateFilterComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ModuleDefinitionDateFilterComponent constructor
        '''
        logging.info("FHIR ModuleDefinitionDateFilterComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.path = self.__add('path')
        self.valueDateTime = DateTime(self.__add('valueDateTime'))
        self.valuePeriod = Period(self.__add('valuePeriod'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.path:
            self.__json['path'] = self.path
        if self.valueDateTime:
            self.__json['valueDateTime'] = self.valueDateTime.json
        if self.valuePeriod:
            self.__json['valuePeriod'] = self.valuePeriod.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ModuleDefinitionDateFilterComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ModuleDefinitionDataComponent(BackboneElement):
    '''
    FHIR ModuleDefinitionDataComponent resource

     Describes a required data item for evaluation in terms of the type of data, and optional code- or date-based filters of the data.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'codeFilter':
                    list_to_add.append(ModuleDefinitionCodeFilterComponent(obj))
                elif key == 'dateFilter':
                    list_to_add.append(ModuleDefinitionDateFilterComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ModuleDefinitionDataComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ModuleDefinitionDataComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ModuleDefinitionDataComponent constructor
        '''
        logging.info("FHIR ModuleDefinitionDataComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.type = self.__add('type')
        self.profile = Reference(self.__add('profile'))
        if 'mustSupport' in self.__json:
            if isinstance(self.__json['mustSupport'], list):
                self.mustSupport = self.__add_list('mustSupport')
            else:
                self.mustSupport = self.__add('mustSupport')
        else:
            self.mustSupport = None
        if 'codeFilter' in self.__json:
            if isinstance(self.__json['codeFilter'], list):
                self.codeFilter = self.__add_list('codeFilter')
            else:
                self.codeFilter = ModuleDefinitionCodeFilterComponent(self.__add('codeFilter'))
        else:
            self.codeFilter = None
        if 'dateFilter' in self.__json:
            if isinstance(self.__json['dateFilter'], list):
                self.dateFilter = self.__add_list('dateFilter')
            else:
                self.dateFilter = ModuleDefinitionDateFilterComponent(self.__add('dateFilter'))
        else:
            self.dateFilter = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.type:
            self.__json['type'] = self.type
        if self.profile:
            self.__json['profile'] = self.profile.json
        if self.mustSupport:
            self.__json['mustSupport'] = self.__get_list(self.mustSupport)
        if self.codeFilter:
            self.__json['codeFilter'] = self.__get_list(self.codeFilter)
        if self.dateFilter:
            self.__json['dateFilter'] = self.__get_list(self.dateFilter)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ModuleDefinitionDataComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ModuleDefinition(DomainResource):
    '''
    FHIR ModuleDefinition resource

     The ModuleDefinition resource defines the data requirements for a quality artifact. If the element is present, it must have either a @value, an @id, or extensions

    identifier ->  A logical identifier for the module such as the CMS or NQF identifiers for a measure artifact.
    version ->  The version of the module, if any. To provide a version consistent with the Decision Support Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge modules, refer to the Decision Support Service specification.
    model ->  A model reference used by the content.
    library ->  A library referenced by the module. The reference must consist of either an id, or a document reference.
    codeSystem ->  A code system definition used within the knowledge module.
    valueSet ->  A value set definition used by the knowledge module.
    parameter ->  Parameters to the module.
    data ->  Describes a required data item for evaluation in terms of the type of data, and optional code- or date-based filters of the data.

    
    '''
    

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'identifier':
                    list_to_add.append(Identifier(obj))
                elif key == 'model':
                    list_to_add.append(ModuleDefinitionModelComponent(obj))
                elif key == 'library':
                    list_to_add.append(ModuleDefinitionLibraryComponent(obj))
                elif key == 'codeSystem':
                    list_to_add.append(ModuleDefinitionCodeSystemComponent(obj))
                elif key == 'valueSet':
                    list_to_add.append(ModuleDefinitionValueSetComponent(obj))
                elif key == 'parameter':
                    list_to_add.append(ModuleDefinitionParameterComponent(obj))
                elif key == 'data':
                    list_to_add.append(ModuleDefinitionDataComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ModuleDefinition __new__
        '''
        if json == None:
            return None
        else:
            return super(ModuleDefinition, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ModuleDefinition constructor
        '''
        logging.info("FHIR ModuleDefinition: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "ModuleDefinition"
        if 'identifier' in self.__json:
            if isinstance(self.__json['identifier'], list):
                self.identifier = self.__add_list('identifier')
            else:
                self.identifier = Identifier(self.__add('identifier'))
        else:
            self.identifier = None
        self.version = self.__add('version')
        if 'model' in self.__json:
            if isinstance(self.__json['model'], list):
                self.model = self.__add_list('model')
            else:
                self.model = ModuleDefinitionModelComponent(self.__add('model'))
        else:
            self.model = None
        if 'library' in self.__json:
            if isinstance(self.__json['library'], list):
                self.library = self.__add_list('library')
            else:
                self.library = ModuleDefinitionLibraryComponent(self.__add('library'))
        else:
            self.library = None
        if 'codeSystem' in self.__json:
            if isinstance(self.__json['codeSystem'], list):
                self.codeSystem = self.__add_list('codeSystem')
            else:
                self.codeSystem = ModuleDefinitionCodeSystemComponent(self.__add('codeSystem'))
        else:
            self.codeSystem = None
        if 'valueSet' in self.__json:
            if isinstance(self.__json['valueSet'], list):
                self.valueSet = self.__add_list('valueSet')
            else:
                self.valueSet = ModuleDefinitionValueSetComponent(self.__add('valueSet'))
        else:
            self.valueSet = None
        if 'parameter' in self.__json:
            if isinstance(self.__json['parameter'], list):
                self.parameter = self.__add_list('parameter')
            else:
                self.parameter = ModuleDefinitionParameterComponent(self.__add('parameter'))
        else:
            self.parameter = None
        if 'data' in self.__json:
            if isinstance(self.__json['data'], list):
                self.data = self.__add_list('data')
            else:
                self.data = ModuleDefinitionDataComponent(self.__add('data'))
        else:
            self.data = None


        # Parent Resource Init
        super(ModuleDefinition, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identifier:
            self.__json['identifier'] = self.__get_list(self.identifier)
        if self.version:
            self.__json['version'] = self.version
        if self.model:
            self.__json['model'] = self.__get_list(self.model)
        if self.library:
            self.__json['library'] = self.__get_list(self.library)
        if self.codeSystem:
            self.__json['codeSystem'] = self.__get_list(self.codeSystem)
        if self.valueSet:
            self.__json['valueSet'] = self.__get_list(self.valueSet)
        if self.parameter:
            self.__json['parameter'] = self.__get_list(self.parameter)
        if self.data:
            self.__json['data'] = self.__get_list(self.data)

        # Add json attributes
        self.__json = super(ModuleDefinition, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR ModuleDefinition string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class NamingSystemContactComponent(BackboneElement):
    '''
    FHIR NamingSystemContactComponent resource

     Contacts to assist a user in finding and communicating with the publisher.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'telecom':
                    list_to_add.append(ContactPoint(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR NamingSystemContactComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(NamingSystemContactComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR NamingSystemContactComponent constructor
        '''
        logging.info("FHIR NamingSystemContactComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.name = self.__add('name')
        if 'telecom' in self.__json:
            if isinstance(self.__json['telecom'], list):
                self.telecom = self.__add_list('telecom')
            else:
                self.telecom = ContactPoint(self.__add('telecom'))
        else:
            self.telecom = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.name:
            self.__json['name'] = self.name
        if self.telecom:
            self.__json['telecom'] = self.__get_list(self.telecom)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR NamingSystemContactComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class NamingSystemUniqueIdComponent(BackboneElement):
    '''
    FHIR NamingSystemUniqueIdComponent resource

     Indicates how the system may be identified when referenced in electronic exchange.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR NamingSystemUniqueIdComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(NamingSystemUniqueIdComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR NamingSystemUniqueIdComponent constructor
        '''
        logging.info("FHIR NamingSystemUniqueIdComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.type = self.__add('type')
        self.value = self.__add('value')
        self.preferred = Boolean(self.__add('preferred'))
        self.period = Period(self.__add('period'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.type:
            self.__json['type'] = self.type
        if self.value:
            self.__json['value'] = self.value
        if self.preferred:
            self.__json['preferred'] = self.preferred.json
        if self.period:
            self.__json['period'] = self.period.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR NamingSystemUniqueIdComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class NamingSystem(DomainResource):
    '''
    FHIR NamingSystem resource

     A curated namespace that issues unique symbols within that namespace for the identification of concepts, people, devices, etc.  Represents a "System" used within the Identifier and Coding data types. If the element is present, it must have either a @value, an @id, or extensions

    name ->  The descriptive name of this particular identifier type or code system.
    status ->  Indicates whether the naming system is "ready for use" or not. 
    kind ->  Indicates the purpose for the naming system - what kinds of things does it make unique? 
    date ->  The date  (and optionally time) when the system was registered or published. The date must change when the business version changes, if it does, and it must change if the status code changes. In addition, it should change when the substantive content of the registration changes.
    publisher ->  The name of the individual or organization that published the naming system.
    contact ->  Contacts to assist a user in finding and communicating with the publisher.
    responsible ->  The name of the organization that is responsible for issuing identifiers or codes for this namespace and ensuring their non-collision.
    type ->  Categorizes a naming system for easier search by grouping related naming systems.
    description ->  Details about what the namespace identifies including scope, granularity, version labeling, etc.
    useContext ->  The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching of naming systems.
    usage ->  Provides guidance on the use of the namespace, including the handling of formatting characters, use of upper vs. lower case, etc.
    uniqueId ->  Indicates how the system may be identified when referenced in electronic exchange.
    replacedBy ->  For naming systems that are retired, indicates the naming system that should be used in their place (if any).

    # Search parameters
        NamingSystem.search.contact
        NamingSystem.search.context
        NamingSystem.search.date
        NamingSystem.search.id-type
        NamingSystem.search.kind
        NamingSystem.search.name
        NamingSystem.search.period
        NamingSystem.search.publisher
        NamingSystem.search.replaced-by
        NamingSystem.search.responsible
        NamingSystem.search.status
        NamingSystem.search.telecom
        NamingSystem.search.type
        NamingSystem.search.value
    '''
    # search parameters
    par = [("contact", "string"),
           ("context", "token"),
           ("date", "date"),
           ("id-type", "token"),
           ("kind", "token"),
           ("name", "string"),
           ("period", "date"),
           ("publisher", "string"),
           ("replaced-by", "reference"),
           ("responsible", "string"),
           ("status", "token"),
           ("telecom", "token"),
           ("type", "token"),
           ("value", "string")]

    search = Params(par, "NamingSystem")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'contact':
                    list_to_add.append(NamingSystemContactComponent(obj))
                elif key == 'useContext':
                    list_to_add.append(CodeableConcept(obj))
                elif key == 'uniqueId':
                    list_to_add.append(NamingSystemUniqueIdComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR NamingSystem __new__
        '''
        if json == None:
            return None
        else:
            return super(NamingSystem, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR NamingSystem constructor
        '''
        logging.info("FHIR NamingSystem: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "NamingSystem"
        self.name = self.__add('name')
        self.status = self.__add('status')
        self.kind = self.__add('kind')
        self.date = DateTime(self.__add('date'))
        self.publisher = self.__add('publisher')
        if 'contact' in self.__json:
            if isinstance(self.__json['contact'], list):
                self.contact = self.__add_list('contact')
            else:
                self.contact = NamingSystemContactComponent(self.__add('contact'))
        else:
            self.contact = None
        self.responsible = self.__add('responsible')
        self.type = CodeableConcept(self.__add('type'))
        self.description = self.__add('description')
        if 'useContext' in self.__json:
            if isinstance(self.__json['useContext'], list):
                self.useContext = self.__add_list('useContext')
            else:
                self.useContext = CodeableConcept(self.__add('useContext'))
        else:
            self.useContext = None
        self.usage = self.__add('usage')
        if 'uniqueId' in self.__json:
            if isinstance(self.__json['uniqueId'], list):
                self.uniqueId = self.__add_list('uniqueId')
            else:
                self.uniqueId = NamingSystemUniqueIdComponent(self.__add('uniqueId'))
        else:
            self.uniqueId = None
        self.replacedBy = Reference(self.__add('replacedBy'))


        # Parent Resource Init
        super(NamingSystem, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.name:
            self.__json['name'] = self.name
        if self.status:
            self.__json['status'] = self.status
        if self.kind:
            self.__json['kind'] = self.kind
        if self.date:
            self.__json['date'] = self.date.json
        if self.publisher:
            self.__json['publisher'] = self.publisher
        if self.contact:
            self.__json['contact'] = self.__get_list(self.contact)
        if self.responsible:
            self.__json['responsible'] = self.responsible
        if self.type:
            self.__json['type'] = self.type.json
        if self.description:
            self.__json['description'] = self.description
        if self.useContext:
            self.__json['useContext'] = self.__get_list(self.useContext)
        if self.usage:
            self.__json['usage'] = self.usage
        if self.uniqueId:
            self.__json['uniqueId'] = self.__get_list(self.uniqueId)
        if self.replacedBy:
            self.__json['replacedBy'] = self.replacedBy.json

        # Add json attributes
        self.__json = super(NamingSystem, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR NamingSystem string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class NutritionOrderNutrientComponent(BackboneElement):
    '''
    FHIR NutritionOrderNutrientComponent resource

     Class that defines the quantity and type of nutrient modifications required for the oral diet.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR NutritionOrderNutrientComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(NutritionOrderNutrientComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR NutritionOrderNutrientComponent constructor
        '''
        logging.info("FHIR NutritionOrderNutrientComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType


        return self.__json
        
    def __repr__(self):
        '''
        FHIR NutritionOrderNutrientComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class NutritionOrderTextureComponent(BackboneElement):
    '''
    FHIR NutritionOrderTextureComponent resource

     Class that describes any texture modifications required for the patient to safely consume various types of solid foods.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR NutritionOrderTextureComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(NutritionOrderTextureComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR NutritionOrderTextureComponent constructor
        '''
        logging.info("FHIR NutritionOrderTextureComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType


        return self.__json
        
    def __repr__(self):
        '''
        FHIR NutritionOrderTextureComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class NutritionOrderOralDietComponent(BackboneElement):
    '''
    FHIR NutritionOrderOralDietComponent resource

     Diet given orally in contrast to enteral (tube) feeding.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'type':
                    list_to_add.append(CodeableConcept(obj))
                elif key == 'schedule':
                    list_to_add.append(Timing(obj))
                elif key == 'nutrient':
                    list_to_add.append(NutritionOrderNutrientComponent(obj))
                elif key == 'texture':
                    list_to_add.append(NutritionOrderTextureComponent(obj))
                elif key == 'fluidConsistencyType':
                    list_to_add.append(CodeableConcept(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR NutritionOrderOralDietComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(NutritionOrderOralDietComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR NutritionOrderOralDietComponent constructor
        '''
        logging.info("FHIR NutritionOrderOralDietComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        if 'type' in self.__json:
            if isinstance(self.__json['type'], list):
                self.type = self.__add_list('type')
            else:
                self.type = CodeableConcept(self.__add('type'))
        else:
            self.type = None
        if 'schedule' in self.__json:
            if isinstance(self.__json['schedule'], list):
                self.schedule = self.__add_list('schedule')
            else:
                self.schedule = Timing(self.__add('schedule'))
        else:
            self.schedule = None
        if 'nutrient' in self.__json:
            if isinstance(self.__json['nutrient'], list):
                self.nutrient = self.__add_list('nutrient')
            else:
                self.nutrient = NutritionOrderNutrientComponent(self.__add('nutrient'))
        else:
            self.nutrient = None
        if 'texture' in self.__json:
            if isinstance(self.__json['texture'], list):
                self.texture = self.__add_list('texture')
            else:
                self.texture = NutritionOrderTextureComponent(self.__add('texture'))
        else:
            self.texture = None
        if 'fluidConsistencyType' in self.__json:
            if isinstance(self.__json['fluidConsistencyType'], list):
                self.fluidConsistencyType = self.__add_list('fluidConsistencyType')
            else:
                self.fluidConsistencyType = CodeableConcept(self.__add('fluidConsistencyType'))
        else:
            self.fluidConsistencyType = None
        self.instruction = self.__add('instruction')



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.type:
            self.__json['type'] = self.__get_list(self.type)
        if self.schedule:
            self.__json['schedule'] = self.__get_list(self.schedule)
        if self.nutrient:
            self.__json['nutrient'] = self.__get_list(self.nutrient)
        if self.texture:
            self.__json['texture'] = self.__get_list(self.texture)
        if self.fluidConsistencyType:
            self.__json['fluidConsistencyType'] = self.__get_list(self.fluidConsistencyType)
        if self.instruction:
            self.__json['instruction'] = self.instruction


        return self.__json
        
    def __repr__(self):
        '''
        FHIR NutritionOrderOralDietComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class NutritionOrderSupplementComponent(BackboneElement):
    '''
    FHIR NutritionOrderSupplementComponent resource

     Oral nutritional products given in order to add further nutritional value to the patient's diet.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'schedule':
                    list_to_add.append(Timing(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR NutritionOrderSupplementComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(NutritionOrderSupplementComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR NutritionOrderSupplementComponent constructor
        '''
        logging.info("FHIR NutritionOrderSupplementComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.type = CodeableConcept(self.__add('type'))
        self.productName = self.__add('productName')
        if 'schedule' in self.__json:
            if isinstance(self.__json['schedule'], list):
                self.schedule = self.__add_list('schedule')
            else:
                self.schedule = Timing(self.__add('schedule'))
        else:
            self.schedule = None
        self.quantity = SimpleQuantity(self.__add('quantity'))
        self.instruction = self.__add('instruction')



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.type:
            self.__json['type'] = self.type.json
        if self.productName:
            self.__json['productName'] = self.productName
        if self.schedule:
            self.__json['schedule'] = self.__get_list(self.schedule)
        if self.quantity:
            self.__json['quantity'] = self.quantity.json
        if self.instruction:
            self.__json['instruction'] = self.instruction


        return self.__json
        
    def __repr__(self):
        '''
        FHIR NutritionOrderSupplementComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class NutritionOrderAdministrationComponent(BackboneElement):
    '''
    FHIR NutritionOrderAdministrationComponent resource

     Formula administration instructions as structured data.  This repeating structure allows for changing the administration rate or volume over time for both bolus and continuous feeding.  An example of this would be an instruction to increase the rate of continuous feeding every 2 hours.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR NutritionOrderAdministrationComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(NutritionOrderAdministrationComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR NutritionOrderAdministrationComponent constructor
        '''
        logging.info("FHIR NutritionOrderAdministrationComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType


        return self.__json
        
    def __repr__(self):
        '''
        FHIR NutritionOrderAdministrationComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class NutritionOrderEnteralFormulaComponent(BackboneElement):
    '''
    FHIR NutritionOrderEnteralFormulaComponent resource

     Feeding provided through the gastrointestinal tract via a tube, catheter, or stoma that delivers nutrition distal to the oral cavity.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'administration':
                    list_to_add.append(NutritionOrderAdministrationComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR NutritionOrderEnteralFormulaComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(NutritionOrderEnteralFormulaComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR NutritionOrderEnteralFormulaComponent constructor
        '''
        logging.info("FHIR NutritionOrderEnteralFormulaComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.baseFormulaType = CodeableConcept(self.__add('baseFormulaType'))
        self.baseFormulaProductName = self.__add('baseFormulaProductName')
        self.additiveType = CodeableConcept(self.__add('additiveType'))
        self.additiveProductName = self.__add('additiveProductName')
        self.caloricDensity = SimpleQuantity(self.__add('caloricDensity'))
        self.routeofAdministration = CodeableConcept(self.__add('routeofAdministration'))
        if 'administration' in self.__json:
            if isinstance(self.__json['administration'], list):
                self.administration = self.__add_list('administration')
            else:
                self.administration = NutritionOrderAdministrationComponent(self.__add('administration'))
        else:
            self.administration = None
        self.maxVolumeToDeliver = SimpleQuantity(self.__add('maxVolumeToDeliver'))
        self.administrationInstruction = self.__add('administrationInstruction')



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.baseFormulaType:
            self.__json['baseFormulaType'] = self.baseFormulaType.json
        if self.baseFormulaProductName:
            self.__json['baseFormulaProductName'] = self.baseFormulaProductName
        if self.additiveType:
            self.__json['additiveType'] = self.additiveType.json
        if self.additiveProductName:
            self.__json['additiveProductName'] = self.additiveProductName
        if self.caloricDensity:
            self.__json['caloricDensity'] = self.caloricDensity.json
        if self.routeofAdministration:
            self.__json['routeofAdministration'] = self.routeofAdministration.json
        if self.administration:
            self.__json['administration'] = self.__get_list(self.administration)
        if self.maxVolumeToDeliver:
            self.__json['maxVolumeToDeliver'] = self.maxVolumeToDeliver.json
        if self.administrationInstruction:
            self.__json['administrationInstruction'] = self.administrationInstruction


        return self.__json
        
    def __repr__(self):
        '''
        FHIR NutritionOrderEnteralFormulaComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class NutritionOrder(DomainResource):
    '''
    FHIR NutritionOrder resource

     A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a patient/resident. If the element is present, it must have either a @value, an @id, or extensions

    identifier ->  Identifiers assigned to this order by the order sender or by the order receiver.
    status ->  The workflow status of the nutrition order/request. 
    patient ->  The person (patient) who needs the nutrition order for an oral diet, nutritional supplement and/or enteral or formula feeding.
    encounter ->  An encounter that provides additional information about the healthcare context in which this request is made.
    dateTime ->  The date and time that this nutrition order was requested.
    orderer ->  The practitioner that holds legal responsibility for ordering the diet, nutritional supplement, or formula feedings.
    allergyIntolerance ->  A link to a record of allergies or intolerances  which should be included in the nutrition order.
    foodPreferenceModifier ->  This modifier is used to convey order-specific modifiers about the type of food that should be given. These can be derived from patient allergies, intolerances, or preferences such as Halal, Vegan or Kosher. This modifier applies to the entire nutrition order inclusive of the oral diet, nutritional supplements and enteral formula feedings.
    excludeFoodModifier ->  This modifier is used to convey order-specific modifiers about the type of food that should NOT be given. These can be derived from patient allergies, intolerances, or preferences such as No Red Meat, No Soy or No Wheat or  Gluten-Free.  While it should not be necessary to repeat allergy or intolerance information captured in the referenced allergyIntolerance resource in the excludeFoodModifier, this element may be used to convey additional specificity related to foods that should be eliminated from the patient s diet for any reason.  This modifier applies to the entire nutrition order inclusive of the oral diet, nutritional supplements and enteral formula feedings.
    oralDiet ->  Diet given orally in contrast to enteral (tube) feeding.
    supplement ->  Oral nutritional products given in order to add further nutritional value to the patient's diet.
    enteralFormula ->  Feeding provided through the gastrointestinal tract via a tube, catheter, or stoma that delivers nutrition distal to the oral cavity.

    # Search parameters
        NutritionOrder.search.additive
        NutritionOrder.search.datetime
        NutritionOrder.search.encounter
        NutritionOrder.search.formula
        NutritionOrder.search.identifier
        NutritionOrder.search.oraldiet
        NutritionOrder.search.patient
        NutritionOrder.search.provider
        NutritionOrder.search.status
        NutritionOrder.search.supplement
    '''
    # search parameters
    par = [("additive", "token"),
           ("datetime", "date"),
           ("encounter", "reference"),
           ("formula", "token"),
           ("identifier", "token"),
           ("oraldiet", "token"),
           ("patient", "reference"),
           ("provider", "reference"),
           ("status", "token"),
           ("supplement", "token")]

    search = Params(par, "NutritionOrder")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'identifier':
                    list_to_add.append(Identifier(obj))
                elif key == 'allergyIntolerance':
                    list_to_add.append(Reference(obj))
                elif key == 'foodPreferenceModifier':
                    list_to_add.append(CodeableConcept(obj))
                elif key == 'excludeFoodModifier':
                    list_to_add.append(CodeableConcept(obj))
                elif key == 'supplement':
                    list_to_add.append(NutritionOrderSupplementComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR NutritionOrder __new__
        '''
        if json == None:
            return None
        else:
            return super(NutritionOrder, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR NutritionOrder constructor
        '''
        logging.info("FHIR NutritionOrder: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "NutritionOrder"
        if 'identifier' in self.__json:
            if isinstance(self.__json['identifier'], list):
                self.identifier = self.__add_list('identifier')
            else:
                self.identifier = Identifier(self.__add('identifier'))
        else:
            self.identifier = None
        self.status = self.__add('status')
        self.patient = Reference(self.__add('patient'))
        self.encounter = Reference(self.__add('encounter'))
        self.dateTime = DateTime(self.__add('dateTime'))
        self.orderer = Reference(self.__add('orderer'))
        if 'allergyIntolerance' in self.__json:
            if isinstance(self.__json['allergyIntolerance'], list):
                self.allergyIntolerance = self.__add_list('allergyIntolerance')
            else:
                self.allergyIntolerance = Reference(self.__add('allergyIntolerance'))
        else:
            self.allergyIntolerance = None
        if 'foodPreferenceModifier' in self.__json:
            if isinstance(self.__json['foodPreferenceModifier'], list):
                self.foodPreferenceModifier = self.__add_list('foodPreferenceModifier')
            else:
                self.foodPreferenceModifier = CodeableConcept(self.__add('foodPreferenceModifier'))
        else:
            self.foodPreferenceModifier = None
        if 'excludeFoodModifier' in self.__json:
            if isinstance(self.__json['excludeFoodModifier'], list):
                self.excludeFoodModifier = self.__add_list('excludeFoodModifier')
            else:
                self.excludeFoodModifier = CodeableConcept(self.__add('excludeFoodModifier'))
        else:
            self.excludeFoodModifier = None
        self.oralDiet = NutritionOrderOralDietComponent(self.__add('oralDiet'))
        if 'supplement' in self.__json:
            if isinstance(self.__json['supplement'], list):
                self.supplement = self.__add_list('supplement')
            else:
                self.supplement = NutritionOrderSupplementComponent(self.__add('supplement'))
        else:
            self.supplement = None
        self.enteralFormula = NutritionOrderEnteralFormulaComponent(self.__add('enteralFormula'))


        # Parent Resource Init
        super(NutritionOrder, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identifier:
            self.__json['identifier'] = self.__get_list(self.identifier)
        if self.status:
            self.__json['status'] = self.status
        if self.patient:
            self.__json['patient'] = self.patient.json
        if self.encounter:
            self.__json['encounter'] = self.encounter.json
        if self.dateTime:
            self.__json['dateTime'] = self.dateTime.json
        if self.orderer:
            self.__json['orderer'] = self.orderer.json
        if self.allergyIntolerance:
            self.__json['allergyIntolerance'] = self.__get_list(self.allergyIntolerance)
        if self.foodPreferenceModifier:
            self.__json['foodPreferenceModifier'] = self.__get_list(self.foodPreferenceModifier)
        if self.excludeFoodModifier:
            self.__json['excludeFoodModifier'] = self.__get_list(self.excludeFoodModifier)
        if self.oralDiet:
            self.__json['oralDiet'] = self.oralDiet.json
        if self.supplement:
            self.__json['supplement'] = self.__get_list(self.supplement)
        if self.enteralFormula:
            self.__json['enteralFormula'] = self.enteralFormula.json

        # Add json attributes
        self.__json = super(NutritionOrder, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR NutritionOrder string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ObservationReferenceRangeComponent(BackboneElement):
    '''
    FHIR ObservationReferenceRangeComponent resource

     Guidance on how to interpret the value by comparison to a normal or recommended range.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ObservationReferenceRangeComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ObservationReferenceRangeComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ObservationReferenceRangeComponent constructor
        '''
        logging.info("FHIR ObservationReferenceRangeComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.low = SimpleQuantity(self.__add('low'))
        self.high = SimpleQuantity(self.__add('high'))
        self.meaning = CodeableConcept(self.__add('meaning'))
        self.age = Range(self.__add('age'))
        self.text = self.__add('text')
        self.low = SimpleQuantity(self.__add('low'))
        self.high = SimpleQuantity(self.__add('high'))
        self.meaning = CodeableConcept(self.__add('meaning'))
        self.age = Range(self.__add('age'))
        self.text = self.__add('text')



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.low:
            self.__json['low'] = self.low.json
        if self.high:
            self.__json['high'] = self.high.json
        if self.meaning:
            self.__json['meaning'] = self.meaning.json
        if self.age:
            self.__json['age'] = self.age.json
        if self.text:
            self.__json['text'] = self.text
        if self.low:
            self.__json['low'] = self.low.json
        if self.high:
            self.__json['high'] = self.high.json
        if self.meaning:
            self.__json['meaning'] = self.meaning.json
        if self.age:
            self.__json['age'] = self.age.json
        if self.text:
            self.__json['text'] = self.text


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ObservationReferenceRangeComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ObservationRelatedComponent(BackboneElement):
    '''
    FHIR ObservationRelatedComponent resource

     A  reference to another resource (usually another Observation but could  also be a QuestionnaireAnswer) whose relationship is defined by the relationship type code.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ObservationRelatedComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ObservationRelatedComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ObservationRelatedComponent constructor
        '''
        logging.info("FHIR ObservationRelatedComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.type = self.__add('type')
        self.target = Reference(self.__add('target'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.type:
            self.__json['type'] = self.type
        if self.target:
            self.__json['target'] = self.target.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ObservationRelatedComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ObservationComponentComponent(BackboneElement):
    '''
    FHIR ObservationComponentComponent resource

     Some observations have multiple component observations.  These component observations are expressed as separate code value pairs that share the same attributes.  Examples include systolic and diastolic component observations for blood pressure measurement and multiple component observations for genetics observations.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'referenceRange':
                    list_to_add.append(ObservationReferenceRangeComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ObservationComponentComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ObservationComponentComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ObservationComponentComponent constructor
        '''
        logging.info("FHIR ObservationComponentComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.code = CodeableConcept(self.__add('code'))
        self.dataAbsentReason = CodeableConcept(self.__add('dataAbsentReason'))
        if 'referenceRange' in self.__json:
            if isinstance(self.__json['referenceRange'], list):
                self.referenceRange = self.__add_list('referenceRange')
            else:
                self.referenceRange = ObservationReferenceRangeComponent(self.__add('referenceRange'))
        else:
            self.referenceRange = None
        self.valueQuantity = Quantity(self.__add('valueQuantity'))
        self.valueCodeableConcept = CodeableConcept(self.__add('valueCodeableConcept'))
        self.valueString = self.__add('valueString')
        self.valueRange = Range(self.__add('valueRange'))
        self.valueRatio = Ratio(self.__add('valueRatio'))
        self.valueSampledData = SampledData(self.__add('valueSampledData'))
        self.valueAttachment = Attachment(self.__add('valueAttachment'))
        self.valueTime = Time(self.__add('valueTime'))
        self.valueDateTime = DateTime(self.__add('valueDateTime'))
        self.valuePeriod = Period(self.__add('valuePeriod'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.code:
            self.__json['code'] = self.code.json
        if self.dataAbsentReason:
            self.__json['dataAbsentReason'] = self.dataAbsentReason.json
        if self.referenceRange:
            self.__json['referenceRange'] = self.__get_list(self.referenceRange)
        if self.valueQuantity:
            self.__json['valueQuantity'] = self.valueQuantity.json
        if self.valueCodeableConcept:
            self.__json['valueCodeableConcept'] = self.valueCodeableConcept.json
        if self.valueString:
            self.__json['valueString'] = self.valueString
        if self.valueRange:
            self.__json['valueRange'] = self.valueRange.json
        if self.valueRatio:
            self.__json['valueRatio'] = self.valueRatio.json
        if self.valueSampledData:
            self.__json['valueSampledData'] = self.valueSampledData.json
        if self.valueAttachment:
            self.__json['valueAttachment'] = self.valueAttachment.json
        if self.valueTime:
            self.__json['valueTime'] = self.valueTime.json
        if self.valueDateTime:
            self.__json['valueDateTime'] = self.valueDateTime.json
        if self.valuePeriod:
            self.__json['valuePeriod'] = self.valuePeriod.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ObservationComponentComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class Observation(DomainResource):
    '''
    FHIR Observation resource

     Measurements and simple assertions made about a patient, device or other subject. If the element is present, it must have either a @value, an @id, or extensions

    identifier ->  A unique identifier for the simple observation instance.
    status ->  The status of the result value. 
    category ->  A code that classifies the general type of observation being made.  This is used  for searching, sorting and display purposes.
    code ->  Describes what was observed. Sometimes this is called the observation "name".
    subject ->  The patient, or group of patients, location, or device whose characteristics (direct or indirect) are described by the observation and into whose record the observation is placed.  Comments: Indirect characteristics may be those of a specimen, fetus, donor,  other observer (for example a relative or EMT), or any observation made about the subject.
    encounter ->  The healthcare event  (e.g. a patient and healthcare provider interaction) during which this observation is made.
    issued ->  The date and time this observation was made available to providers, typically after the results have been reviewed and verified.
    performer ->  Who was responsible for asserting the observed value as "true".
    dataAbsentReason ->  Provides a reason why the expected value in the element Observation.value[x] is missing.
    interpretation ->  The assessment made based on the result of the observation.  Intended as a simple compact code often placed adjacent to the result value in reports and flow sheets to signal the meaning/normalcy status of the result. Otherwise known as abnormal flag.
    comment ->  May include statements about significant, unexpected or unreliable values, or information about the source of the value where this may be relevant to the interpretation of the result.
    bodySite ->  Indicates the site on the subject's body where the observation was made (i.e. the target site).
    method ->  Indicates the mechanism used to perform the observation.
    specimen ->  The specimen that was used when this observation was made.
    device ->  The device used to generate the observation data.
    referenceRange ->  Guidance on how to interpret the value by comparison to a normal or recommended range.
    related ->  A  reference to another resource (usually another Observation but could  also be a QuestionnaireAnswer) whose relationship is defined by the relationship type code.
    component ->  Some observations have multiple component observations.  These component observations are expressed as separate code value pairs that share the same attributes.  Examples include systolic and diastolic component observations for blood pressure measurement and multiple component observations for genetics observations.
    effectiveDateTime ->  The time or time-period the observed value is asserted as being true. For biological subjects - e.g. human patients - this is usually called the "physiologically relevant time". This is usually either the time of the procedure or of specimen collection, but very often the source of the date/time is not known, only the date/time itself.
    effectivePeriod ->  The time or time-period the observed value is asserted as being true. For biological subjects - e.g. human patients - this is usually called the "physiologically relevant time". This is usually either the time of the procedure or of specimen collection, but very often the source of the date/time is not known, only the date/time itself.
    valueQuantity ->  The information determined as a result of making the observation, if the information has a simple value.
    valueCodeableConcept ->  The information determined as a result of making the observation, if the information has a simple value.
    valueString ->  The information determined as a result of making the observation, if the information has a simple value.
    valueRange ->  The information determined as a result of making the observation, if the information has a simple value.
    valueRatio ->  The information determined as a result of making the observation, if the information has a simple value.
    valueSampledData ->  The information determined as a result of making the observation, if the information has a simple value.
    valueAttachment ->  The information determined as a result of making the observation, if the information has a simple value.
    valueTime ->  The information determined as a result of making the observation, if the information has a simple value.
    valueDateTime ->  The information determined as a result of making the observation, if the information has a simple value.
    valuePeriod ->  The information determined as a result of making the observation, if the information has a simple value.

    # Search parameters
        Observation.search.category
        Observation.search.code
        Observation.search.code-value-attachment
        Observation.search.code-value-codeable-concept
        Observation.search.code-value-date-time
        Observation.search.code-value-period
        Observation.search.code-value-quantity
        Observation.search.code-value-range
        Observation.search.code-value-ratio
        Observation.search.code-value-sampled-data
        Observation.search.code-value-string
        Observation.search.code-value-time
        Observation.search.component-code
        Observation.search.component-code-value-attachment
        Observation.search.component-code-value-codeable-concept
        Observation.search.component-code-value-date-time
        Observation.search.component-code-value-period
        Observation.search.component-code-value-quantity
        Observation.search.component-code-value-range
        Observation.search.component-code-value-ratio
        Observation.search.component-code-value-sampled-data
        Observation.search.component-code-value-string
        Observation.search.component-code-value-time
        Observation.search.component-data-absent-reason
        Observation.search.component-value-concept
        Observation.search.component-value-quantity
        Observation.search.component-value-string
        Observation.search.data-absent-reason
        Observation.search.date
        Observation.search.device
        Observation.search.encounter
        Observation.search.identifier
        Observation.search.patient
        Observation.search.performer
        Observation.search.related
        Observation.search.related-target
        Observation.search.related-type
        Observation.search.specimen
        Observation.search.status
        Observation.search.subject
        Observation.search.value-concept
        Observation.search.value-date
        Observation.search.value-quantity
        Observation.search.value-string
    '''
    # search parameters
    par = [("category", "token"),
           ("code", "token"),
           ("code-value-attachment", "string"),
           ("code-value-codeable-concept", "token"),
           ("code-value-date-time", "date"),
           ("code-value-period", "date"),
           ("code-value-quantity", "quantity"),
           ("code-value-range", "string"),
           ("code-value-ratio", "string"),
           ("code-value-sampled-data", "string"),
           ("code-value-string", "string"),
           ("code-value-time", "date"),
           ("component-code", "token"),
           ("component-code-value-attachment", "string"),
           ("component-code-value-codeable-concept", "token"),
           ("component-code-value-date-time", "date"),
           ("component-code-value-period", "date"),
           ("component-code-value-quantity", "quantity"),
           ("component-code-value-range", "string"),
           ("component-code-value-ratio", "string"),
           ("component-code-value-sampled-data", "string"),
           ("component-code-value-string", "string"),
           ("component-code-value-time", "date"),
           ("component-data-absent-reason", "token"),
           ("component-value-concept", "token"),
           ("component-value-quantity", "quantity"),
           ("component-value-string", "string"),
           ("data-absent-reason", "token"),
           ("date", "date"),
           ("device", "reference"),
           ("encounter", "reference"),
           ("identifier", "token"),
           ("patient", "reference"),
           ("performer", "reference"),
           ("related", "None"),
           ("related-target", "reference"),
           ("related-type", "token"),
           ("specimen", "reference"),
           ("status", "token"),
           ("subject", "reference"),
           ("value-concept", "token"),
           ("value-date", "date"),
           ("value-quantity", "quantity"),
           ("value-string", "string")]

    search = Params(par, "Observation")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'identifier':
                    list_to_add.append(Identifier(obj))
                elif key == 'performer':
                    list_to_add.append(Reference(obj))
                elif key == 'referenceRange':
                    list_to_add.append(ObservationReferenceRangeComponent(obj))
                elif key == 'related':
                    list_to_add.append(ObservationRelatedComponent(obj))
                elif key == 'component':
                    list_to_add.append(ObservationComponentComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR Observation __new__
        '''
        if json == None:
            return None
        else:
            return super(Observation, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR Observation constructor
        '''
        logging.info("FHIR Observation: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "Observation"
        if 'identifier' in self.__json:
            if isinstance(self.__json['identifier'], list):
                self.identifier = self.__add_list('identifier')
            else:
                self.identifier = Identifier(self.__add('identifier'))
        else:
            self.identifier = None
        self.status = self.__add('status')
        self.category = CodeableConcept(self.__add('category'))
        self.code = CodeableConcept(self.__add('code'))
        self.subject = Reference(self.__add('subject'))
        self.encounter = Reference(self.__add('encounter'))
        self.issued = self.__add('issued')
        if 'performer' in self.__json:
            if isinstance(self.__json['performer'], list):
                self.performer = self.__add_list('performer')
            else:
                self.performer = Reference(self.__add('performer'))
        else:
            self.performer = None
        self.dataAbsentReason = CodeableConcept(self.__add('dataAbsentReason'))
        self.interpretation = CodeableConcept(self.__add('interpretation'))
        self.comment = self.__add('comment')
        self.bodySite = CodeableConcept(self.__add('bodySite'))
        self.method = CodeableConcept(self.__add('method'))
        self.specimen = Reference(self.__add('specimen'))
        self.device = Reference(self.__add('device'))
        if 'referenceRange' in self.__json:
            if isinstance(self.__json['referenceRange'], list):
                self.referenceRange = self.__add_list('referenceRange')
            else:
                self.referenceRange = ObservationReferenceRangeComponent(self.__add('referenceRange'))
        else:
            self.referenceRange = None
        if 'related' in self.__json:
            if isinstance(self.__json['related'], list):
                self.related = self.__add_list('related')
            else:
                self.related = ObservationRelatedComponent(self.__add('related'))
        else:
            self.related = None
        if 'component' in self.__json:
            if isinstance(self.__json['component'], list):
                self.component = self.__add_list('component')
            else:
                self.component = ObservationComponentComponent(self.__add('component'))
        else:
            self.component = None
        self.effectiveDateTime = DateTime(self.__add('effectiveDateTime'))
        self.effectivePeriod = Period(self.__add('effectivePeriod'))
        self.valueQuantity = Quantity(self.__add('valueQuantity'))
        self.valueCodeableConcept = CodeableConcept(self.__add('valueCodeableConcept'))
        self.valueString = self.__add('valueString')
        self.valueRange = Range(self.__add('valueRange'))
        self.valueRatio = Ratio(self.__add('valueRatio'))
        self.valueSampledData = SampledData(self.__add('valueSampledData'))
        self.valueAttachment = Attachment(self.__add('valueAttachment'))
        self.valueTime = Time(self.__add('valueTime'))
        self.valueDateTime = DateTime(self.__add('valueDateTime'))
        self.valuePeriod = Period(self.__add('valuePeriod'))


        # Parent Resource Init
        super(Observation, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identifier:
            self.__json['identifier'] = self.__get_list(self.identifier)
        if self.status:
            self.__json['status'] = self.status
        if self.category:
            self.__json['category'] = self.category.json
        if self.code:
            self.__json['code'] = self.code.json
        if self.subject:
            self.__json['subject'] = self.subject.json
        if self.encounter:
            self.__json['encounter'] = self.encounter.json
        if self.issued:
            self.__json['issued'] = self.issued
        if self.performer:
            self.__json['performer'] = self.__get_list(self.performer)
        if self.dataAbsentReason:
            self.__json['dataAbsentReason'] = self.dataAbsentReason.json
        if self.interpretation:
            self.__json['interpretation'] = self.interpretation.json
        if self.comment:
            self.__json['comment'] = self.comment
        if self.bodySite:
            self.__json['bodySite'] = self.bodySite.json
        if self.method:
            self.__json['method'] = self.method.json
        if self.specimen:
            self.__json['specimen'] = self.specimen.json
        if self.device:
            self.__json['device'] = self.device.json
        if self.referenceRange:
            self.__json['referenceRange'] = self.__get_list(self.referenceRange)
        if self.related:
            self.__json['related'] = self.__get_list(self.related)
        if self.component:
            self.__json['component'] = self.__get_list(self.component)
        if self.effectiveDateTime:
            self.__json['effectiveDateTime'] = self.effectiveDateTime.json
        if self.effectivePeriod:
            self.__json['effectivePeriod'] = self.effectivePeriod.json
        if self.valueQuantity:
            self.__json['valueQuantity'] = self.valueQuantity.json
        if self.valueCodeableConcept:
            self.__json['valueCodeableConcept'] = self.valueCodeableConcept.json
        if self.valueString:
            self.__json['valueString'] = self.valueString
        if self.valueRange:
            self.__json['valueRange'] = self.valueRange.json
        if self.valueRatio:
            self.__json['valueRatio'] = self.valueRatio.json
        if self.valueSampledData:
            self.__json['valueSampledData'] = self.valueSampledData.json
        if self.valueAttachment:
            self.__json['valueAttachment'] = self.valueAttachment.json
        if self.valueTime:
            self.__json['valueTime'] = self.valueTime.json
        if self.valueDateTime:
            self.__json['valueDateTime'] = self.valueDateTime.json
        if self.valuePeriod:
            self.__json['valuePeriod'] = self.valuePeriod.json

        # Add json attributes
        self.__json = super(Observation, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR Observation string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class OperationDefinitionContactComponent(BackboneElement):
    '''
    FHIR OperationDefinitionContactComponent resource

     Contacts to assist a user in finding and communicating with the publisher.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'telecom':
                    list_to_add.append(ContactPoint(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR OperationDefinitionContactComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(OperationDefinitionContactComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR OperationDefinitionContactComponent constructor
        '''
        logging.info("FHIR OperationDefinitionContactComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.name = self.__add('name')
        if 'telecom' in self.__json:
            if isinstance(self.__json['telecom'], list):
                self.telecom = self.__add_list('telecom')
            else:
                self.telecom = ContactPoint(self.__add('telecom'))
        else:
            self.telecom = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.name:
            self.__json['name'] = self.name
        if self.telecom:
            self.__json['telecom'] = self.__get_list(self.telecom)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR OperationDefinitionContactComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class OperationDefinitionBindingComponent(BackboneElement):
    '''
    FHIR OperationDefinitionBindingComponent resource

     Binds to a value set if this parameter is coded (code, Coding, CodeableConcept).

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR OperationDefinitionBindingComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(OperationDefinitionBindingComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR OperationDefinitionBindingComponent constructor
        '''
        logging.info("FHIR OperationDefinitionBindingComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType


        return self.__json
        
    def __repr__(self):
        '''
        FHIR OperationDefinitionBindingComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class OperationDefinitionParameterComponent(BackboneElement):
    '''
    FHIR OperationDefinitionParameterComponent resource

     The parameters for the operation/query.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'part':
                    list_to_add.append(OperationDefinitionParameterComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR OperationDefinitionParameterComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(OperationDefinitionParameterComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR OperationDefinitionParameterComponent constructor
        '''
        logging.info("FHIR OperationDefinitionParameterComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.name = self.__add('name')
        self.use = self.__add('use')
        self.min = self.__add('min')
        self.max = self.__add('max')
        self.documentation = self.__add('documentation')
        self.type = self.__add('type')
        self.searchType = self.__add('searchType')
        self.profile = Reference(self.__add('profile'))
        self.binding = OperationDefinitionBindingComponent(self.__add('binding'))
        if 'part' in self.__json:
            if isinstance(self.__json['part'], list):
                self.part = self.__add_list('part')
            else:
                self.part = OperationDefinitionParameterComponent(self.__add('part'))
        else:
            self.part = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.name:
            self.__json['name'] = self.name
        if self.use:
            self.__json['use'] = self.use
        if self.min:
            self.__json['min'] = self.min
        if self.max:
            self.__json['max'] = self.max
        if self.documentation:
            self.__json['documentation'] = self.documentation
        if self.type:
            self.__json['type'] = self.type
        if self.searchType:
            self.__json['searchType'] = self.searchType
        if self.profile:
            self.__json['profile'] = self.profile.json
        if self.binding:
            self.__json['binding'] = self.binding.json
        if self.part:
            self.__json['part'] = self.__get_list(self.part)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR OperationDefinitionParameterComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class OperationDefinition(DomainResource):
    '''
    FHIR OperationDefinition resource

     A formal computable definition of an operation (on the RESTful interface) or a named query (using the search interaction). If the element is present, it must have either a @value, an @id, or extensions

    url ->  An absolute URL that is used to identify this operation definition when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this operation definition is (or will be) published.
    version ->  The identifier that is used to identify this version of the profile when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the profile author manually and the value should be a timestamp.
    name ->  A free text natural language name identifying the operation.
    status ->  The status of the profile. 
    kind ->  Whether this is an operation or a named query. 
    experimental ->  This profile was authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
    date ->  The date this version of the operation definition was published. The date must change when the business version changes, if it does, and it must change if the status code changes. In addition, it should change when the substantive content of the Operation Definition changes.
    publisher ->  The name of the individual or organization that published the operation definition.
    contact ->  Contacts to assist a user in finding and communicating with the publisher.
    description ->  A free text natural language description of the profile and its use.
    useContext ->  The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching of operation definitions.
    requirements ->  Explains why this operation definition is needed and why it's been constrained as it has.
    idempotent ->  Operations that are idempotent (see [HTTP specification definition of idempotent](http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html)) may be invoked by performing an HTTP GET operation instead of a POST.
    code ->  The name used to invoke the operation.
    comment ->  Additional information about how to use this operation or named query.
    base ->  Indicates that this operation definition is a constraining profile on the base.
    system ->  Indicates whether this operation or named query can be invoked at the system level (e.g. without needing to choose a resource type for the context).
    type ->  Indicates whether this operation or named query can be invoked at the resource type level for any given resource type level (e.g. without needing to choose a resource type for the context).
    instance ->  Indicates whether this operation can be invoked on a particular instance of one of the given types.
    parameter ->  The parameters for the operation/query.

    # Search parameters
        OperationDefinition.search.base
        OperationDefinition.search.code
        OperationDefinition.search.date
        OperationDefinition.search.instance
        OperationDefinition.search.kind
        OperationDefinition.search.name
        OperationDefinition.search.profile
        OperationDefinition.search.publisher
        OperationDefinition.search.status
        OperationDefinition.search.system
        OperationDefinition.search.type
        OperationDefinition.search.url
        OperationDefinition.search.version
    '''
    # search parameters
    par = [("base", "reference"),
           ("code", "token"),
           ("date", "date"),
           ("instance", "token"),
           ("kind", "token"),
           ("name", "string"),
           ("profile", "reference"),
           ("publisher", "string"),
           ("status", "token"),
           ("system", "token"),
           ("type", "token"),
           ("url", "uri"),
           ("version", "token")]

    search = Params(par, "OperationDefinition")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'contact':
                    list_to_add.append(OperationDefinitionContactComponent(obj))
                elif key == 'useContext':
                    list_to_add.append(CodeableConcept(obj))
                elif key == 'parameter':
                    list_to_add.append(OperationDefinitionParameterComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR OperationDefinition __new__
        '''
        if json == None:
            return None
        else:
            return super(OperationDefinition, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR OperationDefinition constructor
        '''
        logging.info("FHIR OperationDefinition: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "OperationDefinition"
        self.url = self.__add('url')
        self.version = self.__add('version')
        self.name = self.__add('name')
        self.status = self.__add('status')
        self.kind = self.__add('kind')
        self.experimental = Boolean(self.__add('experimental'))
        self.date = DateTime(self.__add('date'))
        self.publisher = self.__add('publisher')
        if 'contact' in self.__json:
            if isinstance(self.__json['contact'], list):
                self.contact = self.__add_list('contact')
            else:
                self.contact = OperationDefinitionContactComponent(self.__add('contact'))
        else:
            self.contact = None
        self.description = self.__add('description')
        if 'useContext' in self.__json:
            if isinstance(self.__json['useContext'], list):
                self.useContext = self.__add_list('useContext')
            else:
                self.useContext = CodeableConcept(self.__add('useContext'))
        else:
            self.useContext = None
        self.requirements = self.__add('requirements')
        self.idempotent = Boolean(self.__add('idempotent'))
        self.code = self.__add('code')
        self.comment = self.__add('comment')
        self.base = Reference(self.__add('base'))
        self.system = Boolean(self.__add('system'))
        if 'type' in self.__json:
            if isinstance(self.__json['type'], list):
                self.type = self.__add_list('type')
            else:
                self.type = self.__add('type')
        else:
            self.type = None
        self.instance = Boolean(self.__add('instance'))
        if 'parameter' in self.__json:
            if isinstance(self.__json['parameter'], list):
                self.parameter = self.__add_list('parameter')
            else:
                self.parameter = OperationDefinitionParameterComponent(self.__add('parameter'))
        else:
            self.parameter = None


        # Parent Resource Init
        super(OperationDefinition, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.url:
            self.__json['url'] = self.url
        if self.version:
            self.__json['version'] = self.version
        if self.name:
            self.__json['name'] = self.name
        if self.status:
            self.__json['status'] = self.status
        if self.kind:
            self.__json['kind'] = self.kind
        if self.experimental:
            self.__json['experimental'] = self.experimental.json
        if self.date:
            self.__json['date'] = self.date.json
        if self.publisher:
            self.__json['publisher'] = self.publisher
        if self.contact:
            self.__json['contact'] = self.__get_list(self.contact)
        if self.description:
            self.__json['description'] = self.description
        if self.useContext:
            self.__json['useContext'] = self.__get_list(self.useContext)
        if self.requirements:
            self.__json['requirements'] = self.requirements
        if self.idempotent:
            self.__json['idempotent'] = self.idempotent.json
        if self.code:
            self.__json['code'] = self.code
        if self.comment:
            self.__json['comment'] = self.comment
        if self.base:
            self.__json['base'] = self.base.json
        if self.system:
            self.__json['system'] = self.system.json
        if self.type:
            self.__json['type'] = self.__get_list(self.type)
        if self.instance:
            self.__json['instance'] = self.instance.json
        if self.parameter:
            self.__json['parameter'] = self.__get_list(self.parameter)

        # Add json attributes
        self.__json = super(OperationDefinition, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR OperationDefinition string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class OperationOutcomeIssueComponent(BackboneElement):
    '''
    FHIR OperationOutcomeIssueComponent resource

     An error, warning or information message that results from a system action.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR OperationOutcomeIssueComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(OperationOutcomeIssueComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR OperationOutcomeIssueComponent constructor
        '''
        logging.info("FHIR OperationOutcomeIssueComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.severity = self.__add('severity')
        self.code = self.__add('code')
        self.details = CodeableConcept(self.__add('details'))
        self.diagnostics = self.__add('diagnostics')
        if 'location' in self.__json:
            if isinstance(self.__json['location'], list):
                self.location = self.__add_list('location')
            else:
                self.location = self.__add('location')
        else:
            self.location = None
        if 'expression' in self.__json:
            if isinstance(self.__json['expression'], list):
                self.expression = self.__add_list('expression')
            else:
                self.expression = self.__add('expression')
        else:
            self.expression = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.severity:
            self.__json['severity'] = self.severity
        if self.code:
            self.__json['code'] = self.code
        if self.details:
            self.__json['details'] = self.details.json
        if self.diagnostics:
            self.__json['diagnostics'] = self.diagnostics
        if self.location:
            self.__json['location'] = self.__get_list(self.location)
        if self.expression:
            self.__json['expression'] = self.__get_list(self.expression)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR OperationOutcomeIssueComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class OperationOutcome(DomainResource):
    '''
    FHIR OperationOutcome resource

     A collection of error, warning or information messages that result from a system action. If the element is present, it must have either a @value, an @id, or extensions

    issue ->  An error, warning or information message that results from a system action.

    
    '''
    

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'issue':
                    list_to_add.append(OperationOutcomeIssueComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR OperationOutcome __new__
        '''
        if json == None:
            return None
        else:
            return super(OperationOutcome, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR OperationOutcome constructor
        '''
        logging.info("FHIR OperationOutcome: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "OperationOutcome"
        if 'issue' in self.__json:
            if isinstance(self.__json['issue'], list):
                self.issue = self.__add_list('issue')
            else:
                self.issue = OperationOutcomeIssueComponent(self.__add('issue'))
        else:
            self.issue = None


        # Parent Resource Init
        super(OperationOutcome, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.issue:
            self.__json['issue'] = self.__get_list(self.issue)

        # Add json attributes
        self.__json = super(OperationOutcome, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR OperationOutcome string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class OrderWhenComponent(BackboneElement):
    '''
    FHIR OrderWhenComponent resource

     When order should be fulfilled.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR OrderWhenComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(OrderWhenComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR OrderWhenComponent constructor
        '''
        logging.info("FHIR OrderWhenComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.code = CodeableConcept(self.__add('code'))
        self.schedule = Timing(self.__add('schedule'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.code:
            self.__json['code'] = self.code.json
        if self.schedule:
            self.__json['schedule'] = self.schedule.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR OrderWhenComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class Order(DomainResource):
    '''
    FHIR Order resource

     A request to perform an action. If the element is present, it must have either a @value, an @id, or extensions

    identifier ->  Identifiers assigned to this order by the orderer or by the receiver.
    date ->  When the order was made.
    subject ->  Patient this order is about.
    source ->  Who initiated the order.
    target ->  Who is intended to fulfill the order.
    when ->  When order should be fulfilled.
    detail ->  What action is being ordered.
    reasonCodeableConcept ->  Text - why the order was made.
    reasonReference ->  Text - why the order was made.

    # Search parameters
        Order.search.date
        Order.search.detail
        Order.search.identifier
        Order.search.patient
        Order.search.source
        Order.search.subject
        Order.search.target
        Order.search.when
        Order.search.when_code
    '''
    # search parameters
    par = [("date", "date"),
           ("detail", "reference"),
           ("identifier", "token"),
           ("patient", "reference"),
           ("source", "reference"),
           ("subject", "reference"),
           ("target", "reference"),
           ("when", "date"),
           ("when_code", "token")]

    search = Params(par, "Order")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'identifier':
                    list_to_add.append(Identifier(obj))
                elif key == 'detail':
                    list_to_add.append(Reference(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR Order __new__
        '''
        if json == None:
            return None
        else:
            return super(Order, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR Order constructor
        '''
        logging.info("FHIR Order: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "Order"
        if 'identifier' in self.__json:
            if isinstance(self.__json['identifier'], list):
                self.identifier = self.__add_list('identifier')
            else:
                self.identifier = Identifier(self.__add('identifier'))
        else:
            self.identifier = None
        self.date = DateTime(self.__add('date'))
        self.subject = Reference(self.__add('subject'))
        self.source = Reference(self.__add('source'))
        self.target = Reference(self.__add('target'))
        self.when = OrderWhenComponent(self.__add('when'))
        if 'detail' in self.__json:
            if isinstance(self.__json['detail'], list):
                self.detail = self.__add_list('detail')
            else:
                self.detail = Reference(self.__add('detail'))
        else:
            self.detail = None
        self.reasonCodeableConcept = CodeableConcept(self.__add('reasonCodeableConcept'))
        self.reasonReference = Reference(self.__add('reasonReference'))


        # Parent Resource Init
        super(Order, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identifier:
            self.__json['identifier'] = self.__get_list(self.identifier)
        if self.date:
            self.__json['date'] = self.date.json
        if self.subject:
            self.__json['subject'] = self.subject.json
        if self.source:
            self.__json['source'] = self.source.json
        if self.target:
            self.__json['target'] = self.target.json
        if self.when:
            self.__json['when'] = self.when.json
        if self.detail:
            self.__json['detail'] = self.__get_list(self.detail)
        if self.reasonCodeableConcept:
            self.__json['reasonCodeableConcept'] = self.reasonCodeableConcept.json
        if self.reasonReference:
            self.__json['reasonReference'] = self.reasonReference.json

        # Add json attributes
        self.__json = super(Order, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR Order string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class OrderResponse(DomainResource):
    '''
    FHIR OrderResponse resource

     A response to an order. If the element is present, it must have either a @value, an @id, or extensions

    identifier ->  Identifiers assigned to this order. The identifiers are usually assigned by the system responding to the order, but they may be provided or added to by other systems.
    request ->  A reference to the order that this is in response to.
    date ->  The date and time at which this order response was made (created/posted).
    who ->  The person, organization, or device credited with making the response.
    orderStatus ->  What this response says about the status of the original order. 
    description ->  Additional description about the response - e.g. a text description provided by a human user when making decisions about the order.
    fulfillment ->  Links to resources that provide details of the outcome of performing the order; e.g. Diagnostic Reports in a response that is made to an order that referenced a diagnostic order.

    # Search parameters
        OrderResponse.search.code
        OrderResponse.search.date
        OrderResponse.search.fulfillment
        OrderResponse.search.identifier
        OrderResponse.search.request
        OrderResponse.search.who
    '''
    # search parameters
    par = [("code", "token"),
           ("date", "date"),
           ("fulfillment", "reference"),
           ("identifier", "token"),
           ("request", "reference"),
           ("who", "reference")]

    search = Params(par, "OrderResponse")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'identifier':
                    list_to_add.append(Identifier(obj))
                elif key == 'fulfillment':
                    list_to_add.append(Reference(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR OrderResponse __new__
        '''
        if json == None:
            return None
        else:
            return super(OrderResponse, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR OrderResponse constructor
        '''
        logging.info("FHIR OrderResponse: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "OrderResponse"
        if 'identifier' in self.__json:
            if isinstance(self.__json['identifier'], list):
                self.identifier = self.__add_list('identifier')
            else:
                self.identifier = Identifier(self.__add('identifier'))
        else:
            self.identifier = None
        self.request = Reference(self.__add('request'))
        self.date = DateTime(self.__add('date'))
        self.who = Reference(self.__add('who'))
        self.orderStatus = self.__add('orderStatus')
        self.description = self.__add('description')
        if 'fulfillment' in self.__json:
            if isinstance(self.__json['fulfillment'], list):
                self.fulfillment = self.__add_list('fulfillment')
            else:
                self.fulfillment = Reference(self.__add('fulfillment'))
        else:
            self.fulfillment = None


        # Parent Resource Init
        super(OrderResponse, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identifier:
            self.__json['identifier'] = self.__get_list(self.identifier)
        if self.request:
            self.__json['request'] = self.request.json
        if self.date:
            self.__json['date'] = self.date.json
        if self.who:
            self.__json['who'] = self.who.json
        if self.orderStatus:
            self.__json['orderStatus'] = self.orderStatus
        if self.description:
            self.__json['description'] = self.description
        if self.fulfillment:
            self.__json['fulfillment'] = self.__get_list(self.fulfillment)

        # Add json attributes
        self.__json = super(OrderResponse, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR OrderResponse string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class OrderSet(DomainResource):
    '''
    FHIR OrderSet resource

     This resource allows for the definition of an order set as a sharable, consumable, and executable artifact in support of clinical decision support. If the element is present, it must have either a @value, an @id, or extensions

    moduleMetadata ->  A reference to a ModuleMetadata resource containing metadata for the orderset.
    library ->  A reference to a Library resource containing any formal logic used by the orderset.
    action ->  The definition of the actions that make up the order set. Order set groups and sections are represented as actions which contain sub-actions.

    
    '''
    

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'library':
                    list_to_add.append(Reference(obj))
                elif key == 'action':
                    list_to_add.append(ActionDefinition(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR OrderSet __new__
        '''
        if json == None:
            return None
        else:
            return super(OrderSet, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR OrderSet constructor
        '''
        logging.info("FHIR OrderSet: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "OrderSet"
        self.moduleMetadata = ModuleMetadata(self.__add('moduleMetadata'))
        if 'library' in self.__json:
            if isinstance(self.__json['library'], list):
                self.library = self.__add_list('library')
            else:
                self.library = Reference(self.__add('library'))
        else:
            self.library = None
        if 'action' in self.__json:
            if isinstance(self.__json['action'], list):
                self.action = self.__add_list('action')
            else:
                self.action = ActionDefinition(self.__add('action'))
        else:
            self.action = None


        # Parent Resource Init
        super(OrderSet, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.moduleMetadata:
            self.__json['moduleMetadata'] = self.moduleMetadata.json
        if self.library:
            self.__json['library'] = self.__get_list(self.library)
        if self.action:
            self.__json['action'] = self.__get_list(self.action)

        # Add json attributes
        self.__json = super(OrderSet, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR OrderSet string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class OrganizationContactComponent(BackboneElement):
    '''
    FHIR OrganizationContactComponent resource

     Contact for the organization for a certain purpose.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'telecom':
                    list_to_add.append(ContactPoint(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR OrganizationContactComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(OrganizationContactComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR OrganizationContactComponent constructor
        '''
        logging.info("FHIR OrganizationContactComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.purpose = CodeableConcept(self.__add('purpose'))
        self.name = HumanName(self.__add('name'))
        if 'telecom' in self.__json:
            if isinstance(self.__json['telecom'], list):
                self.telecom = self.__add_list('telecom')
            else:
                self.telecom = ContactPoint(self.__add('telecom'))
        else:
            self.telecom = None
        self.address = Address(self.__add('address'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.purpose:
            self.__json['purpose'] = self.purpose.json
        if self.name:
            self.__json['name'] = self.name.json
        if self.telecom:
            self.__json['telecom'] = self.__get_list(self.telecom)
        if self.address:
            self.__json['address'] = self.address.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR OrganizationContactComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class Organization(DomainResource):
    '''
    FHIR Organization resource

     A formally or informally recognized grouping of people or organizations formed for the purpose of achieving some form of collective action.  Includes companies, institutions, corporations, departments, community groups, healthcare practice groups, etc. If the element is present, it must have either a @value, an @id, or extensions

    identifier ->  Identifier for the organization that is used to identify the organization across multiple disparate systems.
    active ->  Whether the organization's record is still in active use.
    type ->  The kind of organization that this is.
    name ->  A name associated with the organization.
    telecom ->  A contact detail for the organization.
    address ->  An address for the organization.
    partOf ->  The organization of which this organization forms a part.
    contact ->  Contact for the organization for a certain purpose.

    # Search parameters
        Organization.search.active
        Organization.search.address
        Organization.search.address-city
        Organization.search.address-country
        Organization.search.address-postalcode
        Organization.search.address-state
        Organization.search.address-use
        Organization.search.identifier
        Organization.search.name
        Organization.search.partof
        Organization.search.phonetic
        Organization.search.type
    '''
    # search parameters
    par = [("active", "token"),
           ("address", "string"),
           ("address-city", "string"),
           ("address-country", "string"),
           ("address-postalcode", "string"),
           ("address-state", "string"),
           ("address-use", "token"),
           ("identifier", "token"),
           ("name", "string"),
           ("partof", "reference"),
           ("phonetic", "string"),
           ("type", "token")]

    search = Params(par, "Organization")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'identifier':
                    list_to_add.append(Identifier(obj))
                elif key == 'telecom':
                    list_to_add.append(ContactPoint(obj))
                elif key == 'address':
                    list_to_add.append(Address(obj))
                elif key == 'contact':
                    list_to_add.append(OrganizationContactComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR Organization __new__
        '''
        if json == None:
            return None
        else:
            return super(Organization, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR Organization constructor
        '''
        logging.info("FHIR Organization: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "Organization"
        if 'identifier' in self.__json:
            if isinstance(self.__json['identifier'], list):
                self.identifier = self.__add_list('identifier')
            else:
                self.identifier = Identifier(self.__add('identifier'))
        else:
            self.identifier = None
        self.active = Boolean(self.__add('active'))
        self.type = CodeableConcept(self.__add('type'))
        self.name = self.__add('name')
        if 'telecom' in self.__json:
            if isinstance(self.__json['telecom'], list):
                self.telecom = self.__add_list('telecom')
            else:
                self.telecom = ContactPoint(self.__add('telecom'))
        else:
            self.telecom = None
        if 'address' in self.__json:
            if isinstance(self.__json['address'], list):
                self.address = self.__add_list('address')
            else:
                self.address = Address(self.__add('address'))
        else:
            self.address = None
        self.partOf = Reference(self.__add('partOf'))
        if 'contact' in self.__json:
            if isinstance(self.__json['contact'], list):
                self.contact = self.__add_list('contact')
            else:
                self.contact = OrganizationContactComponent(self.__add('contact'))
        else:
            self.contact = None


        # Parent Resource Init
        super(Organization, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identifier:
            self.__json['identifier'] = self.__get_list(self.identifier)
        if self.active:
            self.__json['active'] = self.active.json
        if self.type:
            self.__json['type'] = self.type.json
        if self.name:
            self.__json['name'] = self.name
        if self.telecom:
            self.__json['telecom'] = self.__get_list(self.telecom)
        if self.address:
            self.__json['address'] = self.__get_list(self.address)
        if self.partOf:
            self.__json['partOf'] = self.partOf.json
        if self.contact:
            self.__json['contact'] = self.__get_list(self.contact)

        # Add json attributes
        self.__json = super(Organization, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR Organization string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ParametersParameterComponent(BackboneElement):
    '''
    FHIR ParametersParameterComponent resource

     A parameter passed to or received from the operation.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'part':
                    list_to_add.append(ParametersParameterComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ParametersParameterComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ParametersParameterComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ParametersParameterComponent constructor
        '''
        logging.info("FHIR ParametersParameterComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.name = self.__add('name')
        self.resource = self.__add('resource')
        if 'part' in self.__json:
            if isinstance(self.__json['part'], list):
                self.part = self.__add_list('part')
            else:
                self.part = ParametersParameterComponent(self.__add('part'))
        else:
            self.part = None
        self.valueBoolean = Boolean(self.__add('valueBoolean'))
        self.valueInteger = self.__add('valueInteger')
        self.valueDecimal = self.__add('valueDecimal')
        self.valueBase64Binary = self.__add('valueBase64Binary')
        self.valueInstant = self.__add('valueInstant')
        self.valueString = self.__add('valueString')
        self.valueUri = self.__add('valueUri')
        self.valueDate = Date(self.__add('valueDate'))
        self.valueDateTime = DateTime(self.__add('valueDateTime'))
        self.valueTime = Time(self.__add('valueTime'))
        self.valueCode = self.__add('valueCode')
        self.valueOid = self.__add('valueOid')
        self.valueUuid = self.__add('valueUuid')
        self.valueId = self.__add('valueId')
        self.valueUnsignedInt = self.__add('valueUnsignedInt')
        self.valuePositiveInt = self.__add('valuePositiveInt')
        self.valueMarkdown = self.__add('valueMarkdown')
        self.valueAnnotation = Annotation(self.__add('valueAnnotation'))
        self.valueAttachment = Attachment(self.__add('valueAttachment'))
        self.valueIdentifier = Identifier(self.__add('valueIdentifier'))
        self.valueCodeableConcept = CodeableConcept(self.__add('valueCodeableConcept'))
        self.valueCoding = Coding(self.__add('valueCoding'))
        self.valueQuantity = Quantity(self.__add('valueQuantity'))
        self.valueRange = Range(self.__add('valueRange'))
        self.valuePeriod = Period(self.__add('valuePeriod'))
        self.valueRatio = Ratio(self.__add('valueRatio'))
        self.valueReference = Reference(self.__add('valueReference'))
        self.valueSampledData = SampledData(self.__add('valueSampledData'))
        self.valueSignature = Signature(self.__add('valueSignature'))
        self.valueHumanName = HumanName(self.__add('valueHumanName'))
        self.valueAddress = Address(self.__add('valueAddress'))
        self.valueContactPoint = ContactPoint(self.__add('valueContactPoint'))
        self.valueTiming = Timing(self.__add('valueTiming'))
        self.valueMeta = Meta(self.__add('valueMeta'))
        self.valueElementDefinition = ElementDefinition(self.__add('valueElementDefinition'))
        self.valueModuleMetadata = ModuleMetadata(self.__add('valueModuleMetadata'))
        self.valueDataRequirement = DataRequirement(self.__add('valueDataRequirement'))
        self.valueActionDefinition = ActionDefinition(self.__add('valueActionDefinition'))
        self.valueParameterDefinition = ParameterDefinition(self.__add('valueParameterDefinition'))
        self.valueTriggerDefinition = TriggerDefinition(self.__add('valueTriggerDefinition'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.name:
            self.__json['name'] = self.name
        if self.resource:
            self.__json['resource'] = self.resource
        if self.part:
            self.__json['part'] = self.__get_list(self.part)
        if self.valueBoolean:
            self.__json['valueBoolean'] = self.valueBoolean.json
        if self.valueInteger:
            self.__json['valueInteger'] = self.valueInteger
        if self.valueDecimal:
            self.__json['valueDecimal'] = self.valueDecimal
        if self.valueBase64Binary:
            self.__json['valueBase64Binary'] = self.valueBase64Binary
        if self.valueInstant:
            self.__json['valueInstant'] = self.valueInstant
        if self.valueString:
            self.__json['valueString'] = self.valueString
        if self.valueUri:
            self.__json['valueUri'] = self.valueUri
        if self.valueDate:
            self.__json['valueDate'] = self.valueDate.json
        if self.valueDateTime:
            self.__json['valueDateTime'] = self.valueDateTime.json
        if self.valueTime:
            self.__json['valueTime'] = self.valueTime.json
        if self.valueCode:
            self.__json['valueCode'] = self.valueCode
        if self.valueOid:
            self.__json['valueOid'] = self.valueOid
        if self.valueUuid:
            self.__json['valueUuid'] = self.valueUuid
        if self.valueId:
            self.__json['valueId'] = self.valueId
        if self.valueUnsignedInt:
            self.__json['valueUnsignedInt'] = self.valueUnsignedInt
        if self.valuePositiveInt:
            self.__json['valuePositiveInt'] = self.valuePositiveInt
        if self.valueMarkdown:
            self.__json['valueMarkdown'] = self.valueMarkdown
        if self.valueAnnotation:
            self.__json['valueAnnotation'] = self.valueAnnotation.json
        if self.valueAttachment:
            self.__json['valueAttachment'] = self.valueAttachment.json
        if self.valueIdentifier:
            self.__json['valueIdentifier'] = self.valueIdentifier.json
        if self.valueCodeableConcept:
            self.__json['valueCodeableConcept'] = self.valueCodeableConcept.json
        if self.valueCoding:
            self.__json['valueCoding'] = self.valueCoding.json
        if self.valueQuantity:
            self.__json['valueQuantity'] = self.valueQuantity.json
        if self.valueRange:
            self.__json['valueRange'] = self.valueRange.json
        if self.valuePeriod:
            self.__json['valuePeriod'] = self.valuePeriod.json
        if self.valueRatio:
            self.__json['valueRatio'] = self.valueRatio.json
        if self.valueReference:
            self.__json['valueReference'] = self.valueReference.json
        if self.valueSampledData:
            self.__json['valueSampledData'] = self.valueSampledData.json
        if self.valueSignature:
            self.__json['valueSignature'] = self.valueSignature.json
        if self.valueHumanName:
            self.__json['valueHumanName'] = self.valueHumanName.json
        if self.valueAddress:
            self.__json['valueAddress'] = self.valueAddress.json
        if self.valueContactPoint:
            self.__json['valueContactPoint'] = self.valueContactPoint.json
        if self.valueTiming:
            self.__json['valueTiming'] = self.valueTiming.json
        if self.valueMeta:
            self.__json['valueMeta'] = self.valueMeta.json
        if self.valueElementDefinition:
            self.__json['valueElementDefinition'] = self.valueElementDefinition.json
        if self.valueModuleMetadata:
            self.__json['valueModuleMetadata'] = self.valueModuleMetadata.json
        if self.valueDataRequirement:
            self.__json['valueDataRequirement'] = self.valueDataRequirement.json
        if self.valueActionDefinition:
            self.__json['valueActionDefinition'] = self.valueActionDefinition.json
        if self.valueParameterDefinition:
            self.__json['valueParameterDefinition'] = self.valueParameterDefinition.json
        if self.valueTriggerDefinition:
            self.__json['valueTriggerDefinition'] = self.valueTriggerDefinition.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ParametersParameterComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class Parameters(Resource):
    '''
    FHIR Parameters resource

     This special resource type is used to represent an operation request and response (operations.html). It has no other use, and there is no RESTful endpoint associated with it. If the element is present, it must have either a @value, an @id, or extensions

    parameter ->  A parameter passed to or received from the operation.

    
    '''
    

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'parameter':
                    list_to_add.append(ParametersParameterComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR Parameters __new__
        '''
        if json == None:
            return None
        else:
            return super(Parameters, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR Parameters constructor
        '''
        logging.info("FHIR Parameters: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        if 'parameter' in self.__json:
            if isinstance(self.__json['parameter'], list):
                self.parameter = self.__add_list('parameter')
            else:
                self.parameter = ParametersParameterComponent(self.__add('parameter'))
        else:
            self.parameter = None


        # Parent Resource Init
        super(Parameters, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.parameter:
            self.__json['parameter'] = self.__get_list(self.parameter)

        # Add json attributes
        self.__json = super(Parameters, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR Parameters string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class PatientContactComponent(BackboneElement):
    '''
    FHIR PatientContactComponent resource

     A contact party (e.g. guardian, partner, friend) for the patient.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'relationship':
                    list_to_add.append(CodeableConcept(obj))
                elif key == 'telecom':
                    list_to_add.append(ContactPoint(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR PatientContactComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(PatientContactComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR PatientContactComponent constructor
        '''
        logging.info("FHIR PatientContactComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        if 'relationship' in self.__json:
            if isinstance(self.__json['relationship'], list):
                self.relationship = self.__add_list('relationship')
            else:
                self.relationship = CodeableConcept(self.__add('relationship'))
        else:
            self.relationship = None
        self.name = HumanName(self.__add('name'))
        if 'telecom' in self.__json:
            if isinstance(self.__json['telecom'], list):
                self.telecom = self.__add_list('telecom')
            else:
                self.telecom = ContactPoint(self.__add('telecom'))
        else:
            self.telecom = None
        self.address = Address(self.__add('address'))
        self.gender = self.__add('gender')
        self.organization = Reference(self.__add('organization'))
        self.period = Period(self.__add('period'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.relationship:
            self.__json['relationship'] = self.__get_list(self.relationship)
        if self.name:
            self.__json['name'] = self.name.json
        if self.telecom:
            self.__json['telecom'] = self.__get_list(self.telecom)
        if self.address:
            self.__json['address'] = self.address.json
        if self.gender:
            self.__json['gender'] = self.gender
        if self.organization:
            self.__json['organization'] = self.organization.json
        if self.period:
            self.__json['period'] = self.period.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR PatientContactComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class PatientAnimalComponent(BackboneElement):
    '''
    FHIR PatientAnimalComponent resource

     This patient is known to be an animal.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR PatientAnimalComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(PatientAnimalComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR PatientAnimalComponent constructor
        '''
        logging.info("FHIR PatientAnimalComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.species = CodeableConcept(self.__add('species'))
        self.breed = CodeableConcept(self.__add('breed'))
        self.genderStatus = CodeableConcept(self.__add('genderStatus'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.species:
            self.__json['species'] = self.species.json
        if self.breed:
            self.__json['breed'] = self.breed.json
        if self.genderStatus:
            self.__json['genderStatus'] = self.genderStatus.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR PatientAnimalComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class PatientCommunicationComponent(BackboneElement):
    '''
    FHIR PatientCommunicationComponent resource

     Languages which may be used to communicate with the patient about his or her health.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR PatientCommunicationComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(PatientCommunicationComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR PatientCommunicationComponent constructor
        '''
        logging.info("FHIR PatientCommunicationComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.language = CodeableConcept(self.__add('language'))
        self.preferred = Boolean(self.__add('preferred'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.language:
            self.__json['language'] = self.language.json
        if self.preferred:
            self.__json['preferred'] = self.preferred.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR PatientCommunicationComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class PatientLinkComponent(BackboneElement):
    '''
    FHIR PatientLinkComponent resource

     Link to another patient resource that concerns the same actual patient.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR PatientLinkComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(PatientLinkComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR PatientLinkComponent constructor
        '''
        logging.info("FHIR PatientLinkComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.other = Reference(self.__add('other'))
        self.type = self.__add('type')



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.other:
            self.__json['other'] = self.other.json
        if self.type:
            self.__json['type'] = self.type


        return self.__json
        
    def __repr__(self):
        '''
        FHIR PatientLinkComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class Patient(DomainResource):
    '''
    FHIR Patient resource

     Demographics and other administrative information about an individual or animal receiving care or other health-related services. If the element is present, it must have either a @value, an @id, or extensions

    identifier ->  An identifier for this patient.
    active ->  Whether this patient record is in active use.
    name ->  A name associated with the individual.
    telecom ->  A contact detail (e.g. a telephone number or an email address) by which the individual may be contacted.
    gender ->  Administrative Gender - the gender that the patient is considered to have for administration and record keeping purposes. 
    birthDate ->  The date of birth for the individual.
    address ->  Addresses for the individual.
    maritalStatus ->  This field contains a patient's most recent marital (civil) status.
    photo ->  Image of the patient.
    contact ->  A contact party (e.g. guardian, partner, friend) for the patient.
    animal ->  This patient is known to be an animal.
    communication ->  Languages which may be used to communicate with the patient about his or her health.
    careProvider ->  Patient's nominated care provider.
    managingOrganization ->  Organization that is the custodian of the patient record.
    link ->  Link to another patient resource that concerns the same actual patient.
    deceasedBoolean ->  Indicates if the individual is deceased or not.
    deceasedDateTime ->  Indicates if the individual is deceased or not.
    multipleBirthBoolean ->  Indicates whether the patient is part of a multiple (bool) or indicates the actual birth order (integer).
    multipleBirthInteger ->  Indicates whether the patient is part of a multiple (bool) or indicates the actual birth order (integer).

    # Search parameters
        Patient.search.active
        Patient.search.address
        Patient.search.address-city
        Patient.search.address-country
        Patient.search.address-postalcode
        Patient.search.address-state
        Patient.search.address-use
        Patient.search.animal-breed
        Patient.search.animal-species
        Patient.search.birthdate
        Patient.search.careprovider
        Patient.search.deathdate
        Patient.search.deceased
        Patient.search.email
        Patient.search.family
        Patient.search.gender
        Patient.search.given
        Patient.search.identifier
        Patient.search.language
        Patient.search.link
        Patient.search.name
        Patient.search.organization
        Patient.search.phone
        Patient.search.phonetic
        Patient.search.telecom
    '''
    # search parameters
    par = [("active", "token"),
           ("address", "string"),
           ("address-city", "string"),
           ("address-country", "string"),
           ("address-postalcode", "string"),
           ("address-state", "string"),
           ("address-use", "token"),
           ("animal-breed", "token"),
           ("animal-species", "token"),
           ("birthdate", "date"),
           ("careprovider", "reference"),
           ("deathdate", "date"),
           ("deceased", "token"),
           ("email", "token"),
           ("family", "string"),
           ("gender", "token"),
           ("given", "string"),
           ("identifier", "token"),
           ("language", "token"),
           ("link", "reference"),
           ("name", "string"),
           ("organization", "reference"),
           ("phone", "token"),
           ("phonetic", "string"),
           ("telecom", "token")]

    search = Params(par, "Patient")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'identifier':
                    list_to_add.append(Identifier(obj))
                elif key == 'name':
                    list_to_add.append(HumanName(obj))
                elif key == 'telecom':
                    list_to_add.append(ContactPoint(obj))
                elif key == 'address':
                    list_to_add.append(Address(obj))
                elif key == 'photo':
                    list_to_add.append(Attachment(obj))
                elif key == 'contact':
                    list_to_add.append(PatientContactComponent(obj))
                elif key == 'communication':
                    list_to_add.append(PatientCommunicationComponent(obj))
                elif key == 'careProvider':
                    list_to_add.append(Reference(obj))
                elif key == 'link':
                    list_to_add.append(PatientLinkComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR Patient __new__
        '''
        if json == None:
            return None
        else:
            return super(Patient, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR Patient constructor
        '''
        logging.info("FHIR Patient: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "Patient"
        if 'identifier' in self.__json:
            if isinstance(self.__json['identifier'], list):
                self.identifier = self.__add_list('identifier')
            else:
                self.identifier = Identifier(self.__add('identifier'))
        else:
            self.identifier = None
        self.active = Boolean(self.__add('active'))
        if 'name' in self.__json:
            if isinstance(self.__json['name'], list):
                self.name = self.__add_list('name')
            else:
                self.name = HumanName(self.__add('name'))
        else:
            self.name = None
        if 'telecom' in self.__json:
            if isinstance(self.__json['telecom'], list):
                self.telecom = self.__add_list('telecom')
            else:
                self.telecom = ContactPoint(self.__add('telecom'))
        else:
            self.telecom = None
        self.gender = self.__add('gender')
        self.birthDate = Date(self.__add('birthDate'))
        if 'address' in self.__json:
            if isinstance(self.__json['address'], list):
                self.address = self.__add_list('address')
            else:
                self.address = Address(self.__add('address'))
        else:
            self.address = None
        self.maritalStatus = CodeableConcept(self.__add('maritalStatus'))
        if 'photo' in self.__json:
            if isinstance(self.__json['photo'], list):
                self.photo = self.__add_list('photo')
            else:
                self.photo = Attachment(self.__add('photo'))
        else:
            self.photo = None
        if 'contact' in self.__json:
            if isinstance(self.__json['contact'], list):
                self.contact = self.__add_list('contact')
            else:
                self.contact = PatientContactComponent(self.__add('contact'))
        else:
            self.contact = None
        self.animal = PatientAnimalComponent(self.__add('animal'))
        if 'communication' in self.__json:
            if isinstance(self.__json['communication'], list):
                self.communication = self.__add_list('communication')
            else:
                self.communication = PatientCommunicationComponent(self.__add('communication'))
        else:
            self.communication = None
        if 'careProvider' in self.__json:
            if isinstance(self.__json['careProvider'], list):
                self.careProvider = self.__add_list('careProvider')
            else:
                self.careProvider = Reference(self.__add('careProvider'))
        else:
            self.careProvider = None
        self.managingOrganization = Reference(self.__add('managingOrganization'))
        if 'link' in self.__json:
            if isinstance(self.__json['link'], list):
                self.link = self.__add_list('link')
            else:
                self.link = PatientLinkComponent(self.__add('link'))
        else:
            self.link = None
        self.deceasedBoolean = Boolean(self.__add('deceasedBoolean'))
        self.deceasedDateTime = DateTime(self.__add('deceasedDateTime'))
        self.multipleBirthBoolean = Boolean(self.__add('multipleBirthBoolean'))
        self.multipleBirthInteger = self.__add('multipleBirthInteger')


        # Parent Resource Init
        super(Patient, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identifier:
            self.__json['identifier'] = self.__get_list(self.identifier)
        if self.active:
            self.__json['active'] = self.active.json
        if self.name:
            self.__json['name'] = self.__get_list(self.name)
        if self.telecom:
            self.__json['telecom'] = self.__get_list(self.telecom)
        if self.gender:
            self.__json['gender'] = self.gender
        if self.birthDate:
            self.__json['birthDate'] = self.birthDate.json
        if self.address:
            self.__json['address'] = self.__get_list(self.address)
        if self.maritalStatus:
            self.__json['maritalStatus'] = self.maritalStatus.json
        if self.photo:
            self.__json['photo'] = self.__get_list(self.photo)
        if self.contact:
            self.__json['contact'] = self.__get_list(self.contact)
        if self.animal:
            self.__json['animal'] = self.animal.json
        if self.communication:
            self.__json['communication'] = self.__get_list(self.communication)
        if self.careProvider:
            self.__json['careProvider'] = self.__get_list(self.careProvider)
        if self.managingOrganization:
            self.__json['managingOrganization'] = self.managingOrganization.json
        if self.link:
            self.__json['link'] = self.__get_list(self.link)
        if self.deceasedBoolean:
            self.__json['deceasedBoolean'] = self.deceasedBoolean.json
        if self.deceasedDateTime:
            self.__json['deceasedDateTime'] = self.deceasedDateTime.json
        if self.multipleBirthBoolean:
            self.__json['multipleBirthBoolean'] = self.multipleBirthBoolean.json
        if self.multipleBirthInteger:
            self.__json['multipleBirthInteger'] = self.multipleBirthInteger

        # Add json attributes
        self.__json = super(Patient, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR Patient string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class PaymentNotice(DomainResource):
    '''
    FHIR PaymentNotice resource

     This resource provides the status of the payment for goods and services rendered, and the request and response resource references. If the element is present, it must have either a @value, an @id, or extensions

    identifier ->  The Response business identifier.
    ruleset ->  The version of the style of resource contents. This should be mapped to the allowable profiles for this and supporting resources.
    originalRuleset ->  The style (standard) and version of the original material which was converted into this resource.
    created ->  The date when this resource was created.
    paymentStatus ->  The payment status, typically paid: payment sent, cleared: payment received.
    statusDate ->  The date when the above payment action occurrred.
    targetIdentifier ->  The Insurer who is target  of the request.
    targetReference ->  The Insurer who is target  of the request.
    providerIdentifier ->  The practitioner who is responsible for the services rendered to the patient.
    providerReference ->  The practitioner who is responsible for the services rendered to the patient.
    organizationIdentifier ->  The organization which is responsible for the services rendered to the patient.
    organizationReference ->  The organization which is responsible for the services rendered to the patient.
    requestIdentifier ->  Reference of resource to reverse.
    requestReference ->  Reference of resource to reverse.
    responseIdentifier ->  Reference of response to resource to reverse.
    responseReference ->  Reference of response to resource to reverse.

    # Search parameters
        PaymentNotice.search.identifier
    '''
    # search parameters
    par = [("identifier", "token")]

    search = Params(par, "PaymentNotice")


    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'identifier':
                    list_to_add.append(Identifier(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR PaymentNotice __new__
        '''
        if json == None:
            return None
        else:
            return super(PaymentNotice, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR PaymentNotice constructor
        '''
        logging.info("FHIR PaymentNotice: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "PaymentNotice"
        if 'identifier' in self.__json:
            if isinstance(self.__json['identifier'], list):
                self.identifier = self.__add_list('identifier')
            else:
                self.identifier = Identifier(self.__add('identifier'))
        else:
            self.identifier = None
        self.ruleset = Coding(self.__add('ruleset'))
        self.originalRuleset = Coding(self.__add('originalRuleset'))
        self.created = DateTime(self.__add('created'))
        self.paymentStatus = Coding(self.__add('paymentStatus'))
        self.statusDate = Date(self.__add('statusDate'))
        self.targetIdentifier = Identifier(self.__add('targetIdentifier'))
        self.targetReference = Reference(self.__add('targetReference'))
        self.providerIdentifier = Identifier(self.__add('providerIdentifier'))
        self.providerReference = Reference(self.__add('providerReference'))
        self.organizationIdentifier = Identifier(self.__add('organizationIdentifier'))
        self.organizationReference = Reference(self.__add('organizationReference'))
        self.requestIdentifier = Identifier(self.__add('requestIdentifier'))
        self.requestReference = Reference(self.__add('requestReference'))
        self.responseIdentifier = Identifier(self.__add('responseIdentifier'))
        self.responseReference = Reference(self.__add('responseReference'))


        # Parent Resource Init
        super(PaymentNotice, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identifier:
            self.__json['identifier'] = self.__get_list(self.identifier)
        if self.ruleset:
            self.__json['ruleset'] = self.ruleset.json
        if self.originalRuleset:
            self.__json['originalRuleset'] = self.originalRuleset.json
        if self.created:
            self.__json['created'] = self.created.json
        if self.paymentStatus:
            self.__json['paymentStatus'] = self.paymentStatus.json
        if self.statusDate:
            self.__json['statusDate'] = self.statusDate.json
        if self.targetIdentifier:
            self.__json['targetIdentifier'] = self.targetIdentifier.json
        if self.targetReference:
            self.__json['targetReference'] = self.targetReference.json
        if self.providerIdentifier:
            self.__json['providerIdentifier'] = self.providerIdentifier.json
        if self.providerReference:
            self.__json['providerReference'] = self.providerReference.json
        if self.organizationIdentifier:
            self.__json['organizationIdentifier'] = self.organizationIdentifier.json
        if self.organizationReference:
            self.__json['organizationReference'] = self.organizationReference.json
        if self.requestIdentifier:
            self.__json['requestIdentifier'] = self.requestIdentifier.json
        if self.requestReference:
            self.__json['requestReference'] = self.requestReference.json
        if self.responseIdentifier:
            self.__json['responseIdentifier'] = self.responseIdentifier.json
        if self.responseReference:
            self.__json['responseReference'] = self.responseReference.json

        # Add json attributes
        self.__json = super(PaymentNotice, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR PaymentNotice string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class PaymentReconciliationDetailComponent(BackboneElement):
    '''
    FHIR PaymentReconciliationDetailComponent resource

     List of individual settlement amounts and the corresponding transaction.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR PaymentReconciliationDetailComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(PaymentReconciliationDetailComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR PaymentReconciliationDetailComponent constructor
        '''
        logging.info("FHIR PaymentReconciliationDetailComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.type = Coding(self.__add('type'))
        self.date = Date(self.__add('date'))
        self.amount = Money(self.__add('amount'))
        self.requestIdentifier = Identifier(self.__add('requestIdentifier'))
        self.requestReference = Reference(self.__add('requestReference'))
        self.responceIdentifier = Identifier(self.__add('responceIdentifier'))
        self.responceReference = Reference(self.__add('responceReference'))
        self.submitterIdentifier = Identifier(self.__add('submitterIdentifier'))
        self.submitterReference = Reference(self.__add('submitterReference'))
        self.payeeIdentifier = Identifier(self.__add('payeeIdentifier'))
        self.payeeReference = Reference(self.__add('payeeReference'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.type:
            self.__json['type'] = self.type.json
        if self.date:
            self.__json['date'] = self.date.json
        if self.amount:
            self.__json['amount'] = self.amount.json
        if self.requestIdentifier:
            self.__json['requestIdentifier'] = self.requestIdentifier.json
        if self.requestReference:
            self.__json['requestReference'] = self.requestReference.json
        if self.responceIdentifier:
            self.__json['responceIdentifier'] = self.responceIdentifier.json
        if self.responceReference:
            self.__json['responceReference'] = self.responceReference.json
        if self.submitterIdentifier:
            self.__json['submitterIdentifier'] = self.submitterIdentifier.json
        if self.submitterReference:
            self.__json['submitterReference'] = self.submitterReference.json
        if self.payeeIdentifier:
            self.__json['payeeIdentifier'] = self.payeeIdentifier.json
        if self.payeeReference:
            self.__json['payeeReference'] = self.payeeReference.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR PaymentReconciliationDetailComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class PaymentReconciliationNoteComponent(BackboneElement):
    '''
    FHIR PaymentReconciliationNoteComponent resource

     Suite of notes.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR PaymentReconciliationNoteComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(PaymentReconciliationNoteComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR PaymentReconciliationNoteComponent constructor
        '''
        logging.info("FHIR PaymentReconciliationNoteComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.type = Coding(self.__add('type'))
        self.text = self.__add('text')



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.type:
            self.__json['type'] = self.type.json
        if self.text:
            self.__json['text'] = self.text


        return self.__json
        
    def __repr__(self):
        '''
        FHIR PaymentReconciliationNoteComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class PaymentReconciliation(DomainResource):
    '''
    FHIR PaymentReconciliation resource

     This resource provides payment details and claim references supporting a bulk payment. If the element is present, it must have either a @value, an @id, or extensions

    identifier ->  The Response business identifier.
    outcome ->  Transaction status: error, complete. 
    disposition ->  A description of the status of the adjudication.
    ruleset ->  The version of the style of resource contents. This should be mapped to the allowable profiles for this and supporting resources.
    originalRuleset ->  The style (standard) and version of the original material which was converted into this resource.
    created ->  The date when the enclosed suite of services were performed or completed.
    period ->  The period of time for which payments have been gathered into this bulk payment for settlement.
    detail ->  List of individual settlement amounts and the corresponding transaction.
    form ->  The form to be used for printing the content.
    total ->  Total payment amount.
    note ->  Suite of notes.
    requestIdentifier ->  Original request resource reference.
    requestReference ->  Original request resource reference.
    organizationIdentifier ->  The Insurer who produced this adjudicated response.
    organizationReference ->  The Insurer who produced this adjudicated response.
    requestProviderIdentifier ->  The practitioner who is responsible for the services rendered to the patient.
    requestProviderReference ->  The practitioner who is responsible for the services rendered to the patient.
    requestOrganizationIdentifier ->  The organization which is responsible for the services rendered to the patient.
    requestOrganizationReference ->  The organization which is responsible for the services rendered to the patient.

    # Search parameters
        PaymentReconciliation.search.identifier
    '''
    # search parameters
    par = [("identifier", "token")]

    search = Params(par, "PaymentReconciliation")


    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'identifier':
                    list_to_add.append(Identifier(obj))
                elif key == 'detail':
                    list_to_add.append(PaymentReconciliationDetailComponent(obj))
                elif key == 'note':
                    list_to_add.append(PaymentReconciliationNoteComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR PaymentReconciliation __new__
        '''
        if json == None:
            return None
        else:
            return super(PaymentReconciliation, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR PaymentReconciliation constructor
        '''
        logging.info("FHIR PaymentReconciliation: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "PaymentReconciliation"
        if 'identifier' in self.__json:
            if isinstance(self.__json['identifier'], list):
                self.identifier = self.__add_list('identifier')
            else:
                self.identifier = Identifier(self.__add('identifier'))
        else:
            self.identifier = None
        self.outcome = self.__add('outcome')
        self.disposition = self.__add('disposition')
        self.ruleset = Coding(self.__add('ruleset'))
        self.originalRuleset = Coding(self.__add('originalRuleset'))
        self.created = DateTime(self.__add('created'))
        self.period = Period(self.__add('period'))
        if 'detail' in self.__json:
            if isinstance(self.__json['detail'], list):
                self.detail = self.__add_list('detail')
            else:
                self.detail = PaymentReconciliationDetailComponent(self.__add('detail'))
        else:
            self.detail = None
        self.form = Coding(self.__add('form'))
        self.total = Money(self.__add('total'))
        if 'note' in self.__json:
            if isinstance(self.__json['note'], list):
                self.note = self.__add_list('note')
            else:
                self.note = PaymentReconciliationNoteComponent(self.__add('note'))
        else:
            self.note = None
        self.requestIdentifier = Identifier(self.__add('requestIdentifier'))
        self.requestReference = Reference(self.__add('requestReference'))
        self.organizationIdentifier = Identifier(self.__add('organizationIdentifier'))
        self.organizationReference = Reference(self.__add('organizationReference'))
        self.requestProviderIdentifier = Identifier(self.__add('requestProviderIdentifier'))
        self.requestProviderReference = Reference(self.__add('requestProviderReference'))
        self.requestOrganizationIdentifier = Identifier(self.__add('requestOrganizationIdentifier'))
        self.requestOrganizationReference = Reference(self.__add('requestOrganizationReference'))


        # Parent Resource Init
        super(PaymentReconciliation, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identifier:
            self.__json['identifier'] = self.__get_list(self.identifier)
        if self.outcome:
            self.__json['outcome'] = self.outcome
        if self.disposition:
            self.__json['disposition'] = self.disposition
        if self.ruleset:
            self.__json['ruleset'] = self.ruleset.json
        if self.originalRuleset:
            self.__json['originalRuleset'] = self.originalRuleset.json
        if self.created:
            self.__json['created'] = self.created.json
        if self.period:
            self.__json['period'] = self.period.json
        if self.detail:
            self.__json['detail'] = self.__get_list(self.detail)
        if self.form:
            self.__json['form'] = self.form.json
        if self.total:
            self.__json['total'] = self.total.json
        if self.note:
            self.__json['note'] = self.__get_list(self.note)
        if self.requestIdentifier:
            self.__json['requestIdentifier'] = self.requestIdentifier.json
        if self.requestReference:
            self.__json['requestReference'] = self.requestReference.json
        if self.organizationIdentifier:
            self.__json['organizationIdentifier'] = self.organizationIdentifier.json
        if self.organizationReference:
            self.__json['organizationReference'] = self.organizationReference.json
        if self.requestProviderIdentifier:
            self.__json['requestProviderIdentifier'] = self.requestProviderIdentifier.json
        if self.requestProviderReference:
            self.__json['requestProviderReference'] = self.requestProviderReference.json
        if self.requestOrganizationIdentifier:
            self.__json['requestOrganizationIdentifier'] = self.requestOrganizationIdentifier.json
        if self.requestOrganizationReference:
            self.__json['requestOrganizationReference'] = self.requestOrganizationReference.json

        # Add json attributes
        self.__json = super(PaymentReconciliation, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR PaymentReconciliation string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class PersonLinkComponent(BackboneElement):
    '''
    FHIR PersonLinkComponent resource

     Link to a resource that concerns the same actual person.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR PersonLinkComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(PersonLinkComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR PersonLinkComponent constructor
        '''
        logging.info("FHIR PersonLinkComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.target = Reference(self.__add('target'))
        self.assurance = self.__add('assurance')



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.target:
            self.__json['target'] = self.target.json
        if self.assurance:
            self.__json['assurance'] = self.assurance


        return self.__json
        
    def __repr__(self):
        '''
        FHIR PersonLinkComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class Person(DomainResource):
    '''
    FHIR Person resource

     Demographics and administrative information about a person independent of a specific health-related context. If the element is present, it must have either a @value, an @id, or extensions

    identifier ->  Identifier for a person within a particular scope.
    name ->  A name associated with the person.
    telecom ->  A contact detail for the person, e.g. a telephone number or an email address.
    gender ->  Administrative Gender. 
    birthDate ->  The birth date for the person.
    address ->  One or more addresses for the person.
    photo ->  An image that can be displayed as a thumbnail of the person to enhance the identification of the individual.
    managingOrganization ->  The organization that is the custodian of the person record.
    active ->  Whether this person's record is in active use.
    link ->  Link to a resource that concerns the same actual person.

    # Search parameters
        Person.search.address
        Person.search.address-city
        Person.search.address-country
        Person.search.address-postalcode
        Person.search.address-state
        Person.search.address-use
        Person.search.birthdate
        Person.search.email
        Person.search.gender
        Person.search.identifier
        Person.search.link
        Person.search.name
        Person.search.organization
        Person.search.patient
        Person.search.phone
        Person.search.phonetic
        Person.search.practitioner
        Person.search.relatedperson
        Person.search.telecom
    '''
    # search parameters
    par = [("address", "string"),
           ("address-city", "string"),
           ("address-country", "string"),
           ("address-postalcode", "string"),
           ("address-state", "string"),
           ("address-use", "token"),
           ("birthdate", "date"),
           ("email", "token"),
           ("gender", "token"),
           ("identifier", "token"),
           ("link", "reference"),
           ("name", "string"),
           ("organization", "reference"),
           ("patient", "reference"),
           ("phone", "token"),
           ("phonetic", "string"),
           ("practitioner", "reference"),
           ("relatedperson", "reference"),
           ("telecom", "token")]

    search = Params(par, "Person")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'identifier':
                    list_to_add.append(Identifier(obj))
                elif key == 'name':
                    list_to_add.append(HumanName(obj))
                elif key == 'telecom':
                    list_to_add.append(ContactPoint(obj))
                elif key == 'address':
                    list_to_add.append(Address(obj))
                elif key == 'link':
                    list_to_add.append(PersonLinkComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR Person __new__
        '''
        if json == None:
            return None
        else:
            return super(Person, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR Person constructor
        '''
        logging.info("FHIR Person: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "Person"
        if 'identifier' in self.__json:
            if isinstance(self.__json['identifier'], list):
                self.identifier = self.__add_list('identifier')
            else:
                self.identifier = Identifier(self.__add('identifier'))
        else:
            self.identifier = None
        if 'name' in self.__json:
            if isinstance(self.__json['name'], list):
                self.name = self.__add_list('name')
            else:
                self.name = HumanName(self.__add('name'))
        else:
            self.name = None
        if 'telecom' in self.__json:
            if isinstance(self.__json['telecom'], list):
                self.telecom = self.__add_list('telecom')
            else:
                self.telecom = ContactPoint(self.__add('telecom'))
        else:
            self.telecom = None
        self.gender = self.__add('gender')
        self.birthDate = Date(self.__add('birthDate'))
        if 'address' in self.__json:
            if isinstance(self.__json['address'], list):
                self.address = self.__add_list('address')
            else:
                self.address = Address(self.__add('address'))
        else:
            self.address = None
        self.photo = Attachment(self.__add('photo'))
        self.managingOrganization = Reference(self.__add('managingOrganization'))
        self.active = Boolean(self.__add('active'))
        if 'link' in self.__json:
            if isinstance(self.__json['link'], list):
                self.link = self.__add_list('link')
            else:
                self.link = PersonLinkComponent(self.__add('link'))
        else:
            self.link = None


        # Parent Resource Init
        super(Person, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identifier:
            self.__json['identifier'] = self.__get_list(self.identifier)
        if self.name:
            self.__json['name'] = self.__get_list(self.name)
        if self.telecom:
            self.__json['telecom'] = self.__get_list(self.telecom)
        if self.gender:
            self.__json['gender'] = self.gender
        if self.birthDate:
            self.__json['birthDate'] = self.birthDate.json
        if self.address:
            self.__json['address'] = self.__get_list(self.address)
        if self.photo:
            self.__json['photo'] = self.photo.json
        if self.managingOrganization:
            self.__json['managingOrganization'] = self.managingOrganization.json
        if self.active:
            self.__json['active'] = self.active.json
        if self.link:
            self.__json['link'] = self.__get_list(self.link)

        # Add json attributes
        self.__json = super(Person, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR Person string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class PractitionerPractitionerRoleComponent(BackboneElement):
    '''
    FHIR PractitionerPractitionerRoleComponent resource

     The list of roles/organizations that the practitioner is associated with.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'specialty':
                    list_to_add.append(CodeableConcept(obj))
                elif key == 'identifier':
                    list_to_add.append(Identifier(obj))
                elif key == 'telecom':
                    list_to_add.append(ContactPoint(obj))
                elif key == 'location':
                    list_to_add.append(Reference(obj))
                elif key == 'healthcareService':
                    list_to_add.append(Reference(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR PractitionerPractitionerRoleComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(PractitionerPractitionerRoleComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR PractitionerPractitionerRoleComponent constructor
        '''
        logging.info("FHIR PractitionerPractitionerRoleComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.organization = Reference(self.__add('organization'))
        self.role = CodeableConcept(self.__add('role'))
        if 'specialty' in self.__json:
            if isinstance(self.__json['specialty'], list):
                self.specialty = self.__add_list('specialty')
            else:
                self.specialty = CodeableConcept(self.__add('specialty'))
        else:
            self.specialty = None
        if 'identifier' in self.__json:
            if isinstance(self.__json['identifier'], list):
                self.identifier = self.__add_list('identifier')
            else:
                self.identifier = Identifier(self.__add('identifier'))
        else:
            self.identifier = None
        if 'telecom' in self.__json:
            if isinstance(self.__json['telecom'], list):
                self.telecom = self.__add_list('telecom')
            else:
                self.telecom = ContactPoint(self.__add('telecom'))
        else:
            self.telecom = None
        self.period = Period(self.__add('period'))
        if 'location' in self.__json:
            if isinstance(self.__json['location'], list):
                self.location = self.__add_list('location')
            else:
                self.location = Reference(self.__add('location'))
        else:
            self.location = None
        if 'healthcareService' in self.__json:
            if isinstance(self.__json['healthcareService'], list):
                self.healthcareService = self.__add_list('healthcareService')
            else:
                self.healthcareService = Reference(self.__add('healthcareService'))
        else:
            self.healthcareService = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.organization:
            self.__json['organization'] = self.organization.json
        if self.role:
            self.__json['role'] = self.role.json
        if self.specialty:
            self.__json['specialty'] = self.__get_list(self.specialty)
        if self.identifier:
            self.__json['identifier'] = self.__get_list(self.identifier)
        if self.telecom:
            self.__json['telecom'] = self.__get_list(self.telecom)
        if self.period:
            self.__json['period'] = self.period.json
        if self.location:
            self.__json['location'] = self.__get_list(self.location)
        if self.healthcareService:
            self.__json['healthcareService'] = self.__get_list(self.healthcareService)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR PractitionerPractitionerRoleComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class PractitionerQualificationComponent(BackboneElement):
    '''
    FHIR PractitionerQualificationComponent resource

     Qualifications obtained by training and certification.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'identifier':
                    list_to_add.append(Identifier(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR PractitionerQualificationComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(PractitionerQualificationComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR PractitionerQualificationComponent constructor
        '''
        logging.info("FHIR PractitionerQualificationComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        if 'identifier' in self.__json:
            if isinstance(self.__json['identifier'], list):
                self.identifier = self.__add_list('identifier')
            else:
                self.identifier = Identifier(self.__add('identifier'))
        else:
            self.identifier = None
        self.code = CodeableConcept(self.__add('code'))
        self.period = Period(self.__add('period'))
        self.issuer = Reference(self.__add('issuer'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identifier:
            self.__json['identifier'] = self.__get_list(self.identifier)
        if self.code:
            self.__json['code'] = self.code.json
        if self.period:
            self.__json['period'] = self.period.json
        if self.issuer:
            self.__json['issuer'] = self.issuer.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR PractitionerQualificationComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class Practitioner(DomainResource):
    '''
    FHIR Practitioner resource

     A person who is directly or indirectly involved in the provisioning of healthcare. If the element is present, it must have either a @value, an @id, or extensions

    identifier ->  An identifier that applies to this person in this role.
    active ->  Whether this practitioner's record is in active use.
    name ->  The name(s) associated with the practitioner.
    telecom ->  A contact detail for the practitioner, e.g. a telephone number or an email address.
    address ->  Address(es) of the practitioner that are not role specific (typically home address). 
Work addresses are not typically entered in this property as they are usually role dependent.
    gender ->  Administrative Gender - the gender that the person is considered to have for administration and record keeping purposes. 
    birthDate ->  The date of birth for the practitioner.
    photo ->  Image of the person.
    practitionerRole ->  The list of roles/organizations that the practitioner is associated with.
    qualification ->  Qualifications obtained by training and certification.
    communication ->  A language the practitioner is able to use in patient communication.

    # Search parameters
        Practitioner.search.address
        Practitioner.search.address-city
        Practitioner.search.address-country
        Practitioner.search.address-postalcode
        Practitioner.search.address-state
        Practitioner.search.address-use
        Practitioner.search.communication
        Practitioner.search.email
        Practitioner.search.family
        Practitioner.search.gender
        Practitioner.search.given
        Practitioner.search.identifier
        Practitioner.search.location
        Practitioner.search.name
        Practitioner.search.organization
        Practitioner.search.phone
        Practitioner.search.phonetic
        Practitioner.search.role
        Practitioner.search.specialty
        Practitioner.search.telecom
    '''
    # search parameters
    par = [("address", "string"),
           ("address-city", "string"),
           ("address-country", "string"),
           ("address-postalcode", "string"),
           ("address-state", "string"),
           ("address-use", "token"),
           ("communication", "token"),
           ("email", "token"),
           ("family", "string"),
           ("gender", "token"),
           ("given", "string"),
           ("identifier", "token"),
           ("location", "reference"),
           ("name", "string"),
           ("organization", "reference"),
           ("phone", "token"),
           ("phonetic", "string"),
           ("role", "token"),
           ("specialty", "token"),
           ("telecom", "token")]

    search = Params(par, "Practitioner")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'identifier':
                    list_to_add.append(Identifier(obj))
                elif key == 'name':
                    list_to_add.append(HumanName(obj))
                elif key == 'telecom':
                    list_to_add.append(ContactPoint(obj))
                elif key == 'address':
                    list_to_add.append(Address(obj))
                elif key == 'photo':
                    list_to_add.append(Attachment(obj))
                elif key == 'practitionerRole':
                    list_to_add.append(PractitionerPractitionerRoleComponent(obj))
                elif key == 'qualification':
                    list_to_add.append(PractitionerQualificationComponent(obj))
                elif key == 'communication':
                    list_to_add.append(CodeableConcept(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR Practitioner __new__
        '''
        if json == None:
            return None
        else:
            return super(Practitioner, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR Practitioner constructor
        '''
        logging.info("FHIR Practitioner: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "Practitioner"
        if 'identifier' in self.__json:
            if isinstance(self.__json['identifier'], list):
                self.identifier = self.__add_list('identifier')
            else:
                self.identifier = Identifier(self.__add('identifier'))
        else:
            self.identifier = None
        self.active = Boolean(self.__add('active'))
        if 'name' in self.__json:
            if isinstance(self.__json['name'], list):
                self.name = self.__add_list('name')
            else:
                self.name = HumanName(self.__add('name'))
        else:
            self.name = None
        if 'telecom' in self.__json:
            if isinstance(self.__json['telecom'], list):
                self.telecom = self.__add_list('telecom')
            else:
                self.telecom = ContactPoint(self.__add('telecom'))
        else:
            self.telecom = None
        if 'address' in self.__json:
            if isinstance(self.__json['address'], list):
                self.address = self.__add_list('address')
            else:
                self.address = Address(self.__add('address'))
        else:
            self.address = None
        self.gender = self.__add('gender')
        self.birthDate = Date(self.__add('birthDate'))
        if 'photo' in self.__json:
            if isinstance(self.__json['photo'], list):
                self.photo = self.__add_list('photo')
            else:
                self.photo = Attachment(self.__add('photo'))
        else:
            self.photo = None
        if 'practitionerRole' in self.__json:
            if isinstance(self.__json['practitionerRole'], list):
                self.practitionerRole = self.__add_list('practitionerRole')
            else:
                self.practitionerRole = PractitionerPractitionerRoleComponent(self.__add('practitionerRole'))
        else:
            self.practitionerRole = None
        if 'qualification' in self.__json:
            if isinstance(self.__json['qualification'], list):
                self.qualification = self.__add_list('qualification')
            else:
                self.qualification = PractitionerQualificationComponent(self.__add('qualification'))
        else:
            self.qualification = None
        if 'communication' in self.__json:
            if isinstance(self.__json['communication'], list):
                self.communication = self.__add_list('communication')
            else:
                self.communication = CodeableConcept(self.__add('communication'))
        else:
            self.communication = None


        # Parent Resource Init
        super(Practitioner, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identifier:
            self.__json['identifier'] = self.__get_list(self.identifier)
        if self.active:
            self.__json['active'] = self.active.json
        if self.name:
            self.__json['name'] = self.__get_list(self.name)
        if self.telecom:
            self.__json['telecom'] = self.__get_list(self.telecom)
        if self.address:
            self.__json['address'] = self.__get_list(self.address)
        if self.gender:
            self.__json['gender'] = self.gender
        if self.birthDate:
            self.__json['birthDate'] = self.birthDate.json
        if self.photo:
            self.__json['photo'] = self.__get_list(self.photo)
        if self.practitionerRole:
            self.__json['practitionerRole'] = self.__get_list(self.practitionerRole)
        if self.qualification:
            self.__json['qualification'] = self.__get_list(self.qualification)
        if self.communication:
            self.__json['communication'] = self.__get_list(self.communication)

        # Add json attributes
        self.__json = super(Practitioner, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR Practitioner string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class PractitionerRoleAvailableTimeComponent(BackboneElement):
    '''
    FHIR PractitionerRoleAvailableTimeComponent resource

     A collection of times that the Service Site is available.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR PractitionerRoleAvailableTimeComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(PractitionerRoleAvailableTimeComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR PractitionerRoleAvailableTimeComponent constructor
        '''
        logging.info("FHIR PractitionerRoleAvailableTimeComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        if 'daysOfWeek' in self.__json:
            if isinstance(self.__json['daysOfWeek'], list):
                self.daysOfWeek = self.__add_list('daysOfWeek')
            else:
                self.daysOfWeek = self.__add('daysOfWeek')
        else:
            self.daysOfWeek = None
        self.allDay = Boolean(self.__add('allDay'))
        self.availableStartTime = Time(self.__add('availableStartTime'))
        self.availableEndTime = Time(self.__add('availableEndTime'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.daysOfWeek:
            self.__json['daysOfWeek'] = self.__get_list(self.daysOfWeek)
        if self.allDay:
            self.__json['allDay'] = self.allDay.json
        if self.availableStartTime:
            self.__json['availableStartTime'] = self.availableStartTime.json
        if self.availableEndTime:
            self.__json['availableEndTime'] = self.availableEndTime.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR PractitionerRoleAvailableTimeComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class PractitionerRoleNotAvailableComponent(BackboneElement):
    '''
    FHIR PractitionerRoleNotAvailableComponent resource

     The HealthcareService is not available during this period of time due to the provided reason.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR PractitionerRoleNotAvailableComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(PractitionerRoleNotAvailableComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR PractitionerRoleNotAvailableComponent constructor
        '''
        logging.info("FHIR PractitionerRoleNotAvailableComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.description = self.__add('description')
        self.during = Period(self.__add('during'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.description:
            self.__json['description'] = self.description
        if self.during:
            self.__json['during'] = self.during.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR PractitionerRoleNotAvailableComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class PractitionerRole(DomainResource):
    '''
    FHIR PractitionerRole resource

     A specific set of Roles/Locations/specialties/services that a practitioner may perform at an organization for a period of time. If the element is present, it must have either a @value, an @id, or extensions

    identifier ->  Business Identifiers that are specific to a role/location.
    active ->  Whether this practitioner's record is in active use.
    practitioner ->  Practitioner that is able to provide the defined services for the organation.
    organization ->  The organization where the Practitioner performs the roles associated.
    role ->  Roles which this practitioner is authorized to perform for the organization.
    specialty ->  Specific specialty of the practitioner.
    location ->  The location(s) at which this practitioner provides care.
    healthcareService ->  The list of healthcare services that this worker provides for this role's Organization/Location(s).
    telecom ->  Contact details that are specific to the role/location/service.
    period ->  The period during which the person is authorized to act as a practitioner in these role(s) for the organization.
    availableTime ->  A collection of times that the Service Site is available.
    notAvailable ->  The HealthcareService is not available during this period of time due to the provided reason.
    availabilityExceptions ->  A description of site availability exceptions, e.g. public holiday availability. Succinctly describing all possible exceptions to normal site availability as details in the available Times and not available Times.

    
    '''
    

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'identifier':
                    list_to_add.append(Identifier(obj))
                elif key == 'role':
                    list_to_add.append(CodeableConcept(obj))
                elif key == 'specialty':
                    list_to_add.append(CodeableConcept(obj))
                elif key == 'location':
                    list_to_add.append(Reference(obj))
                elif key == 'healthcareService':
                    list_to_add.append(Reference(obj))
                elif key == 'telecom':
                    list_to_add.append(ContactPoint(obj))
                elif key == 'availableTime':
                    list_to_add.append(PractitionerRoleAvailableTimeComponent(obj))
                elif key == 'notAvailable':
                    list_to_add.append(PractitionerRoleNotAvailableComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR PractitionerRole __new__
        '''
        if json == None:
            return None
        else:
            return super(PractitionerRole, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR PractitionerRole constructor
        '''
        logging.info("FHIR PractitionerRole: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "PractitionerRole"
        if 'identifier' in self.__json:
            if isinstance(self.__json['identifier'], list):
                self.identifier = self.__add_list('identifier')
            else:
                self.identifier = Identifier(self.__add('identifier'))
        else:
            self.identifier = None
        self.active = Boolean(self.__add('active'))
        self.practitioner = Reference(self.__add('practitioner'))
        self.organization = Reference(self.__add('organization'))
        if 'role' in self.__json:
            if isinstance(self.__json['role'], list):
                self.role = self.__add_list('role')
            else:
                self.role = CodeableConcept(self.__add('role'))
        else:
            self.role = None
        if 'specialty' in self.__json:
            if isinstance(self.__json['specialty'], list):
                self.specialty = self.__add_list('specialty')
            else:
                self.specialty = CodeableConcept(self.__add('specialty'))
        else:
            self.specialty = None
        if 'location' in self.__json:
            if isinstance(self.__json['location'], list):
                self.location = self.__add_list('location')
            else:
                self.location = Reference(self.__add('location'))
        else:
            self.location = None
        if 'healthcareService' in self.__json:
            if isinstance(self.__json['healthcareService'], list):
                self.healthcareService = self.__add_list('healthcareService')
            else:
                self.healthcareService = Reference(self.__add('healthcareService'))
        else:
            self.healthcareService = None
        if 'telecom' in self.__json:
            if isinstance(self.__json['telecom'], list):
                self.telecom = self.__add_list('telecom')
            else:
                self.telecom = ContactPoint(self.__add('telecom'))
        else:
            self.telecom = None
        self.period = Period(self.__add('period'))
        if 'availableTime' in self.__json:
            if isinstance(self.__json['availableTime'], list):
                self.availableTime = self.__add_list('availableTime')
            else:
                self.availableTime = PractitionerRoleAvailableTimeComponent(self.__add('availableTime'))
        else:
            self.availableTime = None
        if 'notAvailable' in self.__json:
            if isinstance(self.__json['notAvailable'], list):
                self.notAvailable = self.__add_list('notAvailable')
            else:
                self.notAvailable = PractitionerRoleNotAvailableComponent(self.__add('notAvailable'))
        else:
            self.notAvailable = None
        self.availabilityExceptions = self.__add('availabilityExceptions')


        # Parent Resource Init
        super(PractitionerRole, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identifier:
            self.__json['identifier'] = self.__get_list(self.identifier)
        if self.active:
            self.__json['active'] = self.active.json
        if self.practitioner:
            self.__json['practitioner'] = self.practitioner.json
        if self.organization:
            self.__json['organization'] = self.organization.json
        if self.role:
            self.__json['role'] = self.__get_list(self.role)
        if self.specialty:
            self.__json['specialty'] = self.__get_list(self.specialty)
        if self.location:
            self.__json['location'] = self.__get_list(self.location)
        if self.healthcareService:
            self.__json['healthcareService'] = self.__get_list(self.healthcareService)
        if self.telecom:
            self.__json['telecom'] = self.__get_list(self.telecom)
        if self.period:
            self.__json['period'] = self.period.json
        if self.availableTime:
            self.__json['availableTime'] = self.__get_list(self.availableTime)
        if self.notAvailable:
            self.__json['notAvailable'] = self.__get_list(self.notAvailable)
        if self.availabilityExceptions:
            self.__json['availabilityExceptions'] = self.availabilityExceptions

        # Add json attributes
        self.__json = super(PractitionerRole, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR PractitionerRole string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ProcedurePerformerComponent(BackboneElement):
    '''
    FHIR ProcedurePerformerComponent resource

     Limited to 'real' people rather than equipment.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ProcedurePerformerComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ProcedurePerformerComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ProcedurePerformerComponent constructor
        '''
        logging.info("FHIR ProcedurePerformerComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.actor = Reference(self.__add('actor'))
        self.role = CodeableConcept(self.__add('role'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.actor:
            self.__json['actor'] = self.actor.json
        if self.role:
            self.__json['role'] = self.role.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ProcedurePerformerComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ProcedureFocalDeviceComponent(BackboneElement):
    '''
    FHIR ProcedureFocalDeviceComponent resource

     A device that is implanted, removed or otherwise manipulated (calibration, battery replacement, fitting a prosthesis, attaching a wound-vac, etc.) as a focal portion of the Procedure.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ProcedureFocalDeviceComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ProcedureFocalDeviceComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ProcedureFocalDeviceComponent constructor
        '''
        logging.info("FHIR ProcedureFocalDeviceComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.action = CodeableConcept(self.__add('action'))
        self.manipulated = Reference(self.__add('manipulated'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.action:
            self.__json['action'] = self.action.json
        if self.manipulated:
            self.__json['manipulated'] = self.manipulated.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ProcedureFocalDeviceComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class Procedure(DomainResource):
    '''
    FHIR Procedure resource

     An action that is or was performed on a patient. This can be a physical intervention like an operation, or less invasive like counseling or hypnotherapy. If the element is present, it must have either a @value, an @id, or extensions

    identifier ->  This records identifiers associated with this procedure that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).
    subject ->  The person, animal or group on which the procedure was performed.
    status ->  A code specifying the state of the procedure. Generally this will be in-progress or completed state. 
    category ->  A code that classifies the procedure for searching, sorting and display purposes (e.g. "Surgical Procedure").
    code ->  The specific procedure that is performed. Use text if the exact nature of the procedure cannot be coded (e.g. "Laparoscopic Appendectomy").
    notPerformed ->  Set this to true if the record is saying that the procedure was NOT performed.
    reasonNotPerformed ->  A code indicating why the procedure was not performed.
    bodySite ->  Detailed and structured anatomical location information. Multiple locations are allowed - e.g. multiple punch biopsies of a lesion.
    performer ->  Limited to 'real' people rather than equipment.
    encounter ->  The encounter during which the procedure was performed.
    location ->  The location where the procedure actually happened.  E.g. a newborn at home, a tracheostomy at a restaurant.
    outcome ->  The outcome of the procedure - did it resolve reasons for the procedure being performed?
    report ->  This could be a histology result, pathology report, surgical report, etc..
    complication ->  Any complications that occurred during the procedure, or in the immediate post-performance period. These are generally tracked separately from the notes, which will typically describe the procedure itself rather than any 'post procedure' issues.
    followUp ->  If the procedure required specific follow up - e.g. removal of sutures. The followup may be represented as a simple note, or could potentially be more complex in which case the CarePlan resource can be used.
    request ->  A reference to a resource that contains details of the request for this procedure.
    notes ->  Any other notes about the procedure.  E.g. the operative notes.
    focalDevice ->  A device that is implanted, removed or otherwise manipulated (calibration, battery replacement, fitting a prosthesis, attaching a wound-vac, etc.) as a focal portion of the Procedure.
    used ->  Identifies medications, devices and any other substance used as part of the procedure.
    reasonCodeableConcept ->  The reason why the procedure was performed. This may be due to a Condition, may be coded entity of some type, or may simply be present as text.
    reasonReference ->  The reason why the procedure was performed. This may be due to a Condition, may be coded entity of some type, or may simply be present as text.
    performedDateTime ->  The date(time)/period over which the procedure was performed. Allows a period to support complex procedures that span more than one date, and also allows for the length of the procedure to be captured.
    performedPeriod ->  The date(time)/period over which the procedure was performed. Allows a period to support complex procedures that span more than one date, and also allows for the length of the procedure to be captured.

    # Search parameters
        Procedure.search.code
        Procedure.search.date
        Procedure.search.encounter
        Procedure.search.identifier
        Procedure.search.location
        Procedure.search.patient
        Procedure.search.performer
        Procedure.search.subject
    '''
    # search parameters
    par = [("code", "token"),
           ("date", "date"),
           ("encounter", "reference"),
           ("identifier", "token"),
           ("location", "reference"),
           ("patient", "reference"),
           ("performer", "reference"),
           ("subject", "reference")]

    search = Params(par, "Procedure")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'identifier':
                    list_to_add.append(Identifier(obj))
                elif key == 'reasonNotPerformed':
                    list_to_add.append(CodeableConcept(obj))
                elif key == 'bodySite':
                    list_to_add.append(CodeableConcept(obj))
                elif key == 'performer':
                    list_to_add.append(ProcedurePerformerComponent(obj))
                elif key == 'report':
                    list_to_add.append(Reference(obj))
                elif key == 'complication':
                    list_to_add.append(CodeableConcept(obj))
                elif key == 'followUp':
                    list_to_add.append(CodeableConcept(obj))
                elif key == 'notes':
                    list_to_add.append(Annotation(obj))
                elif key == 'focalDevice':
                    list_to_add.append(ProcedureFocalDeviceComponent(obj))
                elif key == 'used':
                    list_to_add.append(Reference(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR Procedure __new__
        '''
        if json == None:
            return None
        else:
            return super(Procedure, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR Procedure constructor
        '''
        logging.info("FHIR Procedure: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "Procedure"
        if 'identifier' in self.__json:
            if isinstance(self.__json['identifier'], list):
                self.identifier = self.__add_list('identifier')
            else:
                self.identifier = Identifier(self.__add('identifier'))
        else:
            self.identifier = None
        self.subject = Reference(self.__add('subject'))
        self.status = self.__add('status')
        self.category = CodeableConcept(self.__add('category'))
        self.code = CodeableConcept(self.__add('code'))
        self.notPerformed = Boolean(self.__add('notPerformed'))
        if 'reasonNotPerformed' in self.__json:
            if isinstance(self.__json['reasonNotPerformed'], list):
                self.reasonNotPerformed = self.__add_list('reasonNotPerformed')
            else:
                self.reasonNotPerformed = CodeableConcept(self.__add('reasonNotPerformed'))
        else:
            self.reasonNotPerformed = None
        if 'bodySite' in self.__json:
            if isinstance(self.__json['bodySite'], list):
                self.bodySite = self.__add_list('bodySite')
            else:
                self.bodySite = CodeableConcept(self.__add('bodySite'))
        else:
            self.bodySite = None
        if 'performer' in self.__json:
            if isinstance(self.__json['performer'], list):
                self.performer = self.__add_list('performer')
            else:
                self.performer = ProcedurePerformerComponent(self.__add('performer'))
        else:
            self.performer = None
        self.encounter = Reference(self.__add('encounter'))
        self.location = Reference(self.__add('location'))
        self.outcome = CodeableConcept(self.__add('outcome'))
        if 'report' in self.__json:
            if isinstance(self.__json['report'], list):
                self.report = self.__add_list('report')
            else:
                self.report = Reference(self.__add('report'))
        else:
            self.report = None
        if 'complication' in self.__json:
            if isinstance(self.__json['complication'], list):
                self.complication = self.__add_list('complication')
            else:
                self.complication = CodeableConcept(self.__add('complication'))
        else:
            self.complication = None
        if 'followUp' in self.__json:
            if isinstance(self.__json['followUp'], list):
                self.followUp = self.__add_list('followUp')
            else:
                self.followUp = CodeableConcept(self.__add('followUp'))
        else:
            self.followUp = None
        self.request = Reference(self.__add('request'))
        if 'notes' in self.__json:
            if isinstance(self.__json['notes'], list):
                self.notes = self.__add_list('notes')
            else:
                self.notes = Annotation(self.__add('notes'))
        else:
            self.notes = None
        if 'focalDevice' in self.__json:
            if isinstance(self.__json['focalDevice'], list):
                self.focalDevice = self.__add_list('focalDevice')
            else:
                self.focalDevice = ProcedureFocalDeviceComponent(self.__add('focalDevice'))
        else:
            self.focalDevice = None
        if 'used' in self.__json:
            if isinstance(self.__json['used'], list):
                self.used = self.__add_list('used')
            else:
                self.used = Reference(self.__add('used'))
        else:
            self.used = None
        self.reasonCodeableConcept = CodeableConcept(self.__add('reasonCodeableConcept'))
        self.reasonReference = Reference(self.__add('reasonReference'))
        self.performedDateTime = DateTime(self.__add('performedDateTime'))
        self.performedPeriod = Period(self.__add('performedPeriod'))


        # Parent Resource Init
        super(Procedure, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identifier:
            self.__json['identifier'] = self.__get_list(self.identifier)
        if self.subject:
            self.__json['subject'] = self.subject.json
        if self.status:
            self.__json['status'] = self.status
        if self.category:
            self.__json['category'] = self.category.json
        if self.code:
            self.__json['code'] = self.code.json
        if self.notPerformed:
            self.__json['notPerformed'] = self.notPerformed.json
        if self.reasonNotPerformed:
            self.__json['reasonNotPerformed'] = self.__get_list(self.reasonNotPerformed)
        if self.bodySite:
            self.__json['bodySite'] = self.__get_list(self.bodySite)
        if self.performer:
            self.__json['performer'] = self.__get_list(self.performer)
        if self.encounter:
            self.__json['encounter'] = self.encounter.json
        if self.location:
            self.__json['location'] = self.location.json
        if self.outcome:
            self.__json['outcome'] = self.outcome.json
        if self.report:
            self.__json['report'] = self.__get_list(self.report)
        if self.complication:
            self.__json['complication'] = self.__get_list(self.complication)
        if self.followUp:
            self.__json['followUp'] = self.__get_list(self.followUp)
        if self.request:
            self.__json['request'] = self.request.json
        if self.notes:
            self.__json['notes'] = self.__get_list(self.notes)
        if self.focalDevice:
            self.__json['focalDevice'] = self.__get_list(self.focalDevice)
        if self.used:
            self.__json['used'] = self.__get_list(self.used)
        if self.reasonCodeableConcept:
            self.__json['reasonCodeableConcept'] = self.reasonCodeableConcept.json
        if self.reasonReference:
            self.__json['reasonReference'] = self.reasonReference.json
        if self.performedDateTime:
            self.__json['performedDateTime'] = self.performedDateTime.json
        if self.performedPeriod:
            self.__json['performedPeriod'] = self.performedPeriod.json

        # Add json attributes
        self.__json = super(Procedure, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR Procedure string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ProcedureRequest(DomainResource):
    '''
    FHIR ProcedureRequest resource

     A request for a procedure to be performed. May be a proposal or an order. If the element is present, it must have either a @value, an @id, or extensions

    identifier ->  Identifiers assigned to this order by the order or by the receiver.
    subject ->  The person, animal or group that should receive the procedure.
    code ->  The specific procedure that is ordered. Use text if the exact nature of the procedure cannot be coded.
    bodySite ->  Indicates the sites on the subject's body where the procedure should be performed (I.e. the target sites).
    encounter ->  The encounter within which the procedure proposal or request was created.
    performer ->  For example, the surgeon, anaethetist, endoscopist, etc.
    status ->  The status of the order. 
    notes ->  Any other notes associated with this proposal or order - e.g. provider instructions.
    orderedOn ->  The time when the request was made.
    orderer ->  The healthcare professional responsible for proposing or ordering the procedure.
    priority ->  The clinical priority associated with this order. 
    reasonCodeableConcept ->  The reason why the procedure is being proposed or ordered. This procedure request may be motivated by a Condition for instance.
    reasonReference ->  The reason why the procedure is being proposed or ordered. This procedure request may be motivated by a Condition for instance.
    scheduledDateTime ->  The timing schedule for the proposed or ordered procedure. The Schedule data type allows many different expressions.  E.g. "Every 8 hours"; "Three times a day"; "1/2 an hour before breakfast for 10 days from 23-Dec 2011:"; "15 Oct 2013, 17 Oct 2013 and 1 Nov 2013".
    scheduledPeriod ->  The timing schedule for the proposed or ordered procedure. The Schedule data type allows many different expressions.  E.g. "Every 8 hours"; "Three times a day"; "1/2 an hour before breakfast for 10 days from 23-Dec 2011:"; "15 Oct 2013, 17 Oct 2013 and 1 Nov 2013".
    scheduledTiming ->  The timing schedule for the proposed or ordered procedure. The Schedule data type allows many different expressions.  E.g. "Every 8 hours"; "Three times a day"; "1/2 an hour before breakfast for 10 days from 23-Dec 2011:"; "15 Oct 2013, 17 Oct 2013 and 1 Nov 2013".
    asNeededBoolean ->  If a CodeableConcept is present, it indicates the pre-condition for performing the procedure.
    asNeededCodeableConcept ->  If a CodeableConcept is present, it indicates the pre-condition for performing the procedure.

    # Search parameters
        ProcedureRequest.search.encounter
        ProcedureRequest.search.identifier
        ProcedureRequest.search.orderer
        ProcedureRequest.search.patient
        ProcedureRequest.search.performer
        ProcedureRequest.search.subject
    '''
    # search parameters
    par = [("encounter", "reference"),
           ("identifier", "token"),
           ("orderer", "reference"),
           ("patient", "reference"),
           ("performer", "reference"),
           ("subject", "reference")]

    search = Params(par, "ProcedureRequest")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'identifier':
                    list_to_add.append(Identifier(obj))
                elif key == 'bodySite':
                    list_to_add.append(CodeableConcept(obj))
                elif key == 'notes':
                    list_to_add.append(Annotation(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ProcedureRequest __new__
        '''
        if json == None:
            return None
        else:
            return super(ProcedureRequest, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ProcedureRequest constructor
        '''
        logging.info("FHIR ProcedureRequest: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "ProcedureRequest"
        if 'identifier' in self.__json:
            if isinstance(self.__json['identifier'], list):
                self.identifier = self.__add_list('identifier')
            else:
                self.identifier = Identifier(self.__add('identifier'))
        else:
            self.identifier = None
        self.subject = Reference(self.__add('subject'))
        self.code = CodeableConcept(self.__add('code'))
        if 'bodySite' in self.__json:
            if isinstance(self.__json['bodySite'], list):
                self.bodySite = self.__add_list('bodySite')
            else:
                self.bodySite = CodeableConcept(self.__add('bodySite'))
        else:
            self.bodySite = None
        self.encounter = Reference(self.__add('encounter'))
        self.performer = Reference(self.__add('performer'))
        self.status = self.__add('status')
        if 'notes' in self.__json:
            if isinstance(self.__json['notes'], list):
                self.notes = self.__add_list('notes')
            else:
                self.notes = Annotation(self.__add('notes'))
        else:
            self.notes = None
        self.orderedOn = DateTime(self.__add('orderedOn'))
        self.orderer = Reference(self.__add('orderer'))
        self.priority = self.__add('priority')
        self.reasonCodeableConcept = CodeableConcept(self.__add('reasonCodeableConcept'))
        self.reasonReference = Reference(self.__add('reasonReference'))
        self.scheduledDateTime = DateTime(self.__add('scheduledDateTime'))
        self.scheduledPeriod = Period(self.__add('scheduledPeriod'))
        self.scheduledTiming = Timing(self.__add('scheduledTiming'))
        self.asNeededBoolean = Boolean(self.__add('asNeededBoolean'))
        self.asNeededCodeableConcept = CodeableConcept(self.__add('asNeededCodeableConcept'))


        # Parent Resource Init
        super(ProcedureRequest, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identifier:
            self.__json['identifier'] = self.__get_list(self.identifier)
        if self.subject:
            self.__json['subject'] = self.subject.json
        if self.code:
            self.__json['code'] = self.code.json
        if self.bodySite:
            self.__json['bodySite'] = self.__get_list(self.bodySite)
        if self.encounter:
            self.__json['encounter'] = self.encounter.json
        if self.performer:
            self.__json['performer'] = self.performer.json
        if self.status:
            self.__json['status'] = self.status
        if self.notes:
            self.__json['notes'] = self.__get_list(self.notes)
        if self.orderedOn:
            self.__json['orderedOn'] = self.orderedOn.json
        if self.orderer:
            self.__json['orderer'] = self.orderer.json
        if self.priority:
            self.__json['priority'] = self.priority
        if self.reasonCodeableConcept:
            self.__json['reasonCodeableConcept'] = self.reasonCodeableConcept.json
        if self.reasonReference:
            self.__json['reasonReference'] = self.reasonReference.json
        if self.scheduledDateTime:
            self.__json['scheduledDateTime'] = self.scheduledDateTime.json
        if self.scheduledPeriod:
            self.__json['scheduledPeriod'] = self.scheduledPeriod.json
        if self.scheduledTiming:
            self.__json['scheduledTiming'] = self.scheduledTiming.json
        if self.asNeededBoolean:
            self.__json['asNeededBoolean'] = self.asNeededBoolean.json
        if self.asNeededCodeableConcept:
            self.__json['asNeededCodeableConcept'] = self.asNeededCodeableConcept.json

        # Add json attributes
        self.__json = super(ProcedureRequest, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR ProcedureRequest string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ProcessRequestItemComponent(BackboneElement):
    '''
    FHIR ProcessRequestItemComponent resource

     List of top level items to be re-adjudicated, if none specified then the entire submission is re-adjudicated.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ProcessRequestItemComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ProcessRequestItemComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ProcessRequestItemComponent constructor
        '''
        logging.info("FHIR ProcessRequestItemComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.sequenceLinkId = self.__add('sequenceLinkId')



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.sequenceLinkId:
            self.__json['sequenceLinkId'] = self.sequenceLinkId


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ProcessRequestItemComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ProcessRequest(DomainResource):
    '''
    FHIR ProcessRequest resource

     This resource provides the target, request and response, and action details for an action to be performed by the target on or about existing resources. If the element is present, it must have either a @value, an @id, or extensions

    action ->  The type of processing action being requested, for example Reversal, Readjudication, StatusRequest,PendedRequest. 
    identifier ->  The ProcessRequest business identifier.
    ruleset ->  The version of the style of resource contents. This should be mapped to the allowable profiles for this and supporting resources.
    originalRuleset ->  The style (standard) and version of the original material which was converted into this resource.
    created ->  The date when this resource was created.
    nullify ->  If true remove all history excluding audit.
    reference ->  A reference to supply which authenticates the process.
    item ->  List of top level items to be re-adjudicated, if none specified then the entire submission is re-adjudicated.
    include ->  Names of resource types to include.
    exclude ->  Names of resource types to exclude.
    period ->  A period of time during which the fulfilling resources would have been created.
    targetIdentifier ->  The organization which is the target of the request.
    targetReference ->  The organization which is the target of the request.
    providerIdentifier ->  The practitioner who is responsible for the action specified in thise request.
    providerReference ->  The practitioner who is responsible for the action specified in thise request.
    organizationIdentifier ->  The organization which is responsible for the action speccified in thise request.
    organizationReference ->  The organization which is responsible for the action speccified in thise request.
    requestIdentifier ->  Reference of resource which is the target or subject of this action.
    requestReference ->  Reference of resource which is the target or subject of this action.
    responseIdentifier ->  Reference of a prior response to resource which is the target or subject of this action.
    responseReference ->  Reference of a prior response to resource which is the target or subject of this action.

    # Search parameters
        ProcessRequest.search.action
        ProcessRequest.search.identifier
        ProcessRequest.search.organization
        ProcessRequest.search.provider
    '''
    # search parameters
    par = [("action", "token"),
           ("identifier", "token"),
           ("organization", "reference"),
           ("provider", "reference")]

    search = Params(par, "ProcessRequest")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'identifier':
                    list_to_add.append(Identifier(obj))
                elif key == 'item':
                    list_to_add.append(ProcessRequestItemComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ProcessRequest __new__
        '''
        if json == None:
            return None
        else:
            return super(ProcessRequest, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ProcessRequest constructor
        '''
        logging.info("FHIR ProcessRequest: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "ProcessRequest"
        self.action = self.__add('action')
        if 'identifier' in self.__json:
            if isinstance(self.__json['identifier'], list):
                self.identifier = self.__add_list('identifier')
            else:
                self.identifier = Identifier(self.__add('identifier'))
        else:
            self.identifier = None
        self.ruleset = Coding(self.__add('ruleset'))
        self.originalRuleset = Coding(self.__add('originalRuleset'))
        self.created = DateTime(self.__add('created'))
        self.nullify = Boolean(self.__add('nullify'))
        self.reference = self.__add('reference')
        if 'item' in self.__json:
            if isinstance(self.__json['item'], list):
                self.item = self.__add_list('item')
            else:
                self.item = ProcessRequestItemComponent(self.__add('item'))
        else:
            self.item = None
        if 'include' in self.__json:
            if isinstance(self.__json['include'], list):
                self.include = self.__add_list('include')
            else:
                self.include = self.__add('include')
        else:
            self.include = None
        if 'exclude' in self.__json:
            if isinstance(self.__json['exclude'], list):
                self.exclude = self.__add_list('exclude')
            else:
                self.exclude = self.__add('exclude')
        else:
            self.exclude = None
        self.period = Period(self.__add('period'))
        self.targetIdentifier = Identifier(self.__add('targetIdentifier'))
        self.targetReference = Reference(self.__add('targetReference'))
        self.providerIdentifier = Identifier(self.__add('providerIdentifier'))
        self.providerReference = Reference(self.__add('providerReference'))
        self.organizationIdentifier = Identifier(self.__add('organizationIdentifier'))
        self.organizationReference = Reference(self.__add('organizationReference'))
        self.requestIdentifier = Identifier(self.__add('requestIdentifier'))
        self.requestReference = Reference(self.__add('requestReference'))
        self.responseIdentifier = Identifier(self.__add('responseIdentifier'))
        self.responseReference = Reference(self.__add('responseReference'))


        # Parent Resource Init
        super(ProcessRequest, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.action:
            self.__json['action'] = self.action
        if self.identifier:
            self.__json['identifier'] = self.__get_list(self.identifier)
        if self.ruleset:
            self.__json['ruleset'] = self.ruleset.json
        if self.originalRuleset:
            self.__json['originalRuleset'] = self.originalRuleset.json
        if self.created:
            self.__json['created'] = self.created.json
        if self.nullify:
            self.__json['nullify'] = self.nullify.json
        if self.reference:
            self.__json['reference'] = self.reference
        if self.item:
            self.__json['item'] = self.__get_list(self.item)
        if self.include:
            self.__json['include'] = self.__get_list(self.include)
        if self.exclude:
            self.__json['exclude'] = self.__get_list(self.exclude)
        if self.period:
            self.__json['period'] = self.period.json
        if self.targetIdentifier:
            self.__json['targetIdentifier'] = self.targetIdentifier.json
        if self.targetReference:
            self.__json['targetReference'] = self.targetReference.json
        if self.providerIdentifier:
            self.__json['providerIdentifier'] = self.providerIdentifier.json
        if self.providerReference:
            self.__json['providerReference'] = self.providerReference.json
        if self.organizationIdentifier:
            self.__json['organizationIdentifier'] = self.organizationIdentifier.json
        if self.organizationReference:
            self.__json['organizationReference'] = self.organizationReference.json
        if self.requestIdentifier:
            self.__json['requestIdentifier'] = self.requestIdentifier.json
        if self.requestReference:
            self.__json['requestReference'] = self.requestReference.json
        if self.responseIdentifier:
            self.__json['responseIdentifier'] = self.responseIdentifier.json
        if self.responseReference:
            self.__json['responseReference'] = self.responseReference.json

        # Add json attributes
        self.__json = super(ProcessRequest, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR ProcessRequest string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ProcessResponseNotesComponent(BackboneElement):
    '''
    FHIR ProcessResponseNotesComponent resource

     Suite of processing note or additional requirements is the processing has been held.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ProcessResponseNotesComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ProcessResponseNotesComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ProcessResponseNotesComponent constructor
        '''
        logging.info("FHIR ProcessResponseNotesComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.type = Coding(self.__add('type'))
        self.text = self.__add('text')



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.type:
            self.__json['type'] = self.type.json
        if self.text:
            self.__json['text'] = self.text


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ProcessResponseNotesComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ProcessResponse(DomainResource):
    '''
    FHIR ProcessResponse resource

     This resource provides processing status, errors and notes from the processing of a resource. If the element is present, it must have either a @value, an @id, or extensions

    identifier ->  The Response business identifier.
    outcome ->  Transaction status: error, complete, held.
    disposition ->  A description of the status of the adjudication or processing.
    ruleset ->  The version of the style of resource contents. This should be mapped to the allowable profiles for this and supporting resources.
    originalRuleset ->  The style (standard) and version of the original material which was converted into this resource.
    created ->  The date when the enclosed suite of services were performed or completed.
    form ->  The form to be used for printing the content.
    notes ->  Suite of processing note or additional requirements is the processing has been held.
    error ->  Processing errors.
    requestIdentifier ->  Original request resource reference.
    requestReference ->  Original request resource reference.
    organizationIdentifier ->  The organization who produced this adjudicated response.
    organizationReference ->  The organization who produced this adjudicated response.
    requestProviderIdentifier ->  The practitioner who is responsible for the services rendered to the patient.
    requestProviderReference ->  The practitioner who is responsible for the services rendered to the patient.
    requestOrganizationIdentifier ->  The organization which is responsible for the services rendered to the patient.
    requestOrganizationReference ->  The organization which is responsible for the services rendered to the patient.

    # Search parameters
        ProcessResponse.search.identifier
        ProcessResponse.search.organization
        ProcessResponse.search.request
        ProcessResponse.search.requestorganization
        ProcessResponse.search.requestprovider
    '''
    # search parameters
    par = [("identifier", "token"),
           ("organization", "reference"),
           ("request", "reference"),
           ("requestorganization", "reference"),
           ("requestprovider", "reference")]

    search = Params(par, "ProcessResponse")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'identifier':
                    list_to_add.append(Identifier(obj))
                elif key == 'notes':
                    list_to_add.append(ProcessResponseNotesComponent(obj))
                elif key == 'error':
                    list_to_add.append(Coding(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ProcessResponse __new__
        '''
        if json == None:
            return None
        else:
            return super(ProcessResponse, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ProcessResponse constructor
        '''
        logging.info("FHIR ProcessResponse: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "ProcessResponse"
        if 'identifier' in self.__json:
            if isinstance(self.__json['identifier'], list):
                self.identifier = self.__add_list('identifier')
            else:
                self.identifier = Identifier(self.__add('identifier'))
        else:
            self.identifier = None
        self.outcome = Coding(self.__add('outcome'))
        self.disposition = self.__add('disposition')
        self.ruleset = Coding(self.__add('ruleset'))
        self.originalRuleset = Coding(self.__add('originalRuleset'))
        self.created = DateTime(self.__add('created'))
        self.form = Coding(self.__add('form'))
        if 'notes' in self.__json:
            if isinstance(self.__json['notes'], list):
                self.notes = self.__add_list('notes')
            else:
                self.notes = ProcessResponseNotesComponent(self.__add('notes'))
        else:
            self.notes = None
        if 'error' in self.__json:
            if isinstance(self.__json['error'], list):
                self.error = self.__add_list('error')
            else:
                self.error = Coding(self.__add('error'))
        else:
            self.error = None
        self.requestIdentifier = Identifier(self.__add('requestIdentifier'))
        self.requestReference = Reference(self.__add('requestReference'))
        self.organizationIdentifier = Identifier(self.__add('organizationIdentifier'))
        self.organizationReference = Reference(self.__add('organizationReference'))
        self.requestProviderIdentifier = Identifier(self.__add('requestProviderIdentifier'))
        self.requestProviderReference = Reference(self.__add('requestProviderReference'))
        self.requestOrganizationIdentifier = Identifier(self.__add('requestOrganizationIdentifier'))
        self.requestOrganizationReference = Reference(self.__add('requestOrganizationReference'))


        # Parent Resource Init
        super(ProcessResponse, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identifier:
            self.__json['identifier'] = self.__get_list(self.identifier)
        if self.outcome:
            self.__json['outcome'] = self.outcome.json
        if self.disposition:
            self.__json['disposition'] = self.disposition
        if self.ruleset:
            self.__json['ruleset'] = self.ruleset.json
        if self.originalRuleset:
            self.__json['originalRuleset'] = self.originalRuleset.json
        if self.created:
            self.__json['created'] = self.created.json
        if self.form:
            self.__json['form'] = self.form.json
        if self.notes:
            self.__json['notes'] = self.__get_list(self.notes)
        if self.error:
            self.__json['error'] = self.__get_list(self.error)
        if self.requestIdentifier:
            self.__json['requestIdentifier'] = self.requestIdentifier.json
        if self.requestReference:
            self.__json['requestReference'] = self.requestReference.json
        if self.organizationIdentifier:
            self.__json['organizationIdentifier'] = self.organizationIdentifier.json
        if self.organizationReference:
            self.__json['organizationReference'] = self.organizationReference.json
        if self.requestProviderIdentifier:
            self.__json['requestProviderIdentifier'] = self.requestProviderIdentifier.json
        if self.requestProviderReference:
            self.__json['requestProviderReference'] = self.requestProviderReference.json
        if self.requestOrganizationIdentifier:
            self.__json['requestOrganizationIdentifier'] = self.requestOrganizationIdentifier.json
        if self.requestOrganizationReference:
            self.__json['requestOrganizationReference'] = self.requestOrganizationReference.json

        # Add json attributes
        self.__json = super(ProcessResponse, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR ProcessResponse string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ProtocolConditionComponent(BackboneElement):
    '''
    FHIR ProtocolConditionComponent resource

     Defines the name/value pair that must hold for the condition to be met.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ProtocolConditionComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ProtocolConditionComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ProtocolConditionComponent constructor
        '''
        logging.info("FHIR ProtocolConditionComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ProtocolConditionComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ProtocolPreconditionComponent(BackboneElement):
    '''
    FHIR ProtocolPreconditionComponent resource

     Rules prior to execution.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'intersection':
                    list_to_add.append(ProtocolPreconditionComponent(obj))
                elif key == 'union':
                    list_to_add.append(ProtocolPreconditionComponent(obj))
                elif key == 'exclude':
                    list_to_add.append(ProtocolPreconditionComponent(obj))
                elif key == 'intersection':
                    list_to_add.append(ProtocolPreconditionComponent(obj))
                elif key == 'union':
                    list_to_add.append(ProtocolPreconditionComponent(obj))
                elif key == 'exclude':
                    list_to_add.append(ProtocolPreconditionComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ProtocolPreconditionComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ProtocolPreconditionComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ProtocolPreconditionComponent constructor
        '''
        logging.info("FHIR ProtocolPreconditionComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.description = self.__add('description')
        self.condition = ProtocolConditionComponent(self.__add('condition'))
        if 'intersection' in self.__json:
            if isinstance(self.__json['intersection'], list):
                self.intersection = self.__add_list('intersection')
            else:
                self.intersection = ProtocolPreconditionComponent(self.__add('intersection'))
        else:
            self.intersection = None
        if 'union' in self.__json:
            if isinstance(self.__json['union'], list):
                self.union = self.__add_list('union')
            else:
                self.union = ProtocolPreconditionComponent(self.__add('union'))
        else:
            self.union = None
        if 'exclude' in self.__json:
            if isinstance(self.__json['exclude'], list):
                self.exclude = self.__add_list('exclude')
            else:
                self.exclude = ProtocolPreconditionComponent(self.__add('exclude'))
        else:
            self.exclude = None
        self.description = self.__add('description')
        self.condition = ProtocolConditionComponent(self.__add('condition'))
        if 'intersection' in self.__json:
            if isinstance(self.__json['intersection'], list):
                self.intersection = self.__add_list('intersection')
            else:
                self.intersection = ProtocolPreconditionComponent(self.__add('intersection'))
        else:
            self.intersection = None
        if 'union' in self.__json:
            if isinstance(self.__json['union'], list):
                self.union = self.__add_list('union')
            else:
                self.union = ProtocolPreconditionComponent(self.__add('union'))
        else:
            self.union = None
        if 'exclude' in self.__json:
            if isinstance(self.__json['exclude'], list):
                self.exclude = self.__add_list('exclude')
            else:
                self.exclude = ProtocolPreconditionComponent(self.__add('exclude'))
        else:
            self.exclude = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.description:
            self.__json['description'] = self.description
        if self.condition:
            self.__json['condition'] = self.condition.json
        if self.intersection:
            self.__json['intersection'] = self.__get_list(self.intersection)
        if self.union:
            self.__json['union'] = self.__get_list(self.union)
        if self.exclude:
            self.__json['exclude'] = self.__get_list(self.exclude)
        if self.description:
            self.__json['description'] = self.description
        if self.condition:
            self.__json['condition'] = self.condition.json
        if self.intersection:
            self.__json['intersection'] = self.__get_list(self.intersection)
        if self.union:
            self.__json['union'] = self.__get_list(self.union)
        if self.exclude:
            self.__json['exclude'] = self.__get_list(self.exclude)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ProtocolPreconditionComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ProtocolComponentComponent(BackboneElement):
    '''
    FHIR ProtocolComponentComponent resource

     Activities that are part of this activity.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ProtocolComponentComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ProtocolComponentComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ProtocolComponentComponent constructor
        '''
        logging.info("FHIR ProtocolComponentComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.sequence = self.__add('sequence')
        self.activity = self.__add('activity')



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.sequence:
            self.__json['sequence'] = self.sequence
        if self.activity:
            self.__json['activity'] = self.activity


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ProtocolComponentComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ProtocolDetailComponent(BackboneElement):
    '''
    FHIR ProtocolDetailComponent resource

     Information about the nature of the activity, including type, timing and other qualifiers.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ProtocolDetailComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ProtocolDetailComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ProtocolDetailComponent constructor
        '''
        logging.info("FHIR ProtocolDetailComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ProtocolDetailComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ProtocolActivityComponent(BackboneElement):
    '''
    FHIR ProtocolActivityComponent resource

     Activities that occur within timepoint.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'component':
                    list_to_add.append(ProtocolComponentComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ProtocolActivityComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ProtocolActivityComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ProtocolActivityComponent constructor
        '''
        logging.info("FHIR ProtocolActivityComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        if 'alternative' in self.__json:
            if isinstance(self.__json['alternative'], list):
                self.alternative = self.__add_list('alternative')
            else:
                self.alternative = self.__add('alternative')
        else:
            self.alternative = None
        if 'component' in self.__json:
            if isinstance(self.__json['component'], list):
                self.component = self.__add_list('component')
            else:
                self.component = ProtocolComponentComponent(self.__add('component'))
        else:
            self.component = None
        if 'following' in self.__json:
            if isinstance(self.__json['following'], list):
                self.following = self.__add_list('following')
            else:
                self.following = self.__add('following')
        else:
            self.following = None
        self.wait = Duration(self.__add('wait'))
        self.detail = ProtocolDetailComponent(self.__add('detail'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.alternative:
            self.__json['alternative'] = self.__get_list(self.alternative)
        if self.component:
            self.__json['component'] = self.__get_list(self.component)
        if self.following:
            self.__json['following'] = self.__get_list(self.following)
        if self.wait:
            self.__json['wait'] = self.wait.json
        if self.detail:
            self.__json['detail'] = self.detail.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ProtocolActivityComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ProtocolNextComponent(BackboneElement):
    '''
    FHIR ProtocolNextComponent resource

     What happens next?

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ProtocolNextComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ProtocolNextComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ProtocolNextComponent constructor
        '''
        logging.info("FHIR ProtocolNextComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ProtocolNextComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ProtocolStepComponent(BackboneElement):
    '''
    FHIR ProtocolStepComponent resource

     What's done as part of protocol.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'activity':
                    list_to_add.append(ProtocolActivityComponent(obj))
                elif key == 'next':
                    list_to_add.append(ProtocolNextComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ProtocolStepComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ProtocolStepComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ProtocolStepComponent constructor
        '''
        logging.info("FHIR ProtocolStepComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.name = self.__add('name')
        self.description = self.__add('description')
        self.duration = Duration(self.__add('duration'))
        self.precondition = ProtocolPreconditionComponent(self.__add('precondition'))
        self.exit = ProtocolPreconditionComponent(self.__add('exit'))
        self.firstActivity = self.__add('firstActivity')
        if 'activity' in self.__json:
            if isinstance(self.__json['activity'], list):
                self.activity = self.__add_list('activity')
            else:
                self.activity = ProtocolActivityComponent(self.__add('activity'))
        else:
            self.activity = None
        if 'next' in self.__json:
            if isinstance(self.__json['next'], list):
                self.next = self.__add_list('next')
            else:
                self.next = ProtocolNextComponent(self.__add('next'))
        else:
            self.next = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.name:
            self.__json['name'] = self.name
        if self.description:
            self.__json['description'] = self.description
        if self.duration:
            self.__json['duration'] = self.duration.json
        if self.precondition:
            self.__json['precondition'] = self.precondition.json
        if self.exit:
            self.__json['exit'] = self.exit.json
        if self.firstActivity:
            self.__json['firstActivity'] = self.firstActivity
        if self.activity:
            self.__json['activity'] = self.__get_list(self.activity)
        if self.next:
            self.__json['next'] = self.__get_list(self.next)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ProtocolStepComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class Protocol(DomainResource):
    '''
    FHIR Protocol resource

     A definition of behaviors to be taken in particular circumstances, often including conditions, options and other decision points. If the element is present, it must have either a @value, an @id, or extensions

    identifier ->  A unique identifier for the protocol instance.
    title ->  Name of protocol.
    status ->  The status of the protocol. 
    type ->  A code that classifies the general type of context to which these behavior definitions apply.  This is used for searching, sorting and display purposes. 
    subject ->  What does protocol deal with?
    group ->  To whom does Protocol apply?
    purpose ->  When is protocol to be used?
    author ->  Who wrote protocol?
    step ->  What's done as part of protocol.

    
    '''
    

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'identifier':
                    list_to_add.append(Identifier(obj))
                elif key == 'step':
                    list_to_add.append(ProtocolStepComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR Protocol __new__
        '''
        if json == None:
            return None
        else:
            return super(Protocol, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR Protocol constructor
        '''
        logging.info("FHIR Protocol: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "Protocol"
        if 'identifier' in self.__json:
            if isinstance(self.__json['identifier'], list):
                self.identifier = self.__add_list('identifier')
            else:
                self.identifier = Identifier(self.__add('identifier'))
        else:
            self.identifier = None
        self.title = self.__add('title')
        self.status = self.__add('status')
        self.type = self.__add('type')
        self.subject = Reference(self.__add('subject'))
        self.group = Reference(self.__add('group'))
        self.purpose = self.__add('purpose')
        self.author = Reference(self.__add('author'))
        if 'step' in self.__json:
            if isinstance(self.__json['step'], list):
                self.step = self.__add_list('step')
            else:
                self.step = ProtocolStepComponent(self.__add('step'))
        else:
            self.step = None


        # Parent Resource Init
        super(Protocol, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identifier:
            self.__json['identifier'] = self.__get_list(self.identifier)
        if self.title:
            self.__json['title'] = self.title
        if self.status:
            self.__json['status'] = self.status
        if self.type:
            self.__json['type'] = self.type
        if self.subject:
            self.__json['subject'] = self.subject.json
        if self.group:
            self.__json['group'] = self.group.json
        if self.purpose:
            self.__json['purpose'] = self.purpose
        if self.author:
            self.__json['author'] = self.author.json
        if self.step:
            self.__json['step'] = self.__get_list(self.step)

        # Add json attributes
        self.__json = super(Protocol, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR Protocol string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ProvenanceRelatedAgentComponent(BackboneElement):
    '''
    FHIR ProvenanceRelatedAgentComponent resource

     A relationship between two the agents referenced in this resource. This is defined to allow for explicit description of the delegation between agents.  For example, this human author used this device, or one person acted on another's behest.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ProvenanceRelatedAgentComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ProvenanceRelatedAgentComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ProvenanceRelatedAgentComponent constructor
        '''
        logging.info("FHIR ProvenanceRelatedAgentComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.type = CodeableConcept(self.__add('type'))
        self.target = self.__add('target')



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.type:
            self.__json['type'] = self.type.json
        if self.target:
            self.__json['target'] = self.target


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ProvenanceRelatedAgentComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ProvenanceAgentComponent(BackboneElement):
    '''
    FHIR ProvenanceAgentComponent resource

     An actor taking a role in an activity  for which it can be assigned some degree of responsibility for the activity taking place.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'relatedAgent':
                    list_to_add.append(ProvenanceRelatedAgentComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ProvenanceAgentComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ProvenanceAgentComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ProvenanceAgentComponent constructor
        '''
        logging.info("FHIR ProvenanceAgentComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.role = Coding(self.__add('role'))
        self.actor = Reference(self.__add('actor'))
        self.userId = Identifier(self.__add('userId'))
        if 'relatedAgent' in self.__json:
            if isinstance(self.__json['relatedAgent'], list):
                self.relatedAgent = self.__add_list('relatedAgent')
            else:
                self.relatedAgent = ProvenanceRelatedAgentComponent(self.__add('relatedAgent'))
        else:
            self.relatedAgent = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.role:
            self.__json['role'] = self.role.json
        if self.actor:
            self.__json['actor'] = self.actor.json
        if self.userId:
            self.__json['userId'] = self.userId.json
        if self.relatedAgent:
            self.__json['relatedAgent'] = self.__get_list(self.relatedAgent)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ProvenanceAgentComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ProvenanceEntityComponent(BackboneElement):
    '''
    FHIR ProvenanceEntityComponent resource

     An entity used in this activity.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ProvenanceEntityComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ProvenanceEntityComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ProvenanceEntityComponent constructor
        '''
        logging.info("FHIR ProvenanceEntityComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.role = self.__add('role')
        self.type = Coding(self.__add('type'))
        self.reference = self.__add('reference')
        self.display = self.__add('display')
        self.agent = ProvenanceAgentComponent(self.__add('agent'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.role:
            self.__json['role'] = self.role
        if self.type:
            self.__json['type'] = self.type.json
        if self.reference:
            self.__json['reference'] = self.reference
        if self.display:
            self.__json['display'] = self.display
        if self.agent:
            self.__json['agent'] = self.agent.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ProvenanceEntityComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class Provenance(DomainResource):
    '''
    FHIR Provenance resource

     Provenance of a resource is a record that describes entities and processes involved in producing and delivering or otherwise influencing that resource. Provenance provides a critical foundation for assessing authenticity, enabling trust, and allowing reproducibility. Provenance assertions are a form of contextual metadata and can themselves become important records with their own provenance. Provenance statement indicates clinical significance in terms of confidence in authenticity, reliability, and trustworthiness, integrity, and stage in lifecycle (e.g. Document Completion - has the artifact been legally authenticated), all of which may impact security, privacy, and trust policies. If the element is present, it must have either a @value, an @id, or extensions

    target ->  The Reference(s) that were generated or updated by  the activity described in this resource. A provenance can point to more than one target if multiple resources were created/updated by the same activity.
    period ->  The period during which the activity occurred.
    recorded ->  The instant of time at which the activity was recorded.
    reason ->  The reason that the activity was taking place.
    activity ->  An activity is something that occurs over a period of time and acts upon or with entities; it may include consuming, processing, transforming, modifying, relocating, using, or generating entities.
    location ->  Where the activity occurred, if relevant.
    policy ->  Policy or plan the activity was defined by. Typically, a single activity may have multiple applicable policy documents, such as patient consent, guarantor funding, etc.
    agent ->  An actor taking a role in an activity  for which it can be assigned some degree of responsibility for the activity taking place.
    entity ->  An entity used in this activity.
    signature ->  A digital signature on the target Reference(s). The signer should match a Provenance.agent. The purpose of the signature is indicated.

    # Search parameters
        Provenance.search.agent
        Provenance.search.end
        Provenance.search.entity
        Provenance.search.entitytype
        Provenance.search.location
        Provenance.search.patient
        Provenance.search.sigtype
        Provenance.search.start
        Provenance.search.target
        Provenance.search.userid
    '''
    # search parameters
    par = [("agent", "reference"),
           ("end", "date"),
           ("entity", "uri"),
           ("entitytype", "token"),
           ("location", "reference"),
           ("patient", "reference"),
           ("sigtype", "token"),
           ("start", "date"),
           ("target", "reference"),
           ("userid", "token")]

    search = Params(par, "Provenance")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'target':
                    list_to_add.append(Reference(obj))
                elif key == 'reason':
                    list_to_add.append(Coding(obj))
                elif key == 'agent':
                    list_to_add.append(ProvenanceAgentComponent(obj))
                elif key == 'entity':
                    list_to_add.append(ProvenanceEntityComponent(obj))
                elif key == 'signature':
                    list_to_add.append(Signature(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR Provenance __new__
        '''
        if json == None:
            return None
        else:
            return super(Provenance, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR Provenance constructor
        '''
        logging.info("FHIR Provenance: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "Provenance"
        if 'target' in self.__json:
            if isinstance(self.__json['target'], list):
                self.target = self.__add_list('target')
            else:
                self.target = Reference(self.__add('target'))
        else:
            self.target = None
        self.period = Period(self.__add('period'))
        self.recorded = self.__add('recorded')
        if 'reason' in self.__json:
            if isinstance(self.__json['reason'], list):
                self.reason = self.__add_list('reason')
            else:
                self.reason = Coding(self.__add('reason'))
        else:
            self.reason = None
        self.activity = Coding(self.__add('activity'))
        self.location = Reference(self.__add('location'))
        if 'policy' in self.__json:
            if isinstance(self.__json['policy'], list):
                self.policy = self.__add_list('policy')
            else:
                self.policy = self.__add('policy')
        else:
            self.policy = None
        if 'agent' in self.__json:
            if isinstance(self.__json['agent'], list):
                self.agent = self.__add_list('agent')
            else:
                self.agent = ProvenanceAgentComponent(self.__add('agent'))
        else:
            self.agent = None
        if 'entity' in self.__json:
            if isinstance(self.__json['entity'], list):
                self.entity = self.__add_list('entity')
            else:
                self.entity = ProvenanceEntityComponent(self.__add('entity'))
        else:
            self.entity = None
        if 'signature' in self.__json:
            if isinstance(self.__json['signature'], list):
                self.signature = self.__add_list('signature')
            else:
                self.signature = Signature(self.__add('signature'))
        else:
            self.signature = None


        # Parent Resource Init
        super(Provenance, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.target:
            self.__json['target'] = self.__get_list(self.target)
        if self.period:
            self.__json['period'] = self.period.json
        if self.recorded:
            self.__json['recorded'] = self.recorded
        if self.reason:
            self.__json['reason'] = self.__get_list(self.reason)
        if self.activity:
            self.__json['activity'] = self.activity.json
        if self.location:
            self.__json['location'] = self.location.json
        if self.policy:
            self.__json['policy'] = self.__get_list(self.policy)
        if self.agent:
            self.__json['agent'] = self.__get_list(self.agent)
        if self.entity:
            self.__json['entity'] = self.__get_list(self.entity)
        if self.signature:
            self.__json['signature'] = self.__get_list(self.signature)

        # Add json attributes
        self.__json = super(Provenance, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR Provenance string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class QuestionnaireEnableWhenComponent(BackboneElement):
    '''
    FHIR QuestionnaireEnableWhenComponent resource

     If present, indicates that this item should only be enabled (displayed/allow answers to be captured) when the specified condition is true.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR QuestionnaireEnableWhenComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(QuestionnaireEnableWhenComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR QuestionnaireEnableWhenComponent constructor
        '''
        logging.info("FHIR QuestionnaireEnableWhenComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.question = self.__add('question')
        self.answered = Boolean(self.__add('answered'))
        self.answerBoolean = Boolean(self.__add('answerBoolean'))
        self.answerDecimal = self.__add('answerDecimal')
        self.answerInteger = self.__add('answerInteger')
        self.answerDate = Date(self.__add('answerDate'))
        self.answerDateTime = DateTime(self.__add('answerDateTime'))
        self.answerInstant = self.__add('answerInstant')
        self.answerTime = Time(self.__add('answerTime'))
        self.answerString = self.__add('answerString')
        self.answerUri = self.__add('answerUri')
        self.answerAttachment = Attachment(self.__add('answerAttachment'))
        self.answerCoding = Coding(self.__add('answerCoding'))
        self.answerQuantity = Quantity(self.__add('answerQuantity'))
        self.answerReference = Reference(self.__add('answerReference'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.question:
            self.__json['question'] = self.question
        if self.answered:
            self.__json['answered'] = self.answered.json
        if self.answerBoolean:
            self.__json['answerBoolean'] = self.answerBoolean.json
        if self.answerDecimal:
            self.__json['answerDecimal'] = self.answerDecimal
        if self.answerInteger:
            self.__json['answerInteger'] = self.answerInteger
        if self.answerDate:
            self.__json['answerDate'] = self.answerDate.json
        if self.answerDateTime:
            self.__json['answerDateTime'] = self.answerDateTime.json
        if self.answerInstant:
            self.__json['answerInstant'] = self.answerInstant
        if self.answerTime:
            self.__json['answerTime'] = self.answerTime.json
        if self.answerString:
            self.__json['answerString'] = self.answerString
        if self.answerUri:
            self.__json['answerUri'] = self.answerUri
        if self.answerAttachment:
            self.__json['answerAttachment'] = self.answerAttachment.json
        if self.answerCoding:
            self.__json['answerCoding'] = self.answerCoding.json
        if self.answerQuantity:
            self.__json['answerQuantity'] = self.answerQuantity.json
        if self.answerReference:
            self.__json['answerReference'] = self.answerReference.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR QuestionnaireEnableWhenComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class QuestionnaireOptionComponent(BackboneElement):
    '''
    FHIR QuestionnaireOptionComponent resource

     For a "choice" question, identifies one of the permitted answers for the question.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR QuestionnaireOptionComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(QuestionnaireOptionComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR QuestionnaireOptionComponent constructor
        '''
        logging.info("FHIR QuestionnaireOptionComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.valueInteger = self.__add('valueInteger')
        self.valueDate = Date(self.__add('valueDate'))
        self.valueTime = Time(self.__add('valueTime'))
        self.valueString = self.__add('valueString')
        self.valueCoding = Coding(self.__add('valueCoding'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.valueInteger:
            self.__json['valueInteger'] = self.valueInteger
        if self.valueDate:
            self.__json['valueDate'] = self.valueDate.json
        if self.valueTime:
            self.__json['valueTime'] = self.valueTime.json
        if self.valueString:
            self.__json['valueString'] = self.valueString
        if self.valueCoding:
            self.__json['valueCoding'] = self.valueCoding.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR QuestionnaireOptionComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class QuestionnaireItemComponent(BackboneElement):
    '''
    FHIR QuestionnaireItemComponent resource

     The questions and groupings of questions that make up the questionnaire.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'concept':
                    list_to_add.append(Coding(obj))
                elif key == 'enableWhen':
                    list_to_add.append(QuestionnaireEnableWhenComponent(obj))
                elif key == 'option':
                    list_to_add.append(QuestionnaireOptionComponent(obj))
                elif key == 'item':
                    list_to_add.append(QuestionnaireItemComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR QuestionnaireItemComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(QuestionnaireItemComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR QuestionnaireItemComponent constructor
        '''
        logging.info("FHIR QuestionnaireItemComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.linkId = self.__add('linkId')
        if 'concept' in self.__json:
            if isinstance(self.__json['concept'], list):
                self.concept = self.__add_list('concept')
            else:
                self.concept = Coding(self.__add('concept'))
        else:
            self.concept = None
        self.prefix = self.__add('prefix')
        self.text = self.__add('text')
        self.type = self.__add('type')
        if 'enableWhen' in self.__json:
            if isinstance(self.__json['enableWhen'], list):
                self.enableWhen = self.__add_list('enableWhen')
            else:
                self.enableWhen = QuestionnaireEnableWhenComponent(self.__add('enableWhen'))
        else:
            self.enableWhen = None
        self.required = Boolean(self.__add('required'))
        self.repeats = Boolean(self.__add('repeats'))
        self.readOnly = Boolean(self.__add('readOnly'))
        self.maxLength = self.__add('maxLength')
        self.options = Reference(self.__add('options'))
        if 'option' in self.__json:
            if isinstance(self.__json['option'], list):
                self.option = self.__add_list('option')
            else:
                self.option = QuestionnaireOptionComponent(self.__add('option'))
        else:
            self.option = None
        if 'item' in self.__json:
            if isinstance(self.__json['item'], list):
                self.item = self.__add_list('item')
            else:
                self.item = QuestionnaireItemComponent(self.__add('item'))
        else:
            self.item = None
        self.initialBoolean = Boolean(self.__add('initialBoolean'))
        self.initialDecimal = self.__add('initialDecimal')
        self.initialInteger = self.__add('initialInteger')
        self.initialDate = Date(self.__add('initialDate'))
        self.initialDateTime = DateTime(self.__add('initialDateTime'))
        self.initialInstant = self.__add('initialInstant')
        self.initialTime = Time(self.__add('initialTime'))
        self.initialString = self.__add('initialString')
        self.initialUri = self.__add('initialUri')
        self.initialAttachment = Attachment(self.__add('initialAttachment'))
        self.initialCoding = Coding(self.__add('initialCoding'))
        self.initialQuantity = Quantity(self.__add('initialQuantity'))
        self.initialReference = Reference(self.__add('initialReference'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.linkId:
            self.__json['linkId'] = self.linkId
        if self.concept:
            self.__json['concept'] = self.__get_list(self.concept)
        if self.prefix:
            self.__json['prefix'] = self.prefix
        if self.text:
            self.__json['text'] = self.text
        if self.type:
            self.__json['type'] = self.type
        if self.enableWhen:
            self.__json['enableWhen'] = self.__get_list(self.enableWhen)
        if self.required:
            self.__json['required'] = self.required.json
        if self.repeats:
            self.__json['repeats'] = self.repeats.json
        if self.readOnly:
            self.__json['readOnly'] = self.readOnly.json
        if self.maxLength:
            self.__json['maxLength'] = self.maxLength
        if self.options:
            self.__json['options'] = self.options.json
        if self.option:
            self.__json['option'] = self.__get_list(self.option)
        if self.item:
            self.__json['item'] = self.__get_list(self.item)
        if self.initialBoolean:
            self.__json['initialBoolean'] = self.initialBoolean.json
        if self.initialDecimal:
            self.__json['initialDecimal'] = self.initialDecimal
        if self.initialInteger:
            self.__json['initialInteger'] = self.initialInteger
        if self.initialDate:
            self.__json['initialDate'] = self.initialDate.json
        if self.initialDateTime:
            self.__json['initialDateTime'] = self.initialDateTime.json
        if self.initialInstant:
            self.__json['initialInstant'] = self.initialInstant
        if self.initialTime:
            self.__json['initialTime'] = self.initialTime.json
        if self.initialString:
            self.__json['initialString'] = self.initialString
        if self.initialUri:
            self.__json['initialUri'] = self.initialUri
        if self.initialAttachment:
            self.__json['initialAttachment'] = self.initialAttachment.json
        if self.initialCoding:
            self.__json['initialCoding'] = self.initialCoding.json
        if self.initialQuantity:
            self.__json['initialQuantity'] = self.initialQuantity.json
        if self.initialReference:
            self.__json['initialReference'] = self.initialReference.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR QuestionnaireItemComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class Questionnaire(DomainResource):
    '''
    FHIR Questionnaire resource

     A structured set of questions intended to guide the collection of answers. The questions are ordered and grouped into coherent subsets, corresponding to the structure of the grouping of the underlying questions. If the element is present, it must have either a @value, an @id, or extensions

    url ->  An absolute URL that is used to identify this questionnaire when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this questionnaire is (or will be) published.
    identifier ->  This records identifiers associated with this question set that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).
    version ->  The version number assigned by the publisher for business reasons.  It may remain the same when the resource is updated.
    status ->  The lifecycle status of the questionnaire as a whole. 
    date ->  The date that this questionnaire was last changed.
    publisher ->  Organization or person responsible for developing and maintaining the questionnaire.
    telecom ->  Contact details to assist a user in finding and communicating with the publisher.
    useContext ->  A code that identifies the questionnaire as falling into a particular group of like questionnaires; e.g. "Pediatric", "Admissions", "Research", "Demographic", "Opinion Survey", etc.
    title ->  The name or label associated with this questionnaire.
    concept ->  Identifies a how this question or group of questions is known in a particular terminology such as LOINC.
    subjectType ->  Identifies the types of subjects that can be the subject of the questionnaire.
    item ->  The questions and groupings of questions that make up the questionnaire.

    # Search parameters
        Questionnaire.search.code
        Questionnaire.search.date
        Questionnaire.search.identifier
        Questionnaire.search.publisher
        Questionnaire.search.status
        Questionnaire.search.title
        Questionnaire.search.version
    '''
    # search parameters
    par = [("code", "token"),
           ("date", "date"),
           ("identifier", "token"),
           ("publisher", "string"),
           ("status", "token"),
           ("title", "string"),
           ("version", "string")]

    search = Params(par, "Questionnaire")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'identifier':
                    list_to_add.append(Identifier(obj))
                elif key == 'telecom':
                    list_to_add.append(ContactPoint(obj))
                elif key == 'useContext':
                    list_to_add.append(CodeableConcept(obj))
                elif key == 'concept':
                    list_to_add.append(Coding(obj))
                elif key == 'item':
                    list_to_add.append(QuestionnaireItemComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR Questionnaire __new__
        '''
        if json == None:
            return None
        else:
            return super(Questionnaire, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR Questionnaire constructor
        '''
        logging.info("FHIR Questionnaire: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "Questionnaire"
        self.url = self.__add('url')
        if 'identifier' in self.__json:
            if isinstance(self.__json['identifier'], list):
                self.identifier = self.__add_list('identifier')
            else:
                self.identifier = Identifier(self.__add('identifier'))
        else:
            self.identifier = None
        self.version = self.__add('version')
        self.status = self.__add('status')
        self.date = DateTime(self.__add('date'))
        self.publisher = self.__add('publisher')
        if 'telecom' in self.__json:
            if isinstance(self.__json['telecom'], list):
                self.telecom = self.__add_list('telecom')
            else:
                self.telecom = ContactPoint(self.__add('telecom'))
        else:
            self.telecom = None
        if 'useContext' in self.__json:
            if isinstance(self.__json['useContext'], list):
                self.useContext = self.__add_list('useContext')
            else:
                self.useContext = CodeableConcept(self.__add('useContext'))
        else:
            self.useContext = None
        self.title = self.__add('title')
        if 'concept' in self.__json:
            if isinstance(self.__json['concept'], list):
                self.concept = self.__add_list('concept')
            else:
                self.concept = Coding(self.__add('concept'))
        else:
            self.concept = None
        if 'subjectType' in self.__json:
            if isinstance(self.__json['subjectType'], list):
                self.subjectType = self.__add_list('subjectType')
            else:
                self.subjectType = self.__add('subjectType')
        else:
            self.subjectType = None
        if 'item' in self.__json:
            if isinstance(self.__json['item'], list):
                self.item = self.__add_list('item')
            else:
                self.item = QuestionnaireItemComponent(self.__add('item'))
        else:
            self.item = None


        # Parent Resource Init
        super(Questionnaire, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.url:
            self.__json['url'] = self.url
        if self.identifier:
            self.__json['identifier'] = self.__get_list(self.identifier)
        if self.version:
            self.__json['version'] = self.version
        if self.status:
            self.__json['status'] = self.status
        if self.date:
            self.__json['date'] = self.date.json
        if self.publisher:
            self.__json['publisher'] = self.publisher
        if self.telecom:
            self.__json['telecom'] = self.__get_list(self.telecom)
        if self.useContext:
            self.__json['useContext'] = self.__get_list(self.useContext)
        if self.title:
            self.__json['title'] = self.title
        if self.concept:
            self.__json['concept'] = self.__get_list(self.concept)
        if self.subjectType:
            self.__json['subjectType'] = self.__get_list(self.subjectType)
        if self.item:
            self.__json['item'] = self.__get_list(self.item)

        # Add json attributes
        self.__json = super(Questionnaire, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR Questionnaire string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class QuestionnaireResponseAnswerComponent(BackboneElement):
    '''
    FHIR QuestionnaireResponseAnswerComponent resource

     The respondent's answer(s) to the question.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'item':
                    list_to_add.append(QuestionnaireResponseItemComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR QuestionnaireResponseAnswerComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(QuestionnaireResponseAnswerComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR QuestionnaireResponseAnswerComponent constructor
        '''
        logging.info("FHIR QuestionnaireResponseAnswerComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        if 'item' in self.__json:
            if isinstance(self.__json['item'], list):
                self.item = self.__add_list('item')
            else:
                self.item = QuestionnaireResponseItemComponent(self.__add('item'))
        else:
            self.item = None
        self.valueBoolean = Boolean(self.__add('valueBoolean'))
        self.valueDecimal = self.__add('valueDecimal')
        self.valueInteger = self.__add('valueInteger')
        self.valueDate = Date(self.__add('valueDate'))
        self.valueDateTime = DateTime(self.__add('valueDateTime'))
        self.valueInstant = self.__add('valueInstant')
        self.valueTime = Time(self.__add('valueTime'))
        self.valueString = self.__add('valueString')
        self.valueUri = self.__add('valueUri')
        self.valueAttachment = Attachment(self.__add('valueAttachment'))
        self.valueCoding = Coding(self.__add('valueCoding'))
        self.valueQuantity = Quantity(self.__add('valueQuantity'))
        self.valueReference = Reference(self.__add('valueReference'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.item:
            self.__json['item'] = self.__get_list(self.item)
        if self.valueBoolean:
            self.__json['valueBoolean'] = self.valueBoolean.json
        if self.valueDecimal:
            self.__json['valueDecimal'] = self.valueDecimal
        if self.valueInteger:
            self.__json['valueInteger'] = self.valueInteger
        if self.valueDate:
            self.__json['valueDate'] = self.valueDate.json
        if self.valueDateTime:
            self.__json['valueDateTime'] = self.valueDateTime.json
        if self.valueInstant:
            self.__json['valueInstant'] = self.valueInstant
        if self.valueTime:
            self.__json['valueTime'] = self.valueTime.json
        if self.valueString:
            self.__json['valueString'] = self.valueString
        if self.valueUri:
            self.__json['valueUri'] = self.valueUri
        if self.valueAttachment:
            self.__json['valueAttachment'] = self.valueAttachment.json
        if self.valueCoding:
            self.__json['valueCoding'] = self.valueCoding.json
        if self.valueQuantity:
            self.__json['valueQuantity'] = self.valueQuantity.json
        if self.valueReference:
            self.__json['valueReference'] = self.valueReference.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR QuestionnaireResponseAnswerComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class QuestionnaireResponseItemComponent(BackboneElement):
    '''
    FHIR QuestionnaireResponseItemComponent resource

     Corresponds to a group or question item from the original questionnaire.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'answer':
                    list_to_add.append(QuestionnaireResponseAnswerComponent(obj))
                elif key == 'item':
                    list_to_add.append(QuestionnaireResponseItemComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR QuestionnaireResponseItemComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(QuestionnaireResponseItemComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR QuestionnaireResponseItemComponent constructor
        '''
        logging.info("FHIR QuestionnaireResponseItemComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.linkId = self.__add('linkId')
        self.text = self.__add('text')
        self.subject = Reference(self.__add('subject'))
        if 'answer' in self.__json:
            if isinstance(self.__json['answer'], list):
                self.answer = self.__add_list('answer')
            else:
                self.answer = QuestionnaireResponseAnswerComponent(self.__add('answer'))
        else:
            self.answer = None
        if 'item' in self.__json:
            if isinstance(self.__json['item'], list):
                self.item = self.__add_list('item')
            else:
                self.item = QuestionnaireResponseItemComponent(self.__add('item'))
        else:
            self.item = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.linkId:
            self.__json['linkId'] = self.linkId
        if self.text:
            self.__json['text'] = self.text
        if self.subject:
            self.__json['subject'] = self.subject.json
        if self.answer:
            self.__json['answer'] = self.__get_list(self.answer)
        if self.item:
            self.__json['item'] = self.__get_list(self.item)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR QuestionnaireResponseItemComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class QuestionnaireResponse(DomainResource):
    '''
    FHIR QuestionnaireResponse resource

     A structured set of questions and their answers. The questions are ordered and grouped into coherent subsets, corresponding to the structure of the grouping of the underlying questions. If the element is present, it must have either a @value, an @id, or extensions

    identifier ->  A business identifier assigned to a particular completed (or partially completed) questionnaire.
    questionnaire ->  Indicates the Questionnaire resource that defines the form for which answers are being provided.
    status ->  The lifecycle status of the questionnaire response as a whole. 
    subject ->  The subject of the questionnaire response.  This could be a patient, organization, practitioner, device, etc.  This is who/what the answers apply to, but is not necessarily the source of information.
    author ->  Person who received the answers to the questions in the QuestionnaireResponse and recorded them in the system.
    authored ->  The date and/or time that this version of the questionnaire response was authored.
    source ->  The person who answered the questions about the subject.
    encounter ->  Encounter during which this set of questionnaire response were collected. When there were multiple encounters, this is the one considered most relevant to the context of the answers.
    item ->  Corresponds to a group or question item from the original questionnaire.

    # Search parameters
        QuestionnaireResponse.search.author
        QuestionnaireResponse.search.authored
        QuestionnaireResponse.search.encounter
        QuestionnaireResponse.search.patient
        QuestionnaireResponse.search.questionnaire
        QuestionnaireResponse.search.source
        QuestionnaireResponse.search.status
        QuestionnaireResponse.search.subject
    '''
    # search parameters
    par = [("author", "reference"),
           ("authored", "date"),
           ("encounter", "reference"),
           ("patient", "reference"),
           ("questionnaire", "reference"),
           ("source", "reference"),
           ("status", "token"),
           ("subject", "reference")]

    search = Params(par, "QuestionnaireResponse")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'item':
                    list_to_add.append(QuestionnaireResponseItemComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR QuestionnaireResponse __new__
        '''
        if json == None:
            return None
        else:
            return super(QuestionnaireResponse, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR QuestionnaireResponse constructor
        '''
        logging.info("FHIR QuestionnaireResponse: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "QuestionnaireResponse"
        self.identifier = Identifier(self.__add('identifier'))
        self.questionnaire = Reference(self.__add('questionnaire'))
        self.status = self.__add('status')
        self.subject = Reference(self.__add('subject'))
        self.author = Reference(self.__add('author'))
        self.authored = DateTime(self.__add('authored'))
        self.source = Reference(self.__add('source'))
        self.encounter = Reference(self.__add('encounter'))
        if 'item' in self.__json:
            if isinstance(self.__json['item'], list):
                self.item = self.__add_list('item')
            else:
                self.item = QuestionnaireResponseItemComponent(self.__add('item'))
        else:
            self.item = None


        # Parent Resource Init
        super(QuestionnaireResponse, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identifier:
            self.__json['identifier'] = self.identifier.json
        if self.questionnaire:
            self.__json['questionnaire'] = self.questionnaire.json
        if self.status:
            self.__json['status'] = self.status
        if self.subject:
            self.__json['subject'] = self.subject.json
        if self.author:
            self.__json['author'] = self.author.json
        if self.authored:
            self.__json['authored'] = self.authored.json
        if self.source:
            self.__json['source'] = self.source.json
        if self.encounter:
            self.__json['encounter'] = self.encounter.json
        if self.item:
            self.__json['item'] = self.__get_list(self.item)

        # Add json attributes
        self.__json = super(QuestionnaireResponse, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR QuestionnaireResponse string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ReferralRequest(DomainResource):
    '''
    FHIR ReferralRequest resource

     Used to record and send details about a request for referral service or transfer of a patient to the care of another provider or provider organization. If the element is present, it must have either a @value, an @id, or extensions

    identifier ->  Business identifier that uniquely identifies the referral/care transfer request instance.
    basedOn ->  Indicates any plans, proposals or orders that this request is intended to satisfy - in whole or in part.
    parent ->  The business identifier of the logical "grouping" request/order that this referral is a part of.
    status ->  The status of the authorization/intention reflected by the referral request record. 
    category ->  Distinguishes the "level" of authorization/demand implicit in this request. 
    type ->  An indication of the type of referral (or where applicable the type of transfer of care) request.
    priority ->  An indication of the urgency of referral (or where applicable the type of transfer of care) request.
    patient ->  The patient who is the subject of a referral or transfer of care request.
    context ->  The encounter at which the request for referral or transfer of care is initiated.
    fulfillmentTime ->  The period of time within which the services identified in the referral/transfer of care is specified or required to occur.
    authored ->  Date/DateTime of creation for draft requests and date of activation for active requests.
    requester ->  The healthcare provider or provider organization who/which initiated the referral/transfer of care request. Can also be  Patient (a self referral).
    specialty ->  Indication of the clinical domain or discipline to which the referral or transfer of care request is sent.  For example: Cardiology Gastroenterology Diabetology.
    recipient ->  The healthcare provider(s) or provider organization(s) who/which is to receive the referral/transfer of care request.
    reason ->  Description of clinical condition indicating why referral/transfer of care is requested.  For example:  Pathological Anomalies, Disabled (physical or mental),  Behavioral Management.
    description ->  The reason element gives a short description of why the referral is being made, the description expands on this to support a more complete clinical summary.
    serviceRequested ->  The service(s) that is/are requested to be provided to the patient.  For example: cardiac pacemaker insertion.
    supportingInformation ->  Any additional (administrative, financial or clinical) information required to support request for referral or transfer of care.  For example: Presenting problems/chief complaints Medical History Family History Alerts Allergy/Intolerance and Adverse Reactions Medications Observations/Assessments (may include cognitive and fundtional assessments) Diagnostic Reports Care Plan.

    # Search parameters
        ReferralRequest.search.date
        ReferralRequest.search.patient
        ReferralRequest.search.priority
        ReferralRequest.search.recipient
        ReferralRequest.search.requester
        ReferralRequest.search.specialty
        ReferralRequest.search.status
        ReferralRequest.search.type
    '''
    # search parameters
    par = [("date", "date"),
           ("patient", "reference"),
           ("priority", "token"),
           ("recipient", "reference"),
           ("requester", "reference"),
           ("specialty", "token"),
           ("status", "token"),
           ("type", "token")]

    search = Params(par, "ReferralRequest")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'identifier':
                    list_to_add.append(Identifier(obj))
                elif key == 'basedOn':
                    list_to_add.append(Reference(obj))
                elif key == 'recipient':
                    list_to_add.append(Reference(obj))
                elif key == 'serviceRequested':
                    list_to_add.append(CodeableConcept(obj))
                elif key == 'supportingInformation':
                    list_to_add.append(Reference(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ReferralRequest __new__
        '''
        if json == None:
            return None
        else:
            return super(ReferralRequest, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ReferralRequest constructor
        '''
        logging.info("FHIR ReferralRequest: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "ReferralRequest"
        if 'identifier' in self.__json:
            if isinstance(self.__json['identifier'], list):
                self.identifier = self.__add_list('identifier')
            else:
                self.identifier = Identifier(self.__add('identifier'))
        else:
            self.identifier = None
        if 'basedOn' in self.__json:
            if isinstance(self.__json['basedOn'], list):
                self.basedOn = self.__add_list('basedOn')
            else:
                self.basedOn = Reference(self.__add('basedOn'))
        else:
            self.basedOn = None
        self.parent = Identifier(self.__add('parent'))
        self.status = self.__add('status')
        self.category = self.__add('category')
        self.type = CodeableConcept(self.__add('type'))
        self.priority = CodeableConcept(self.__add('priority'))
        self.patient = Reference(self.__add('patient'))
        self.context = Reference(self.__add('context'))
        self.fulfillmentTime = Period(self.__add('fulfillmentTime'))
        self.authored = DateTime(self.__add('authored'))
        self.requester = Reference(self.__add('requester'))
        self.specialty = CodeableConcept(self.__add('specialty'))
        if 'recipient' in self.__json:
            if isinstance(self.__json['recipient'], list):
                self.recipient = self.__add_list('recipient')
            else:
                self.recipient = Reference(self.__add('recipient'))
        else:
            self.recipient = None
        self.reason = CodeableConcept(self.__add('reason'))
        self.description = self.__add('description')
        if 'serviceRequested' in self.__json:
            if isinstance(self.__json['serviceRequested'], list):
                self.serviceRequested = self.__add_list('serviceRequested')
            else:
                self.serviceRequested = CodeableConcept(self.__add('serviceRequested'))
        else:
            self.serviceRequested = None
        if 'supportingInformation' in self.__json:
            if isinstance(self.__json['supportingInformation'], list):
                self.supportingInformation = self.__add_list('supportingInformation')
            else:
                self.supportingInformation = Reference(self.__add('supportingInformation'))
        else:
            self.supportingInformation = None


        # Parent Resource Init
        super(ReferralRequest, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identifier:
            self.__json['identifier'] = self.__get_list(self.identifier)
        if self.basedOn:
            self.__json['basedOn'] = self.__get_list(self.basedOn)
        if self.parent:
            self.__json['parent'] = self.parent.json
        if self.status:
            self.__json['status'] = self.status
        if self.category:
            self.__json['category'] = self.category
        if self.type:
            self.__json['type'] = self.type.json
        if self.priority:
            self.__json['priority'] = self.priority.json
        if self.patient:
            self.__json['patient'] = self.patient.json
        if self.context:
            self.__json['context'] = self.context.json
        if self.fulfillmentTime:
            self.__json['fulfillmentTime'] = self.fulfillmentTime.json
        if self.authored:
            self.__json['authored'] = self.authored.json
        if self.requester:
            self.__json['requester'] = self.requester.json
        if self.specialty:
            self.__json['specialty'] = self.specialty.json
        if self.recipient:
            self.__json['recipient'] = self.__get_list(self.recipient)
        if self.reason:
            self.__json['reason'] = self.reason.json
        if self.description:
            self.__json['description'] = self.description
        if self.serviceRequested:
            self.__json['serviceRequested'] = self.__get_list(self.serviceRequested)
        if self.supportingInformation:
            self.__json['supportingInformation'] = self.__get_list(self.supportingInformation)

        # Add json attributes
        self.__json = super(ReferralRequest, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR ReferralRequest string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class RelatedPerson(DomainResource):
    '''
    FHIR RelatedPerson resource

     Information about a person that is involved in the care for a patient, but who is not the target of healthcare, nor has a formal responsibility in the care process. If the element is present, it must have either a @value, an @id, or extensions

    identifier ->  Identifier for a person within a particular scope.
    patient ->  The patient this person is related to.
    relationship ->  The nature of the relationship between a patient and the related person.
    name ->  A name associated with the person.
    telecom ->  A contact detail for the person, e.g. a telephone number or an email address.
    gender ->  Administrative Gender - the gender that the person is considered to have for administration and record keeping purposes. 
    birthDate ->  The date on which the related person was born.
    address ->  Address where the related person can be contacted or visited.
    photo ->  Image of the person.
    period ->  The period of time that this relationship is considered to be valid. If there are no dates defined, then the interval is unknown.

    # Search parameters
        RelatedPerson.search.address
        RelatedPerson.search.address-city
        RelatedPerson.search.address-country
        RelatedPerson.search.address-postalcode
        RelatedPerson.search.address-state
        RelatedPerson.search.address-use
        RelatedPerson.search.birthdate
        RelatedPerson.search.email
        RelatedPerson.search.gender
        RelatedPerson.search.identifier
        RelatedPerson.search.name
        RelatedPerson.search.patient
        RelatedPerson.search.phone
        RelatedPerson.search.phonetic
        RelatedPerson.search.telecom
    '''
    # search parameters
    par = [("address", "string"),
           ("address-city", "string"),
           ("address-country", "string"),
           ("address-postalcode", "string"),
           ("address-state", "string"),
           ("address-use", "token"),
           ("birthdate", "date"),
           ("email", "token"),
           ("gender", "token"),
           ("identifier", "token"),
           ("name", "string"),
           ("patient", "reference"),
           ("phone", "token"),
           ("phonetic", "string"),
           ("telecom", "token")]

    search = Params(par, "RelatedPerson")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'identifier':
                    list_to_add.append(Identifier(obj))
                elif key == 'telecom':
                    list_to_add.append(ContactPoint(obj))
                elif key == 'address':
                    list_to_add.append(Address(obj))
                elif key == 'photo':
                    list_to_add.append(Attachment(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR RelatedPerson __new__
        '''
        if json == None:
            return None
        else:
            return super(RelatedPerson, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR RelatedPerson constructor
        '''
        logging.info("FHIR RelatedPerson: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "RelatedPerson"
        if 'identifier' in self.__json:
            if isinstance(self.__json['identifier'], list):
                self.identifier = self.__add_list('identifier')
            else:
                self.identifier = Identifier(self.__add('identifier'))
        else:
            self.identifier = None
        self.patient = Reference(self.__add('patient'))
        self.relationship = CodeableConcept(self.__add('relationship'))
        self.name = HumanName(self.__add('name'))
        if 'telecom' in self.__json:
            if isinstance(self.__json['telecom'], list):
                self.telecom = self.__add_list('telecom')
            else:
                self.telecom = ContactPoint(self.__add('telecom'))
        else:
            self.telecom = None
        self.gender = self.__add('gender')
        self.birthDate = Date(self.__add('birthDate'))
        if 'address' in self.__json:
            if isinstance(self.__json['address'], list):
                self.address = self.__add_list('address')
            else:
                self.address = Address(self.__add('address'))
        else:
            self.address = None
        if 'photo' in self.__json:
            if isinstance(self.__json['photo'], list):
                self.photo = self.__add_list('photo')
            else:
                self.photo = Attachment(self.__add('photo'))
        else:
            self.photo = None
        self.period = Period(self.__add('period'))


        # Parent Resource Init
        super(RelatedPerson, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identifier:
            self.__json['identifier'] = self.__get_list(self.identifier)
        if self.patient:
            self.__json['patient'] = self.patient.json
        if self.relationship:
            self.__json['relationship'] = self.relationship.json
        if self.name:
            self.__json['name'] = self.name.json
        if self.telecom:
            self.__json['telecom'] = self.__get_list(self.telecom)
        if self.gender:
            self.__json['gender'] = self.gender
        if self.birthDate:
            self.__json['birthDate'] = self.birthDate.json
        if self.address:
            self.__json['address'] = self.__get_list(self.address)
        if self.photo:
            self.__json['photo'] = self.__get_list(self.photo)
        if self.period:
            self.__json['period'] = self.period.json

        # Add json attributes
        self.__json = super(RelatedPerson, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR RelatedPerson string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class RiskAssessmentPredictionComponent(BackboneElement):
    '''
    FHIR RiskAssessmentPredictionComponent resource

     Describes the expected outcome for the subject.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR RiskAssessmentPredictionComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(RiskAssessmentPredictionComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR RiskAssessmentPredictionComponent constructor
        '''
        logging.info("FHIR RiskAssessmentPredictionComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.outcome = CodeableConcept(self.__add('outcome'))
        self.relativeRisk = self.__add('relativeRisk')
        self.rationale = self.__add('rationale')
        self.probabilityDecimal = self.__add('probabilityDecimal')
        self.probabilityRange = Range(self.__add('probabilityRange'))
        self.probabilityCodeableConcept = CodeableConcept(self.__add('probabilityCodeableConcept'))
        self.whenPeriod = Period(self.__add('whenPeriod'))
        self.whenRange = Range(self.__add('whenRange'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.outcome:
            self.__json['outcome'] = self.outcome.json
        if self.relativeRisk:
            self.__json['relativeRisk'] = self.relativeRisk
        if self.rationale:
            self.__json['rationale'] = self.rationale
        if self.probabilityDecimal:
            self.__json['probabilityDecimal'] = self.probabilityDecimal
        if self.probabilityRange:
            self.__json['probabilityRange'] = self.probabilityRange.json
        if self.probabilityCodeableConcept:
            self.__json['probabilityCodeableConcept'] = self.probabilityCodeableConcept.json
        if self.whenPeriod:
            self.__json['whenPeriod'] = self.whenPeriod.json
        if self.whenRange:
            self.__json['whenRange'] = self.whenRange.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR RiskAssessmentPredictionComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class RiskAssessment(DomainResource):
    '''
    FHIR RiskAssessment resource

     An assessment of the likely outcome(s) for a patient or other subject as well as the likelihood of each outcome. If the element is present, it must have either a @value, an @id, or extensions

    subject ->  The patient or group the risk assessment applies to.
    date ->  The date (and possibly time) the risk assessment was performed.
    condition ->  For assessments or prognosis specific to a particular condition, indicates the condition being assessed.
    encounter ->  The encounter where the assessment was performed.
    performer ->  The provider or software application that performed the assessment.
    identifier ->  Business identifier assigned to the risk assessment.
    method ->  The algorithm, process or mechanism used to evaluate the risk.
    basis ->  Indicates the source data considered as part of the assessment (FamilyHistory, Observations, Procedures, Conditions, etc.).
    prediction ->  Describes the expected outcome for the subject.
    mitigation ->  A description of the steps that might be taken to reduce the identified risk(s).

    # Search parameters
        RiskAssessment.search.condition
        RiskAssessment.search.date
        RiskAssessment.search.encounter
        RiskAssessment.search.identifier
        RiskAssessment.search.method
        RiskAssessment.search.patient
        RiskAssessment.search.performer
        RiskAssessment.search.subject
    '''
    # search parameters
    par = [("condition", "reference"),
           ("date", "date"),
           ("encounter", "reference"),
           ("identifier", "token"),
           ("method", "token"),
           ("patient", "reference"),
           ("performer", "reference"),
           ("subject", "reference")]

    search = Params(par, "RiskAssessment")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'basis':
                    list_to_add.append(Reference(obj))
                elif key == 'prediction':
                    list_to_add.append(RiskAssessmentPredictionComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR RiskAssessment __new__
        '''
        if json == None:
            return None
        else:
            return super(RiskAssessment, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR RiskAssessment constructor
        '''
        logging.info("FHIR RiskAssessment: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "RiskAssessment"
        self.subject = Reference(self.__add('subject'))
        self.date = DateTime(self.__add('date'))
        self.condition = Reference(self.__add('condition'))
        self.encounter = Reference(self.__add('encounter'))
        self.performer = Reference(self.__add('performer'))
        self.identifier = Identifier(self.__add('identifier'))
        self.method = CodeableConcept(self.__add('method'))
        if 'basis' in self.__json:
            if isinstance(self.__json['basis'], list):
                self.basis = self.__add_list('basis')
            else:
                self.basis = Reference(self.__add('basis'))
        else:
            self.basis = None
        if 'prediction' in self.__json:
            if isinstance(self.__json['prediction'], list):
                self.prediction = self.__add_list('prediction')
            else:
                self.prediction = RiskAssessmentPredictionComponent(self.__add('prediction'))
        else:
            self.prediction = None
        self.mitigation = self.__add('mitigation')


        # Parent Resource Init
        super(RiskAssessment, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.subject:
            self.__json['subject'] = self.subject.json
        if self.date:
            self.__json['date'] = self.date.json
        if self.condition:
            self.__json['condition'] = self.condition.json
        if self.encounter:
            self.__json['encounter'] = self.encounter.json
        if self.performer:
            self.__json['performer'] = self.performer.json
        if self.identifier:
            self.__json['identifier'] = self.identifier.json
        if self.method:
            self.__json['method'] = self.method.json
        if self.basis:
            self.__json['basis'] = self.__get_list(self.basis)
        if self.prediction:
            self.__json['prediction'] = self.__get_list(self.prediction)
        if self.mitigation:
            self.__json['mitigation'] = self.mitigation

        # Add json attributes
        self.__json = super(RiskAssessment, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR RiskAssessment string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class Schedule(DomainResource):
    '''
    FHIR Schedule resource

     A container for slot(s) of time that may be available for booking appointments. If the element is present, it must have either a @value, an @id, or extensions

    identifier ->  External Ids for this item.
    serviceCategory ->  A broad categorisation of the service that is to be performed during this appointment.
    serviceType ->  The specific service that is to be performed during this appointment.
    specialty ->  The specialty of a practitioner that would be required to perform the service requested in this appointment.
    actor ->  The resource this Schedule resource is providing availability information for. These are expected to usually be one of HealthcareService, Location, Practitioner, Device, Patient or RelatedPerson.
    planningHorizon ->  The period of time that the slots that are attached to this Schedule resource cover (even if none exist). These  cover the amount of time that an organization's planning horizon; the interval for which they are currently accepting appointments. This does not define a "template" for planning outside these dates.
    comment ->  Comments on the availability to describe any extended information. Such as custom constraints on the slot(s) that may be associated.

    # Search parameters
        Schedule.search.actor
        Schedule.search.date
        Schedule.search.identifier
        Schedule.search.type
    '''
    # search parameters
    par = [("actor", "reference"),
           ("date", "date"),
           ("identifier", "token"),
           ("type", "token")]

    search = Params(par, "Schedule")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'identifier':
                    list_to_add.append(Identifier(obj))
                elif key == 'serviceType':
                    list_to_add.append(CodeableConcept(obj))
                elif key == 'specialty':
                    list_to_add.append(CodeableConcept(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR Schedule __new__
        '''
        if json == None:
            return None
        else:
            return super(Schedule, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR Schedule constructor
        '''
        logging.info("FHIR Schedule: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "Schedule"
        if 'identifier' in self.__json:
            if isinstance(self.__json['identifier'], list):
                self.identifier = self.__add_list('identifier')
            else:
                self.identifier = Identifier(self.__add('identifier'))
        else:
            self.identifier = None
        self.serviceCategory = CodeableConcept(self.__add('serviceCategory'))
        if 'serviceType' in self.__json:
            if isinstance(self.__json['serviceType'], list):
                self.serviceType = self.__add_list('serviceType')
            else:
                self.serviceType = CodeableConcept(self.__add('serviceType'))
        else:
            self.serviceType = None
        if 'specialty' in self.__json:
            if isinstance(self.__json['specialty'], list):
                self.specialty = self.__add_list('specialty')
            else:
                self.specialty = CodeableConcept(self.__add('specialty'))
        else:
            self.specialty = None
        self.actor = Reference(self.__add('actor'))
        self.planningHorizon = Period(self.__add('planningHorizon'))
        self.comment = self.__add('comment')


        # Parent Resource Init
        super(Schedule, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identifier:
            self.__json['identifier'] = self.__get_list(self.identifier)
        if self.serviceCategory:
            self.__json['serviceCategory'] = self.serviceCategory.json
        if self.serviceType:
            self.__json['serviceType'] = self.__get_list(self.serviceType)
        if self.specialty:
            self.__json['specialty'] = self.__get_list(self.specialty)
        if self.actor:
            self.__json['actor'] = self.actor.json
        if self.planningHorizon:
            self.__json['planningHorizon'] = self.planningHorizon.json
        if self.comment:
            self.__json['comment'] = self.comment

        # Add json attributes
        self.__json = super(Schedule, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR Schedule string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class SearchParameterContactComponent(BackboneElement):
    '''
    FHIR SearchParameterContactComponent resource

     Contacts to assist a user in finding and communicating with the publisher.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'telecom':
                    list_to_add.append(ContactPoint(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR SearchParameterContactComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(SearchParameterContactComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR SearchParameterContactComponent constructor
        '''
        logging.info("FHIR SearchParameterContactComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.name = self.__add('name')
        if 'telecom' in self.__json:
            if isinstance(self.__json['telecom'], list):
                self.telecom = self.__add_list('telecom')
            else:
                self.telecom = ContactPoint(self.__add('telecom'))
        else:
            self.telecom = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.name:
            self.__json['name'] = self.name
        if self.telecom:
            self.__json['telecom'] = self.__get_list(self.telecom)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR SearchParameterContactComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class SearchParameter(DomainResource):
    '''
    FHIR SearchParameter resource

     A search parameter that defines a named search item that can be used to search/filter on a resource. If the element is present, it must have either a @value, an @id, or extensions

    url ->  An absolute URL that is used to identify this search parameter when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this search parameter is (or will be) published.
    name ->  A free text natural language name identifying the search parameter.
    status ->  The status of this search parameter definition. 
    experimental ->  A flag to indicate that this search parameter definition is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
    date ->  The date  (and optionally time) when the search parameter definition was published. The date must change when the business version changes, if it does, and it must change if the status code changes. In addition, it should change when the substantive content of the search parameter changes.
    publisher ->  The name of the individual or organization that published the search parameter.
    contact ->  Contacts to assist a user in finding and communicating with the publisher.
    useContext ->  The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching of search parameters.
    requirements ->  The Scope and Usage that this search parameter was created to meet.
    code ->  The code used in the URL or the parameter name in a parameters resource for this search parameter.
    base ->  The base resource type that this search parameter refers to.
    type ->  The type of value a search parameter refers to, and how the content is interpreted. 
    description ->  A description of the search parameters and how it used.
    expression ->  A FluentPath expression that returns a set of elements for the search parameter.
    xpath ->  An XPath expression that returns a set of elements for the search parameter.
    xpathUsage ->  How the search parameter relates to the set of elements returned by evaluating the xpath query. 
    target ->  Types of resource (if a resource is referenced).

    # Search parameters
        SearchParameter.search.base
        SearchParameter.search.code
        SearchParameter.search.description
        SearchParameter.search.name
        SearchParameter.search.target
        SearchParameter.search.type
        SearchParameter.search.url
    '''
    # search parameters
    par = [("base", "token"),
           ("code", "token"),
           ("description", "string"),
           ("name", "string"),
           ("target", "token"),
           ("type", "token"),
           ("url", "uri")]

    search = Params(par, "SearchParameter")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'contact':
                    list_to_add.append(SearchParameterContactComponent(obj))
                elif key == 'useContext':
                    list_to_add.append(CodeableConcept(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR SearchParameter __new__
        '''
        if json == None:
            return None
        else:
            return super(SearchParameter, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR SearchParameter constructor
        '''
        logging.info("FHIR SearchParameter: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "SearchParameter"
        self.url = self.__add('url')
        self.name = self.__add('name')
        self.status = self.__add('status')
        self.experimental = Boolean(self.__add('experimental'))
        self.date = DateTime(self.__add('date'))
        self.publisher = self.__add('publisher')
        if 'contact' in self.__json:
            if isinstance(self.__json['contact'], list):
                self.contact = self.__add_list('contact')
            else:
                self.contact = SearchParameterContactComponent(self.__add('contact'))
        else:
            self.contact = None
        if 'useContext' in self.__json:
            if isinstance(self.__json['useContext'], list):
                self.useContext = self.__add_list('useContext')
            else:
                self.useContext = CodeableConcept(self.__add('useContext'))
        else:
            self.useContext = None
        self.requirements = self.__add('requirements')
        self.code = self.__add('code')
        self.base = self.__add('base')
        self.type = self.__add('type')
        self.description = self.__add('description')
        self.expression = self.__add('expression')
        self.xpath = self.__add('xpath')
        self.xpathUsage = self.__add('xpathUsage')
        if 'target' in self.__json:
            if isinstance(self.__json['target'], list):
                self.target = self.__add_list('target')
            else:
                self.target = self.__add('target')
        else:
            self.target = None


        # Parent Resource Init
        super(SearchParameter, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.url:
            self.__json['url'] = self.url
        if self.name:
            self.__json['name'] = self.name
        if self.status:
            self.__json['status'] = self.status
        if self.experimental:
            self.__json['experimental'] = self.experimental.json
        if self.date:
            self.__json['date'] = self.date.json
        if self.publisher:
            self.__json['publisher'] = self.publisher
        if self.contact:
            self.__json['contact'] = self.__get_list(self.contact)
        if self.useContext:
            self.__json['useContext'] = self.__get_list(self.useContext)
        if self.requirements:
            self.__json['requirements'] = self.requirements
        if self.code:
            self.__json['code'] = self.code
        if self.base:
            self.__json['base'] = self.base
        if self.type:
            self.__json['type'] = self.type
        if self.description:
            self.__json['description'] = self.description
        if self.expression:
            self.__json['expression'] = self.expression
        if self.xpath:
            self.__json['xpath'] = self.xpath
        if self.xpathUsage:
            self.__json['xpathUsage'] = self.xpathUsage
        if self.target:
            self.__json['target'] = self.__get_list(self.target)

        # Add json attributes
        self.__json = super(SearchParameter, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR SearchParameter string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class SequenceReferenceSeqComponent(BackboneElement):
    '''
    FHIR SequenceReferenceSeqComponent resource

     Reference Sequence. It can be described in two ways. One is provide the unique identifier of reference sequence submitted to NCBI. The start and end position of window on reference sequence should be defined.  The other way is using  genome build, chromosome number,and also the start, end position of window (this method is specifically for DNA reference sequence) .

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR SequenceReferenceSeqComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(SequenceReferenceSeqComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR SequenceReferenceSeqComponent constructor
        '''
        logging.info("FHIR SequenceReferenceSeqComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.chromosome = CodeableConcept(self.__add('chromosome'))
        self.genomeBuild = self.__add('genomeBuild')
        self.referenceSeqId = CodeableConcept(self.__add('referenceSeqId'))
        self.referenceSeqPointer = Reference(self.__add('referenceSeqPointer'))
        self.referenceSeqString = self.__add('referenceSeqString')
        self.windowStart = self.__add('windowStart')
        self.windowEnd = self.__add('windowEnd')



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.chromosome:
            self.__json['chromosome'] = self.chromosome.json
        if self.genomeBuild:
            self.__json['genomeBuild'] = self.genomeBuild
        if self.referenceSeqId:
            self.__json['referenceSeqId'] = self.referenceSeqId.json
        if self.referenceSeqPointer:
            self.__json['referenceSeqPointer'] = self.referenceSeqPointer.json
        if self.referenceSeqString:
            self.__json['referenceSeqString'] = self.referenceSeqString
        if self.windowStart:
            self.__json['windowStart'] = self.windowStart
        if self.windowEnd:
            self.__json['windowEnd'] = self.windowEnd


        return self.__json
        
    def __repr__(self):
        '''
        FHIR SequenceReferenceSeqComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class SequenceVariationComponent(BackboneElement):
    '''
    FHIR SequenceVariationComponent resource

     Variation info in this sequence.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR SequenceVariationComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(SequenceVariationComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR SequenceVariationComponent constructor
        '''
        logging.info("FHIR SequenceVariationComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.start = self.__add('start')
        self.end = self.__add('end')
        self.observedAllele = self.__add('observedAllele')
        self.referenceAllele = self.__add('referenceAllele')
        self.cigar = self.__add('cigar')



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.start:
            self.__json['start'] = self.start
        if self.end:
            self.__json['end'] = self.end
        if self.observedAllele:
            self.__json['observedAllele'] = self.observedAllele
        if self.referenceAllele:
            self.__json['referenceAllele'] = self.referenceAllele
        if self.cigar:
            self.__json['cigar'] = self.cigar


        return self.__json
        
    def __repr__(self):
        '''
        FHIR SequenceVariationComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class SequenceQualityComponent(BackboneElement):
    '''
    FHIR SequenceQualityComponent resource

     Quality for sequence quality vary by platform reflecting differences in sequencing chemistry and digital processing.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR SequenceQualityComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(SequenceQualityComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR SequenceQualityComponent constructor
        '''
        logging.info("FHIR SequenceQualityComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.start = self.__add('start')
        self.end = self.__add('end')
        self.score = Quantity(self.__add('score'))
        self.method = self.__add('method')



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.start:
            self.__json['start'] = self.start
        if self.end:
            self.__json['end'] = self.end
        if self.score:
            self.__json['score'] = self.score.json
        if self.method:
            self.__json['method'] = self.method


        return self.__json
        
    def __repr__(self):
        '''
        FHIR SequenceQualityComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class SequenceRepositoryComponent(BackboneElement):
    '''
    FHIR SequenceRepositoryComponent resource

     Configurations of the external repository.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR SequenceRepositoryComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(SequenceRepositoryComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR SequenceRepositoryComponent constructor
        '''
        logging.info("FHIR SequenceRepositoryComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.url = self.__add('url')
        self.name = self.__add('name')
        self.variantId = self.__add('variantId')
        self.readId = self.__add('readId')



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.url:
            self.__json['url'] = self.url
        if self.name:
            self.__json['name'] = self.name
        if self.variantId:
            self.__json['variantId'] = self.variantId
        if self.readId:
            self.__json['readId'] = self.readId


        return self.__json
        
    def __repr__(self):
        '''
        FHIR SequenceRepositoryComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class SequenceOuterComponent(BackboneElement):
    '''
    FHIR SequenceOuterComponent resource

     Structural variant outer.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR SequenceOuterComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(SequenceOuterComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR SequenceOuterComponent constructor
        '''
        logging.info("FHIR SequenceOuterComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType


        return self.__json
        
    def __repr__(self):
        '''
        FHIR SequenceOuterComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class SequenceInnerComponent(BackboneElement):
    '''
    FHIR SequenceInnerComponent resource

     Structural variant inner.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR SequenceInnerComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(SequenceInnerComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR SequenceInnerComponent constructor
        '''
        logging.info("FHIR SequenceInnerComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType


        return self.__json
        
    def __repr__(self):
        '''
        FHIR SequenceInnerComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class SequenceStructureVariationComponent(BackboneElement):
    '''
    FHIR SequenceStructureVariationComponent resource

     Structural variant.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR SequenceStructureVariationComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(SequenceStructureVariationComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR SequenceStructureVariationComponent constructor
        '''
        logging.info("FHIR SequenceStructureVariationComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.precisionOfBoundaries = self.__add('precisionOfBoundaries')
        self.reportedaCGHRatio = self.__add('reportedaCGHRatio')
        self.length = self.__add('length')
        self.outer = SequenceOuterComponent(self.__add('outer'))
        self.inner = SequenceInnerComponent(self.__add('inner'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.precisionOfBoundaries:
            self.__json['precisionOfBoundaries'] = self.precisionOfBoundaries
        if self.reportedaCGHRatio:
            self.__json['reportedaCGHRatio'] = self.reportedaCGHRatio
        if self.length:
            self.__json['length'] = self.length
        if self.outer:
            self.__json['outer'] = self.outer.json
        if self.inner:
            self.__json['inner'] = self.inner.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR SequenceStructureVariationComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class Sequence(DomainResource):
    '''
    FHIR Sequence resource

     Variation and Sequence data. If the element is present, it must have either a @value, an @id, or extensions

    type ->  Amino acid / cDNA transcript / RNA variation. 
    patient ->  The patient, or group of patients whose sequencing results are described by this resource.
    specimen ->  Specimen used for sequencing.
    device ->  The method for sequencing, for example, chip information.
    quantity ->  Quantity of the sequence.
    species ->  The organism from which sample of the sequence was extracted. Supporting tests of human, viruses, and bacteria.
    referenceSeq ->  Reference Sequence. It can be described in two ways. One is provide the unique identifier of reference sequence submitted to NCBI. The start and end position of window on reference sequence should be defined.  The other way is using  genome build, chromosome number,and also the start, end position of window (this method is specifically for DNA reference sequence) .
    variation ->  Variation info in this sequence.
    quality ->  Quality for sequence quality vary by platform reflecting differences in sequencing chemistry and digital processing.
    allelicState ->  The level of occurrence of a single DNA Sequence Variation within a set of chromosomes. Heterozygous indicates the DNA Sequence Variation is only present in one of the two genes contained in homologous chromosomes. Homozygous indicates the DNA Sequence Variation is present in both genes contained in homologous chromosomes. Hemizygous indicates the DNA Sequence Variation exists in the only single copy of a gene in a non- homologous chromosome (the male X and Y chromosome are non-homologous). Hemiplasmic indicates that the DNA Sequence Variation is present in some but not all of the copies of mitochondrial DNA. Homoplasmic indicates that the DNA Sequence Variation is present in all of the copies of mitochondrial DNA.
    allelicFrequency ->  Allele frequencies.
    copyNumberEvent ->  Values: amplificaiton / deletion / LOH.
    readCoverage ->  Coverage (read depth or depth) is the average number of reads representing a given nucleotide in the reconstructed sequence.
    repository ->  Configurations of the external repository.
    pointer ->  Pointer to next atomic sequence which at most contains one variation.
    observedSeq ->  Observed Sequence.
    observation ->  Analysis of the sequence.
    structureVariation ->  Structural variant.

    
    '''
    

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'referenceSeq':
                    list_to_add.append(SequenceReferenceSeqComponent(obj))
                elif key == 'quality':
                    list_to_add.append(SequenceQualityComponent(obj))
                elif key == 'repository':
                    list_to_add.append(SequenceRepositoryComponent(obj))
                elif key == 'pointer':
                    list_to_add.append(Reference(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR Sequence __new__
        '''
        if json == None:
            return None
        else:
            return super(Sequence, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR Sequence constructor
        '''
        logging.info("FHIR Sequence: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "Sequence"
        self.type = self.__add('type')
        self.patient = Reference(self.__add('patient'))
        self.specimen = Reference(self.__add('specimen'))
        self.device = Reference(self.__add('device'))
        self.quantity = Quantity(self.__add('quantity'))
        self.species = CodeableConcept(self.__add('species'))
        if 'referenceSeq' in self.__json:
            if isinstance(self.__json['referenceSeq'], list):
                self.referenceSeq = self.__add_list('referenceSeq')
            else:
                self.referenceSeq = SequenceReferenceSeqComponent(self.__add('referenceSeq'))
        else:
            self.referenceSeq = None
        self.variation = SequenceVariationComponent(self.__add('variation'))
        if 'quality' in self.__json:
            if isinstance(self.__json['quality'], list):
                self.quality = self.__add_list('quality')
            else:
                self.quality = SequenceQualityComponent(self.__add('quality'))
        else:
            self.quality = None
        self.allelicState = CodeableConcept(self.__add('allelicState'))
        self.allelicFrequency = self.__add('allelicFrequency')
        self.copyNumberEvent = CodeableConcept(self.__add('copyNumberEvent'))
        self.readCoverage = self.__add('readCoverage')
        if 'repository' in self.__json:
            if isinstance(self.__json['repository'], list):
                self.repository = self.__add_list('repository')
            else:
                self.repository = SequenceRepositoryComponent(self.__add('repository'))
        else:
            self.repository = None
        if 'pointer' in self.__json:
            if isinstance(self.__json['pointer'], list):
                self.pointer = self.__add_list('pointer')
            else:
                self.pointer = Reference(self.__add('pointer'))
        else:
            self.pointer = None
        self.observedSeq = self.__add('observedSeq')
        self.observation = Reference(self.__add('observation'))
        self.structureVariation = SequenceStructureVariationComponent(self.__add('structureVariation'))


        # Parent Resource Init
        super(Sequence, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.type:
            self.__json['type'] = self.type
        if self.patient:
            self.__json['patient'] = self.patient.json
        if self.specimen:
            self.__json['specimen'] = self.specimen.json
        if self.device:
            self.__json['device'] = self.device.json
        if self.quantity:
            self.__json['quantity'] = self.quantity.json
        if self.species:
            self.__json['species'] = self.species.json
        if self.referenceSeq:
            self.__json['referenceSeq'] = self.__get_list(self.referenceSeq)
        if self.variation:
            self.__json['variation'] = self.variation.json
        if self.quality:
            self.__json['quality'] = self.__get_list(self.quality)
        if self.allelicState:
            self.__json['allelicState'] = self.allelicState.json
        if self.allelicFrequency:
            self.__json['allelicFrequency'] = self.allelicFrequency
        if self.copyNumberEvent:
            self.__json['copyNumberEvent'] = self.copyNumberEvent.json
        if self.readCoverage:
            self.__json['readCoverage'] = self.readCoverage
        if self.repository:
            self.__json['repository'] = self.__get_list(self.repository)
        if self.pointer:
            self.__json['pointer'] = self.__get_list(self.pointer)
        if self.observedSeq:
            self.__json['observedSeq'] = self.observedSeq
        if self.observation:
            self.__json['observation'] = self.observation.json
        if self.structureVariation:
            self.__json['structureVariation'] = self.structureVariation.json

        # Add json attributes
        self.__json = super(Sequence, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR Sequence string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class Slot(DomainResource):
    '''
    FHIR Slot resource

     A slot of time on a schedule that may be available for booking appointments. If the element is present, it must have either a @value, an @id, or extensions

    identifier ->  External Ids for this item.
    serviceCategory ->  A broad categorisation of the service that is to be performed during this appointment.
    serviceType ->  The type of appointments that can be booked into this slot (ideally this would be an identifiable service - which is at a location, rather than the location itself). If provided then this overrides the value provided on the availability resource.
    specialty ->  The specialty of a practitioner that would be required to perform the service requested in this appointment.
    appointmentType ->  The style of appointment or patient that has been booked in the slot (not service type).
    schedule ->  The schedule resource that this slot defines an interval of status information.
    status ->  busy | free | busy-unavailable | busy-tentative. 
    start ->  Date/Time that the slot is to begin.
    end ->  Date/Time that the slot is to conclude.
    overbooked ->  This slot has already been overbooked, appointments are unlikely to be accepted for this time.
    comment ->  Comments on the slot to describe any extended information. Such as custom constraints on the slot.

    # Search parameters
        Slot.search.fb-type
        Slot.search.identifier
        Slot.search.schedule
        Slot.search.slot-type
        Slot.search.start
    '''
    # search parameters
    par = [("fb-type", "token"),
           ("identifier", "token"),
           ("schedule", "reference"),
           ("slot-type", "token"),
           ("start", "date")]

    search = Params(par, "Slot")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'identifier':
                    list_to_add.append(Identifier(obj))
                elif key == 'serviceType':
                    list_to_add.append(CodeableConcept(obj))
                elif key == 'specialty':
                    list_to_add.append(CodeableConcept(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR Slot __new__
        '''
        if json == None:
            return None
        else:
            return super(Slot, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR Slot constructor
        '''
        logging.info("FHIR Slot: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "Slot"
        if 'identifier' in self.__json:
            if isinstance(self.__json['identifier'], list):
                self.identifier = self.__add_list('identifier')
            else:
                self.identifier = Identifier(self.__add('identifier'))
        else:
            self.identifier = None
        self.serviceCategory = CodeableConcept(self.__add('serviceCategory'))
        if 'serviceType' in self.__json:
            if isinstance(self.__json['serviceType'], list):
                self.serviceType = self.__add_list('serviceType')
            else:
                self.serviceType = CodeableConcept(self.__add('serviceType'))
        else:
            self.serviceType = None
        if 'specialty' in self.__json:
            if isinstance(self.__json['specialty'], list):
                self.specialty = self.__add_list('specialty')
            else:
                self.specialty = CodeableConcept(self.__add('specialty'))
        else:
            self.specialty = None
        self.appointmentType = CodeableConcept(self.__add('appointmentType'))
        self.schedule = Reference(self.__add('schedule'))
        self.status = self.__add('status')
        self.start = self.__add('start')
        self.end = self.__add('end')
        self.overbooked = Boolean(self.__add('overbooked'))
        self.comment = self.__add('comment')


        # Parent Resource Init
        super(Slot, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identifier:
            self.__json['identifier'] = self.__get_list(self.identifier)
        if self.serviceCategory:
            self.__json['serviceCategory'] = self.serviceCategory.json
        if self.serviceType:
            self.__json['serviceType'] = self.__get_list(self.serviceType)
        if self.specialty:
            self.__json['specialty'] = self.__get_list(self.specialty)
        if self.appointmentType:
            self.__json['appointmentType'] = self.appointmentType.json
        if self.schedule:
            self.__json['schedule'] = self.schedule.json
        if self.status:
            self.__json['status'] = self.status
        if self.start:
            self.__json['start'] = self.start
        if self.end:
            self.__json['end'] = self.end
        if self.overbooked:
            self.__json['overbooked'] = self.overbooked.json
        if self.comment:
            self.__json['comment'] = self.comment

        # Add json attributes
        self.__json = super(Slot, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR Slot string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class SpecimenCollectionComponent(BackboneElement):
    '''
    FHIR SpecimenCollectionComponent resource

     Details concerning the specimen collection.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR SpecimenCollectionComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(SpecimenCollectionComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR SpecimenCollectionComponent constructor
        '''
        logging.info("FHIR SpecimenCollectionComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.collector = Reference(self.__add('collector'))
        self.comment = self.__add('comment')
        self.quantity = SimpleQuantity(self.__add('quantity'))
        self.method = CodeableConcept(self.__add('method'))
        self.bodySite = CodeableConcept(self.__add('bodySite'))
        self.collectedDateTime = DateTime(self.__add('collectedDateTime'))
        self.collectedPeriod = Period(self.__add('collectedPeriod'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.collector:
            self.__json['collector'] = self.collector.json
        if self.comment:
            self.__json['comment'] = self.comment
        if self.quantity:
            self.__json['quantity'] = self.quantity.json
        if self.method:
            self.__json['method'] = self.method.json
        if self.bodySite:
            self.__json['bodySite'] = self.bodySite.json
        if self.collectedDateTime:
            self.__json['collectedDateTime'] = self.collectedDateTime.json
        if self.collectedPeriod:
            self.__json['collectedPeriod'] = self.collectedPeriod.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR SpecimenCollectionComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class SpecimenTreatmentComponent(BackboneElement):
    '''
    FHIR SpecimenTreatmentComponent resource

     Details concerning treatment and processing steps for the specimen.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'additive':
                    list_to_add.append(Reference(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR SpecimenTreatmentComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(SpecimenTreatmentComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR SpecimenTreatmentComponent constructor
        '''
        logging.info("FHIR SpecimenTreatmentComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.description = self.__add('description')
        self.procedure = CodeableConcept(self.__add('procedure'))
        if 'additive' in self.__json:
            if isinstance(self.__json['additive'], list):
                self.additive = self.__add_list('additive')
            else:
                self.additive = Reference(self.__add('additive'))
        else:
            self.additive = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.description:
            self.__json['description'] = self.description
        if self.procedure:
            self.__json['procedure'] = self.procedure.json
        if self.additive:
            self.__json['additive'] = self.__get_list(self.additive)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR SpecimenTreatmentComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class SpecimenContainerComponent(BackboneElement):
    '''
    FHIR SpecimenContainerComponent resource

     The container holding the specimen.  The recursive nature of containers; i.e. blood in tube in tray in rack is not addressed here.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'identifier':
                    list_to_add.append(Identifier(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR SpecimenContainerComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(SpecimenContainerComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR SpecimenContainerComponent constructor
        '''
        logging.info("FHIR SpecimenContainerComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        if 'identifier' in self.__json:
            if isinstance(self.__json['identifier'], list):
                self.identifier = self.__add_list('identifier')
            else:
                self.identifier = Identifier(self.__add('identifier'))
        else:
            self.identifier = None
        self.description = self.__add('description')
        self.type = CodeableConcept(self.__add('type'))
        self.capacity = SimpleQuantity(self.__add('capacity'))
        self.specimenQuantity = SimpleQuantity(self.__add('specimenQuantity'))
        self.additiveCodeableConcept = CodeableConcept(self.__add('additiveCodeableConcept'))
        self.additiveReference = Reference(self.__add('additiveReference'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identifier:
            self.__json['identifier'] = self.__get_list(self.identifier)
        if self.description:
            self.__json['description'] = self.description
        if self.type:
            self.__json['type'] = self.type.json
        if self.capacity:
            self.__json['capacity'] = self.capacity.json
        if self.specimenQuantity:
            self.__json['specimenQuantity'] = self.specimenQuantity.json
        if self.additiveCodeableConcept:
            self.__json['additiveCodeableConcept'] = self.additiveCodeableConcept.json
        if self.additiveReference:
            self.__json['additiveReference'] = self.additiveReference.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR SpecimenContainerComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class Specimen(DomainResource):
    '''
    FHIR Specimen resource

     A sample to be used for analysis. If the element is present, it must have either a @value, an @id, or extensions

    identifier ->  Id for specimen.
    accessionIdentifier ->  The identifier assigned by the lab when accessioning specimen(s). This is not necessarily the same as the specimen identifier, depending on local lab procedures.
    status ->  The availability of the specimen. 
    type ->  The kind of material that forms the specimen.
    subject ->  Where the specimen came from. This may be from the patient(s) or from the environment or a device.
    receivedTime ->  Time when specimen was received for processing or testing.
    parent ->  Reference to the parent (source) specimen which is used when the specimen was either derived from or a component of another specimen.
    collection ->  Details concerning the specimen collection.
    treatment ->  Details concerning treatment and processing steps for the specimen.
    container ->  The container holding the specimen.  The recursive nature of containers; i.e. blood in tube in tray in rack is not addressed here.

    # Search parameters
        Specimen.search.accession
        Specimen.search.bodysite
        Specimen.search.collected
        Specimen.search.collector
        Specimen.search.container
        Specimen.search.container-id
        Specimen.search.identifier
        Specimen.search.parent
        Specimen.search.patient
        Specimen.search.subject
        Specimen.search.type
    '''
    # search parameters
    par = [("accession", "token"),
           ("bodysite", "token"),
           ("collected", "date"),
           ("collector", "reference"),
           ("container", "token"),
           ("container-id", "token"),
           ("identifier", "token"),
           ("parent", "reference"),
           ("patient", "reference"),
           ("subject", "reference"),
           ("type", "token")]

    search = Params(par, "Specimen")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'identifier':
                    list_to_add.append(Identifier(obj))
                elif key == 'parent':
                    list_to_add.append(Reference(obj))
                elif key == 'treatment':
                    list_to_add.append(SpecimenTreatmentComponent(obj))
                elif key == 'container':
                    list_to_add.append(SpecimenContainerComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR Specimen __new__
        '''
        if json == None:
            return None
        else:
            return super(Specimen, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR Specimen constructor
        '''
        logging.info("FHIR Specimen: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "Specimen"
        if 'identifier' in self.__json:
            if isinstance(self.__json['identifier'], list):
                self.identifier = self.__add_list('identifier')
            else:
                self.identifier = Identifier(self.__add('identifier'))
        else:
            self.identifier = None
        self.accessionIdentifier = Identifier(self.__add('accessionIdentifier'))
        self.status = self.__add('status')
        self.type = CodeableConcept(self.__add('type'))
        self.subject = Reference(self.__add('subject'))
        self.receivedTime = DateTime(self.__add('receivedTime'))
        if 'parent' in self.__json:
            if isinstance(self.__json['parent'], list):
                self.parent = self.__add_list('parent')
            else:
                self.parent = Reference(self.__add('parent'))
        else:
            self.parent = None
        self.collection = SpecimenCollectionComponent(self.__add('collection'))
        if 'treatment' in self.__json:
            if isinstance(self.__json['treatment'], list):
                self.treatment = self.__add_list('treatment')
            else:
                self.treatment = SpecimenTreatmentComponent(self.__add('treatment'))
        else:
            self.treatment = None
        if 'container' in self.__json:
            if isinstance(self.__json['container'], list):
                self.container = self.__add_list('container')
            else:
                self.container = SpecimenContainerComponent(self.__add('container'))
        else:
            self.container = None


        # Parent Resource Init
        super(Specimen, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identifier:
            self.__json['identifier'] = self.__get_list(self.identifier)
        if self.accessionIdentifier:
            self.__json['accessionIdentifier'] = self.accessionIdentifier.json
        if self.status:
            self.__json['status'] = self.status
        if self.type:
            self.__json['type'] = self.type.json
        if self.subject:
            self.__json['subject'] = self.subject.json
        if self.receivedTime:
            self.__json['receivedTime'] = self.receivedTime.json
        if self.parent:
            self.__json['parent'] = self.__get_list(self.parent)
        if self.collection:
            self.__json['collection'] = self.collection.json
        if self.treatment:
            self.__json['treatment'] = self.__get_list(self.treatment)
        if self.container:
            self.__json['container'] = self.__get_list(self.container)

        # Add json attributes
        self.__json = super(Specimen, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR Specimen string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class StructureDefinitionContactComponent(BackboneElement):
    '''
    FHIR StructureDefinitionContactComponent resource

     Contacts to assist a user in finding and communicating with the publisher.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'telecom':
                    list_to_add.append(ContactPoint(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR StructureDefinitionContactComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(StructureDefinitionContactComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR StructureDefinitionContactComponent constructor
        '''
        logging.info("FHIR StructureDefinitionContactComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.name = self.__add('name')
        if 'telecom' in self.__json:
            if isinstance(self.__json['telecom'], list):
                self.telecom = self.__add_list('telecom')
            else:
                self.telecom = ContactPoint(self.__add('telecom'))
        else:
            self.telecom = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.name:
            self.__json['name'] = self.name
        if self.telecom:
            self.__json['telecom'] = self.__get_list(self.telecom)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR StructureDefinitionContactComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class StructureDefinitionMappingComponent(BackboneElement):
    '''
    FHIR StructureDefinitionMappingComponent resource

     An external specification that the content is mapped to.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR StructureDefinitionMappingComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(StructureDefinitionMappingComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR StructureDefinitionMappingComponent constructor
        '''
        logging.info("FHIR StructureDefinitionMappingComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.identity = self.__add('identity')
        self.uri = self.__add('uri')
        self.name = self.__add('name')
        self.comments = self.__add('comments')



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identity:
            self.__json['identity'] = self.identity
        if self.uri:
            self.__json['uri'] = self.uri
        if self.name:
            self.__json['name'] = self.name
        if self.comments:
            self.__json['comments'] = self.comments


        return self.__json
        
    def __repr__(self):
        '''
        FHIR StructureDefinitionMappingComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class StructureDefinitionSnapshotComponent(BackboneElement):
    '''
    FHIR StructureDefinitionSnapshotComponent resource

     A snapshot view is expressed in a stand alone form that can be used and interpreted without considering the base StructureDefinition.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'element':
                    list_to_add.append(ElementDefinition(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR StructureDefinitionSnapshotComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(StructureDefinitionSnapshotComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR StructureDefinitionSnapshotComponent constructor
        '''
        logging.info("FHIR StructureDefinitionSnapshotComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        if 'element' in self.__json:
            if isinstance(self.__json['element'], list):
                self.element = self.__add_list('element')
            else:
                self.element = ElementDefinition(self.__add('element'))
        else:
            self.element = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.element:
            self.__json['element'] = self.__get_list(self.element)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR StructureDefinitionSnapshotComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class StructureDefinitionDifferentialComponent(BackboneElement):
    '''
    FHIR StructureDefinitionDifferentialComponent resource

     A differential view is expressed relative to the base StructureDefinition - a statement of differences that it applies.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'element':
                    list_to_add.append(ElementDefinition(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR StructureDefinitionDifferentialComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(StructureDefinitionDifferentialComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR StructureDefinitionDifferentialComponent constructor
        '''
        logging.info("FHIR StructureDefinitionDifferentialComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        if 'element' in self.__json:
            if isinstance(self.__json['element'], list):
                self.element = self.__add_list('element')
            else:
                self.element = ElementDefinition(self.__add('element'))
        else:
            self.element = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.element:
            self.__json['element'] = self.__get_list(self.element)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR StructureDefinitionDifferentialComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class StructureDefinition(DomainResource):
    '''
    FHIR StructureDefinition resource

     A definition of a FHIR structure. This resource is used to describe the underlying resources, data types defined in FHIR, and also for describing extensions, and constraints on resources and data types. If the element is present, it must have either a @value, an @id, or extensions

    url ->  An absolute URL that is used to identify this structure definition when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this structure definition is (or will be) published.
    identifier ->  Formal identifier that is used to identify this StructureDefinition when it is represented in other formats, or referenced in a specification, model, design or an instance  (should be globally unique OID, UUID, or URI), (if it's not possible to use the literal URI).
    version ->  The identifier that is used to identify this version of the StructureDefinition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the StructureDefinition author manually.
    name ->  A free text natural language name identifying the StructureDefinition.
    display ->  Defined so that applications can use this name when displaying the value of the extension to the user.
    status ->  The status of the StructureDefinition. 
    experimental ->  This StructureDefinition was authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
    publisher ->  The name of the individual or organization that published the structure definition.
    contact ->  Contacts to assist a user in finding and communicating with the publisher.
    date ->  The date this version of the structure definition was published. The date must change when the business version changes, if it does, and it must change if the status code changes. In addition, it should change when the substantive content of the structure definition changes.
    description ->  A free text natural language description of the StructureDefinition and its use.
    useContext ->  The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching of structure definitions.
    requirements ->  Explains why this structure definition is needed and why it's been constrained as it has.
    copyright ->  A copyright statement relating to the structure definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the details of the constraints and mappings.
    code ->  A set of terms from external terminologies that may be used to assist with indexing and searching of templates.
    fhirVersion ->  The version of the FHIR specification on which this StructureDefinition is based - this is the formal version of the specification, without the revision number, e.g. [publication].[major].[minor], which is 1.4.0 for this version.
    mapping ->  An external specification that the content is mapped to.
    kind ->  Defines the kind of structure that this definition is describing. 
    abstract ->  Whether structure this definition describes is abstract or not  - that is, whether an actual exchanged item can ever be of this type.
    contextType ->  If this is an extension, Identifies the context within FHIR resources where the extension can be used. 
    context ->  Identifies the types of resource or data type elements to which the extension can be applied.
    baseType ->  The type of type that this structure is derived from - a data type, an extension, a resource, including abstract ones. If this field is present, it indicates that the structure definition is deriving from this type. If it is not present, then the structure definition is the definition of a base abstract structure.
    baseDefinition ->  An absolute URI that is the base structure from which this type is derived, either by specialization or constraint.
    derivation ->  How the type relates to the baseDefinition. 
    snapshot ->  A snapshot view is expressed in a stand alone form that can be used and interpreted without considering the base StructureDefinition.
    differential ->  A differential view is expressed relative to the base StructureDefinition - a statement of differences that it applies.

    # Search parameters
        StructureDefinition.search.abstract
        StructureDefinition.search.base
        StructureDefinition.search.base-path
        StructureDefinition.search.code
        StructureDefinition.search.context
        StructureDefinition.search.context-type
        StructureDefinition.search.date
        StructureDefinition.search.description
        StructureDefinition.search.display
        StructureDefinition.search.experimental
        StructureDefinition.search.ext-context
        StructureDefinition.search.identifier
        StructureDefinition.search.kind
        StructureDefinition.search.name
        StructureDefinition.search.path
        StructureDefinition.search.publisher
        StructureDefinition.search.status
        StructureDefinition.search.type
        StructureDefinition.search.url
        StructureDefinition.search.valueset
        StructureDefinition.search.version
    '''
    # search parameters
    par = [("abstract", "token"),
           ("base", "uri"),
           ("base-path", "token"),
           ("code", "token"),
           ("context", "token"),
           ("context-type", "token"),
           ("date", "date"),
           ("description", "string"),
           ("display", "string"),
           ("experimental", "token"),
           ("ext-context", "string"),
           ("identifier", "token"),
           ("kind", "token"),
           ("name", "string"),
           ("path", "token"),
           ("publisher", "string"),
           ("status", "token"),
           ("type", "token"),
           ("url", "uri"),
           ("valueset", "reference"),
           ("version", "token")]

    search = Params(par, "StructureDefinition")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'identifier':
                    list_to_add.append(Identifier(obj))
                elif key == 'contact':
                    list_to_add.append(StructureDefinitionContactComponent(obj))
                elif key == 'useContext':
                    list_to_add.append(CodeableConcept(obj))
                elif key == 'code':
                    list_to_add.append(Coding(obj))
                elif key == 'mapping':
                    list_to_add.append(StructureDefinitionMappingComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR StructureDefinition __new__
        '''
        if json == None:
            return None
        else:
            return super(StructureDefinition, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR StructureDefinition constructor
        '''
        logging.info("FHIR StructureDefinition: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "StructureDefinition"
        self.url = self.__add('url')
        if 'identifier' in self.__json:
            if isinstance(self.__json['identifier'], list):
                self.identifier = self.__add_list('identifier')
            else:
                self.identifier = Identifier(self.__add('identifier'))
        else:
            self.identifier = None
        self.version = self.__add('version')
        self.name = self.__add('name')
        self.display = self.__add('display')
        self.status = self.__add('status')
        self.experimental = Boolean(self.__add('experimental'))
        self.publisher = self.__add('publisher')
        if 'contact' in self.__json:
            if isinstance(self.__json['contact'], list):
                self.contact = self.__add_list('contact')
            else:
                self.contact = StructureDefinitionContactComponent(self.__add('contact'))
        else:
            self.contact = None
        self.date = DateTime(self.__add('date'))
        self.description = self.__add('description')
        if 'useContext' in self.__json:
            if isinstance(self.__json['useContext'], list):
                self.useContext = self.__add_list('useContext')
            else:
                self.useContext = CodeableConcept(self.__add('useContext'))
        else:
            self.useContext = None
        self.requirements = self.__add('requirements')
        self.copyright = self.__add('copyright')
        if 'code' in self.__json:
            if isinstance(self.__json['code'], list):
                self.code = self.__add_list('code')
            else:
                self.code = Coding(self.__add('code'))
        else:
            self.code = None
        self.fhirVersion = self.__add('fhirVersion')
        if 'mapping' in self.__json:
            if isinstance(self.__json['mapping'], list):
                self.mapping = self.__add_list('mapping')
            else:
                self.mapping = StructureDefinitionMappingComponent(self.__add('mapping'))
        else:
            self.mapping = None
        self.kind = self.__add('kind')
        self.abstract = Boolean(self.__add('abstract'))
        self.contextType = self.__add('contextType')
        if 'context' in self.__json:
            if isinstance(self.__json['context'], list):
                self.context = self.__add_list('context')
            else:
                self.context = self.__add('context')
        else:
            self.context = None
        self.baseType = self.__add('baseType')
        self.baseDefinition = self.__add('baseDefinition')
        self.derivation = self.__add('derivation')
        self.snapshot = StructureDefinitionSnapshotComponent(self.__add('snapshot'))
        self.differential = StructureDefinitionDifferentialComponent(self.__add('differential'))


        # Parent Resource Init
        super(StructureDefinition, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.url:
            self.__json['url'] = self.url
        if self.identifier:
            self.__json['identifier'] = self.__get_list(self.identifier)
        if self.version:
            self.__json['version'] = self.version
        if self.name:
            self.__json['name'] = self.name
        if self.display:
            self.__json['display'] = self.display
        if self.status:
            self.__json['status'] = self.status
        if self.experimental:
            self.__json['experimental'] = self.experimental.json
        if self.publisher:
            self.__json['publisher'] = self.publisher
        if self.contact:
            self.__json['contact'] = self.__get_list(self.contact)
        if self.date:
            self.__json['date'] = self.date.json
        if self.description:
            self.__json['description'] = self.description
        if self.useContext:
            self.__json['useContext'] = self.__get_list(self.useContext)
        if self.requirements:
            self.__json['requirements'] = self.requirements
        if self.copyright:
            self.__json['copyright'] = self.copyright
        if self.code:
            self.__json['code'] = self.__get_list(self.code)
        if self.fhirVersion:
            self.__json['fhirVersion'] = self.fhirVersion
        if self.mapping:
            self.__json['mapping'] = self.__get_list(self.mapping)
        if self.kind:
            self.__json['kind'] = self.kind
        if self.abstract:
            self.__json['abstract'] = self.abstract.json
        if self.contextType:
            self.__json['contextType'] = self.contextType
        if self.context:
            self.__json['context'] = self.__get_list(self.context)
        if self.baseType:
            self.__json['baseType'] = self.baseType
        if self.baseDefinition:
            self.__json['baseDefinition'] = self.baseDefinition
        if self.derivation:
            self.__json['derivation'] = self.derivation
        if self.snapshot:
            self.__json['snapshot'] = self.snapshot.json
        if self.differential:
            self.__json['differential'] = self.differential.json

        # Add json attributes
        self.__json = super(StructureDefinition, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR StructureDefinition string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class StructureMapContactComponent(BackboneElement):
    '''
    FHIR StructureMapContactComponent resource

     Contacts to assist a user in finding and communicating with the publisher.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'telecom':
                    list_to_add.append(ContactPoint(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR StructureMapContactComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(StructureMapContactComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR StructureMapContactComponent constructor
        '''
        logging.info("FHIR StructureMapContactComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.name = self.__add('name')
        if 'telecom' in self.__json:
            if isinstance(self.__json['telecom'], list):
                self.telecom = self.__add_list('telecom')
            else:
                self.telecom = ContactPoint(self.__add('telecom'))
        else:
            self.telecom = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.name:
            self.__json['name'] = self.name
        if self.telecom:
            self.__json['telecom'] = self.__get_list(self.telecom)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR StructureMapContactComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class StructureMapStructureComponent(BackboneElement):
    '''
    FHIR StructureMapStructureComponent resource

     A structure definition used by this map. The structure definition may describe instances that are converted, or the instances that are produced.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR StructureMapStructureComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(StructureMapStructureComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR StructureMapStructureComponent constructor
        '''
        logging.info("FHIR StructureMapStructureComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.url = self.__add('url')
        self.mode = self.__add('mode')
        self.documentation = self.__add('documentation')



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.url:
            self.__json['url'] = self.url
        if self.mode:
            self.__json['mode'] = self.mode
        if self.documentation:
            self.__json['documentation'] = self.documentation


        return self.__json
        
    def __repr__(self):
        '''
        FHIR StructureMapStructureComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class StructureMapInputComponent(BackboneElement):
    '''
    FHIR StructureMapInputComponent resource

     A name assigned to an instance of data. The instance must be provided when the mapping is invoked.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR StructureMapInputComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(StructureMapInputComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR StructureMapInputComponent constructor
        '''
        logging.info("FHIR StructureMapInputComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType


        return self.__json
        
    def __repr__(self):
        '''
        FHIR StructureMapInputComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class StructureMapRuleComponent(BackboneElement):
    '''
    FHIR StructureMapRuleComponent resource

     Transform Rule from source to target.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR StructureMapRuleComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(StructureMapRuleComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR StructureMapRuleComponent constructor
        '''
        logging.info("FHIR StructureMapRuleComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType


        return self.__json
        
    def __repr__(self):
        '''
        FHIR StructureMapRuleComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class StructureMapGroupComponent(BackboneElement):
    '''
    FHIR StructureMapGroupComponent resource

     Named sections for reader convenience.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'input':
                    list_to_add.append(StructureMapInputComponent(obj))
                elif key == 'rule':
                    list_to_add.append(StructureMapRuleComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR StructureMapGroupComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(StructureMapGroupComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR StructureMapGroupComponent constructor
        '''
        logging.info("FHIR StructureMapGroupComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.name = self.__add('name')
        self.extends = self.__add('extends')
        self.documentation = self.__add('documentation')
        if 'input' in self.__json:
            if isinstance(self.__json['input'], list):
                self.input = self.__add_list('input')
            else:
                self.input = StructureMapInputComponent(self.__add('input'))
        else:
            self.input = None
        if 'rule' in self.__json:
            if isinstance(self.__json['rule'], list):
                self.rule = self.__add_list('rule')
            else:
                self.rule = StructureMapRuleComponent(self.__add('rule'))
        else:
            self.rule = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.name:
            self.__json['name'] = self.name
        if self.extends:
            self.__json['extends'] = self.extends
        if self.documentation:
            self.__json['documentation'] = self.documentation
        if self.input:
            self.__json['input'] = self.__get_list(self.input)
        if self.rule:
            self.__json['rule'] = self.__get_list(self.rule)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR StructureMapGroupComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class StructureMap(DomainResource):
    '''
    FHIR StructureMap resource

     A Map of relationships between 2 structures that can be used to transform data. If the element is present, it must have either a @value, an @id, or extensions

    url ->  An absolute URL that is used to identify this structure map when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this structure map is (or will be) published.
    identifier ->  Formal identifier that is used to identify this StructureMap when it is represented in other formats, or referenced in a specification, model, design or an instance  (should be globally unique OID, UUID, or URI), (if it's not possible to use the literal URI).
    version ->  The identifier that is used to identify this version of the StructureMap when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the StructureMap author manually.
    name ->  A free text natural language name identifying the StructureMap.
    status ->  The status of the StructureMap. 
    experimental ->  This StructureMap was authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
    publisher ->  The name of the individual or organization that published the structure map.
    contact ->  Contacts to assist a user in finding and communicating with the publisher.
    date ->  The date this version of the structure map was published. The date must change when the business version changes, if it does, and it must change if the status code changes. In addition, it should change when the substantive content of the structure map changes.
    description ->  A free text natural language description of the StructureMap and its use.
    useContext ->  The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching of structure maps.
    requirements ->  Explains why this structure map is needed and why it's been designed as it has.
    copyright ->  A copyright statement relating to the structure map and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the details of the constraints and mappings.
    structure ->  A structure definition used by this map. The structure definition may describe instances that are converted, or the instances that are produced.
    import_ ->  Other maps used by this map (canonical URLs).
    group ->  Named sections for reader convenience.

    
    '''
    

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'identifier':
                    list_to_add.append(Identifier(obj))
                elif key == 'contact':
                    list_to_add.append(StructureMapContactComponent(obj))
                elif key == 'useContext':
                    list_to_add.append(CodeableConcept(obj))
                elif key == 'structure':
                    list_to_add.append(StructureMapStructureComponent(obj))
                elif key == 'group':
                    list_to_add.append(StructureMapGroupComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR StructureMap __new__
        '''
        if json == None:
            return None
        else:
            return super(StructureMap, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR StructureMap constructor
        '''
        logging.info("FHIR StructureMap: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "StructureMap"
        self.url = self.__add('url')
        if 'identifier' in self.__json:
            if isinstance(self.__json['identifier'], list):
                self.identifier = self.__add_list('identifier')
            else:
                self.identifier = Identifier(self.__add('identifier'))
        else:
            self.identifier = None
        self.version = self.__add('version')
        self.name = self.__add('name')
        self.status = self.__add('status')
        self.experimental = Boolean(self.__add('experimental'))
        self.publisher = self.__add('publisher')
        if 'contact' in self.__json:
            if isinstance(self.__json['contact'], list):
                self.contact = self.__add_list('contact')
            else:
                self.contact = StructureMapContactComponent(self.__add('contact'))
        else:
            self.contact = None
        self.date = DateTime(self.__add('date'))
        self.description = self.__add('description')
        if 'useContext' in self.__json:
            if isinstance(self.__json['useContext'], list):
                self.useContext = self.__add_list('useContext')
            else:
                self.useContext = CodeableConcept(self.__add('useContext'))
        else:
            self.useContext = None
        self.requirements = self.__add('requirements')
        self.copyright = self.__add('copyright')
        if 'structure' in self.__json:
            if isinstance(self.__json['structure'], list):
                self.structure = self.__add_list('structure')
            else:
                self.structure = StructureMapStructureComponent(self.__add('structure'))
        else:
            self.structure = None
        if 'import_' in self.__json:
            if isinstance(self.__json['import_'], list):
                self.import_ = self.__add_list('import_')
            else:
                self.import_ = self.__add('import_')
        else:
            self.import_ = None
        if 'group' in self.__json:
            if isinstance(self.__json['group'], list):
                self.group = self.__add_list('group')
            else:
                self.group = StructureMapGroupComponent(self.__add('group'))
        else:
            self.group = None


        # Parent Resource Init
        super(StructureMap, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.url:
            self.__json['url'] = self.url
        if self.identifier:
            self.__json['identifier'] = self.__get_list(self.identifier)
        if self.version:
            self.__json['version'] = self.version
        if self.name:
            self.__json['name'] = self.name
        if self.status:
            self.__json['status'] = self.status
        if self.experimental:
            self.__json['experimental'] = self.experimental.json
        if self.publisher:
            self.__json['publisher'] = self.publisher
        if self.contact:
            self.__json['contact'] = self.__get_list(self.contact)
        if self.date:
            self.__json['date'] = self.date.json
        if self.description:
            self.__json['description'] = self.description
        if self.useContext:
            self.__json['useContext'] = self.__get_list(self.useContext)
        if self.requirements:
            self.__json['requirements'] = self.requirements
        if self.copyright:
            self.__json['copyright'] = self.copyright
        if self.structure:
            self.__json['structure'] = self.__get_list(self.structure)
        if self.import_:
            self.__json['import_'] = self.__get_list(self.import_)
        if self.group:
            self.__json['group'] = self.__get_list(self.group)

        # Add json attributes
        self.__json = super(StructureMap, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR StructureMap string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class SubscriptionChannelComponent(BackboneElement):
    '''
    FHIR SubscriptionChannelComponent resource

     Details where to send notifications when resources are received that meet the criteria.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR SubscriptionChannelComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(SubscriptionChannelComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR SubscriptionChannelComponent constructor
        '''
        logging.info("FHIR SubscriptionChannelComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.type = self.__add('type')
        self.endpoint = self.__add('endpoint')
        self.payload = self.__add('payload')
        self.header = self.__add('header')



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.type:
            self.__json['type'] = self.type
        if self.endpoint:
            self.__json['endpoint'] = self.endpoint
        if self.payload:
            self.__json['payload'] = self.payload
        if self.header:
            self.__json['header'] = self.header


        return self.__json
        
    def __repr__(self):
        '''
        FHIR SubscriptionChannelComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class Subscription(DomainResource):
    '''
    FHIR Subscription resource

     The subscription resource is used to define a push based subscription from a server to another system. Once a subscription is registered with the server, the server checks every resource that is created or updated, and if the resource matches the given criteria, it sends a message on the defined "channel" so that another system is able to take an appropriate action. If the element is present, it must have either a @value, an @id, or extensions

    criteria ->  The rules that the server should use to determine when to generate notifications for this subscription.
    contact ->  Contact details for a human to contact about the subscription. The primary use of this for system administrator troubleshooting.
    reason ->  A description of why this subscription is defined.
    status ->  The status of the subscription, which marks the server state for managing the subscription. 
    error ->  A record of the last error that occurred when the server processed a notification.
    channel ->  Details where to send notifications when resources are received that meet the criteria.
    end ->  The time for the server to turn the subscription off.
    tag ->  A tag to add to any resource that matches the criteria, after the subscription is processed.

    # Search parameters
        Subscription.search.contact
        Subscription.search.criteria
        Subscription.search.payload
        Subscription.search.status
        Subscription.search.tag
        Subscription.search.type
        Subscription.search.url
    '''
    # search parameters
    par = [("contact", "token"),
           ("criteria", "string"),
           ("payload", "string"),
           ("status", "token"),
           ("tag", "token"),
           ("type", "token"),
           ("url", "uri")]

    search = Params(par, "Subscription")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'contact':
                    list_to_add.append(ContactPoint(obj))
                elif key == 'tag':
                    list_to_add.append(Coding(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR Subscription __new__
        '''
        if json == None:
            return None
        else:
            return super(Subscription, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR Subscription constructor
        '''
        logging.info("FHIR Subscription: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "Subscription"
        self.criteria = self.__add('criteria')
        if 'contact' in self.__json:
            if isinstance(self.__json['contact'], list):
                self.contact = self.__add_list('contact')
            else:
                self.contact = ContactPoint(self.__add('contact'))
        else:
            self.contact = None
        self.reason = self.__add('reason')
        self.status = self.__add('status')
        self.error = self.__add('error')
        self.channel = SubscriptionChannelComponent(self.__add('channel'))
        self.end = self.__add('end')
        if 'tag' in self.__json:
            if isinstance(self.__json['tag'], list):
                self.tag = self.__add_list('tag')
            else:
                self.tag = Coding(self.__add('tag'))
        else:
            self.tag = None


        # Parent Resource Init
        super(Subscription, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.criteria:
            self.__json['criteria'] = self.criteria
        if self.contact:
            self.__json['contact'] = self.__get_list(self.contact)
        if self.reason:
            self.__json['reason'] = self.reason
        if self.status:
            self.__json['status'] = self.status
        if self.error:
            self.__json['error'] = self.error
        if self.channel:
            self.__json['channel'] = self.channel.json
        if self.end:
            self.__json['end'] = self.end
        if self.tag:
            self.__json['tag'] = self.__get_list(self.tag)

        # Add json attributes
        self.__json = super(Subscription, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR Subscription string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class SubstanceInstanceComponent(BackboneElement):
    '''
    FHIR SubstanceInstanceComponent resource

     Substance may be used to describe a kind of substance, or a specific package/container of the substance: an instance.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR SubstanceInstanceComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(SubstanceInstanceComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR SubstanceInstanceComponent constructor
        '''
        logging.info("FHIR SubstanceInstanceComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.identifier = Identifier(self.__add('identifier'))
        self.expiry = DateTime(self.__add('expiry'))
        self.quantity = SimpleQuantity(self.__add('quantity'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identifier:
            self.__json['identifier'] = self.identifier.json
        if self.expiry:
            self.__json['expiry'] = self.expiry.json
        if self.quantity:
            self.__json['quantity'] = self.quantity.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR SubstanceInstanceComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class SubstanceIngredientComponent(BackboneElement):
    '''
    FHIR SubstanceIngredientComponent resource

     A substance can be composed of other substances.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR SubstanceIngredientComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(SubstanceIngredientComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR SubstanceIngredientComponent constructor
        '''
        logging.info("FHIR SubstanceIngredientComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.quantity = Ratio(self.__add('quantity'))
        self.substance = Reference(self.__add('substance'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.quantity:
            self.__json['quantity'] = self.quantity.json
        if self.substance:
            self.__json['substance'] = self.substance.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR SubstanceIngredientComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class Substance(DomainResource):
    '''
    FHIR Substance resource

     A homogeneous material with a definite composition. If the element is present, it must have either a @value, an @id, or extensions

    identifier ->  Unique identifier for the substance.
    category ->  A code that classifies the general type of substance.  This is used  for searching, sorting and display purposes.
    code ->  A code (or set of codes) that identify this substance.
    description ->  A description of the substance - its appearance, handling requirements, and other usage notes.
    instance ->  Substance may be used to describe a kind of substance, or a specific package/container of the substance: an instance.
    ingredient ->  A substance can be composed of other substances.

    # Search parameters
        Substance.search.category
        Substance.search.code
        Substance.search.container-identifier
        Substance.search.expiry
        Substance.search.identifier
        Substance.search.quantity
        Substance.search.substance
    '''
    # search parameters
    par = [("category", "token"),
           ("code", "token"),
           ("container-identifier", "token"),
           ("expiry", "date"),
           ("identifier", "token"),
           ("quantity", "quantity"),
           ("substance", "reference")]

    search = Params(par, "Substance")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'identifier':
                    list_to_add.append(Identifier(obj))
                elif key == 'category':
                    list_to_add.append(CodeableConcept(obj))
                elif key == 'instance':
                    list_to_add.append(SubstanceInstanceComponent(obj))
                elif key == 'ingredient':
                    list_to_add.append(SubstanceIngredientComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR Substance __new__
        '''
        if json == None:
            return None
        else:
            return super(Substance, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR Substance constructor
        '''
        logging.info("FHIR Substance: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "Substance"
        if 'identifier' in self.__json:
            if isinstance(self.__json['identifier'], list):
                self.identifier = self.__add_list('identifier')
            else:
                self.identifier = Identifier(self.__add('identifier'))
        else:
            self.identifier = None
        if 'category' in self.__json:
            if isinstance(self.__json['category'], list):
                self.category = self.__add_list('category')
            else:
                self.category = CodeableConcept(self.__add('category'))
        else:
            self.category = None
        self.code = CodeableConcept(self.__add('code'))
        self.description = self.__add('description')
        if 'instance' in self.__json:
            if isinstance(self.__json['instance'], list):
                self.instance = self.__add_list('instance')
            else:
                self.instance = SubstanceInstanceComponent(self.__add('instance'))
        else:
            self.instance = None
        if 'ingredient' in self.__json:
            if isinstance(self.__json['ingredient'], list):
                self.ingredient = self.__add_list('ingredient')
            else:
                self.ingredient = SubstanceIngredientComponent(self.__add('ingredient'))
        else:
            self.ingredient = None


        # Parent Resource Init
        super(Substance, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identifier:
            self.__json['identifier'] = self.__get_list(self.identifier)
        if self.category:
            self.__json['category'] = self.__get_list(self.category)
        if self.code:
            self.__json['code'] = self.code.json
        if self.description:
            self.__json['description'] = self.description
        if self.instance:
            self.__json['instance'] = self.__get_list(self.instance)
        if self.ingredient:
            self.__json['ingredient'] = self.__get_list(self.ingredient)

        # Add json attributes
        self.__json = super(Substance, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR Substance string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class SupplyDelivery(DomainResource):
    '''
    FHIR SupplyDelivery resource

     Record of delivery of what is supplied. If the element is present, it must have either a @value, an @id, or extensions

    identifier ->  Identifier assigned by the dispensing facility when the item(s) is dispensed.
    status ->  A code specifying the state of the dispense event. 
    patient ->  A link to a resource representing the person whom the delivered item is for.
    type ->  Indicates the type of dispensing event that is performed. Examples include: Trial Fill, Completion of Trial, Partial Fill, Emergency Fill, Samples, etc.
    quantity ->  The amount of supply that has been dispensed. Includes unit of measure.
    suppliedItem ->  Identifies the medication, substance or device being dispensed. This is either a link to a resource representing the details of the item or a simple attribute carrying a code that identifies the item from a known list.
    supplier ->  The individual responsible for dispensing the medication, supplier or device.
    whenPrepared ->  The time the dispense event occurred.
    time ->  The time the dispensed item was sent or handed to the patient (or agent).
    destination ->  Identification of the facility/location where the Supply was shipped to, as part of the dispense event.
    receiver ->  Identifies the person who picked up the Supply.

    # Search parameters
        SupplyDelivery.search.identifier
        SupplyDelivery.search.patient
        SupplyDelivery.search.receiver
        SupplyDelivery.search.status
        SupplyDelivery.search.supplier
    '''
    # search parameters
    par = [("identifier", "token"),
           ("patient", "reference"),
           ("receiver", "reference"),
           ("status", "token"),
           ("supplier", "reference")]

    search = Params(par, "SupplyDelivery")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'receiver':
                    list_to_add.append(Reference(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR SupplyDelivery __new__
        '''
        if json == None:
            return None
        else:
            return super(SupplyDelivery, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR SupplyDelivery constructor
        '''
        logging.info("FHIR SupplyDelivery: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "SupplyDelivery"
        self.identifier = Identifier(self.__add('identifier'))
        self.status = self.__add('status')
        self.patient = Reference(self.__add('patient'))
        self.type = CodeableConcept(self.__add('type'))
        self.quantity = SimpleQuantity(self.__add('quantity'))
        self.suppliedItem = Reference(self.__add('suppliedItem'))
        self.supplier = Reference(self.__add('supplier'))
        self.whenPrepared = Period(self.__add('whenPrepared'))
        self.time = DateTime(self.__add('time'))
        self.destination = Reference(self.__add('destination'))
        if 'receiver' in self.__json:
            if isinstance(self.__json['receiver'], list):
                self.receiver = self.__add_list('receiver')
            else:
                self.receiver = Reference(self.__add('receiver'))
        else:
            self.receiver = None


        # Parent Resource Init
        super(SupplyDelivery, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identifier:
            self.__json['identifier'] = self.identifier.json
        if self.status:
            self.__json['status'] = self.status
        if self.patient:
            self.__json['patient'] = self.patient.json
        if self.type:
            self.__json['type'] = self.type.json
        if self.quantity:
            self.__json['quantity'] = self.quantity.json
        if self.suppliedItem:
            self.__json['suppliedItem'] = self.suppliedItem.json
        if self.supplier:
            self.__json['supplier'] = self.supplier.json
        if self.whenPrepared:
            self.__json['whenPrepared'] = self.whenPrepared.json
        if self.time:
            self.__json['time'] = self.time.json
        if self.destination:
            self.__json['destination'] = self.destination.json
        if self.receiver:
            self.__json['receiver'] = self.__get_list(self.receiver)

        # Add json attributes
        self.__json = super(SupplyDelivery, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR SupplyDelivery string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class SupplyRequestWhenComponent(BackboneElement):
    '''
    FHIR SupplyRequestWhenComponent resource

     When the request should be fulfilled.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR SupplyRequestWhenComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(SupplyRequestWhenComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR SupplyRequestWhenComponent constructor
        '''
        logging.info("FHIR SupplyRequestWhenComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.code = CodeableConcept(self.__add('code'))
        self.schedule = Timing(self.__add('schedule'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.code:
            self.__json['code'] = self.code.json
        if self.schedule:
            self.__json['schedule'] = self.schedule.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR SupplyRequestWhenComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class SupplyRequest(DomainResource):
    '''
    FHIR SupplyRequest resource

     A record of a request for a medication, substance or device used in the healthcare setting. If the element is present, it must have either a @value, an @id, or extensions

    patient ->  A link to a resource representing the person whom the ordered item is for.
    source ->  The Practitioner , Organization or Patient who initiated this order for the supply.
    date ->  When the request was made.
    identifier ->  Unique identifier for this supply request.
    status ->  Status of the supply request. 
    kind ->  Category of supply, e.g.  central, non-stock, etc. This is used to support work flows associated with the supply process.
    orderedItem ->  The item that is requested to be supplied.
    supplier ->  Who is intended to fulfill the request.
    when ->  When the request should be fulfilled.
    reasonCodeableConcept ->  Why the supply item was requested.
    reasonReference ->  Why the supply item was requested.

    # Search parameters
        SupplyRequest.search.date
        SupplyRequest.search.identifier
        SupplyRequest.search.kind
        SupplyRequest.search.patient
        SupplyRequest.search.source
        SupplyRequest.search.status
        SupplyRequest.search.supplier
    '''
    # search parameters
    par = [("date", "date"),
           ("identifier", "token"),
           ("kind", "token"),
           ("patient", "reference"),
           ("source", "reference"),
           ("status", "token"),
           ("supplier", "reference")]

    search = Params(par, "SupplyRequest")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'supplier':
                    list_to_add.append(Reference(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR SupplyRequest __new__
        '''
        if json == None:
            return None
        else:
            return super(SupplyRequest, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR SupplyRequest constructor
        '''
        logging.info("FHIR SupplyRequest: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "SupplyRequest"
        self.patient = Reference(self.__add('patient'))
        self.source = Reference(self.__add('source'))
        self.date = DateTime(self.__add('date'))
        self.identifier = Identifier(self.__add('identifier'))
        self.status = self.__add('status')
        self.kind = CodeableConcept(self.__add('kind'))
        self.orderedItem = Reference(self.__add('orderedItem'))
        if 'supplier' in self.__json:
            if isinstance(self.__json['supplier'], list):
                self.supplier = self.__add_list('supplier')
            else:
                self.supplier = Reference(self.__add('supplier'))
        else:
            self.supplier = None
        self.when = SupplyRequestWhenComponent(self.__add('when'))
        self.reasonCodeableConcept = CodeableConcept(self.__add('reasonCodeableConcept'))
        self.reasonReference = Reference(self.__add('reasonReference'))


        # Parent Resource Init
        super(SupplyRequest, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.patient:
            self.__json['patient'] = self.patient.json
        if self.source:
            self.__json['source'] = self.source.json
        if self.date:
            self.__json['date'] = self.date.json
        if self.identifier:
            self.__json['identifier'] = self.identifier.json
        if self.status:
            self.__json['status'] = self.status
        if self.kind:
            self.__json['kind'] = self.kind.json
        if self.orderedItem:
            self.__json['orderedItem'] = self.orderedItem.json
        if self.supplier:
            self.__json['supplier'] = self.__get_list(self.supplier)
        if self.when:
            self.__json['when'] = self.when.json
        if self.reasonCodeableConcept:
            self.__json['reasonCodeableConcept'] = self.reasonCodeableConcept.json
        if self.reasonReference:
            self.__json['reasonReference'] = self.reasonReference.json

        # Add json attributes
        self.__json = super(SupplyRequest, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR SupplyRequest string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class TaskInputComponent(BackboneElement):
    '''
    FHIR TaskInputComponent resource

     Inputs to the task.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR TaskInputComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(TaskInputComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR TaskInputComponent constructor
        '''
        logging.info("FHIR TaskInputComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.name = self.__add('name')
        self.valueBoolean = Boolean(self.__add('valueBoolean'))
        self.valueInteger = self.__add('valueInteger')
        self.valueDecimal = self.__add('valueDecimal')
        self.valueBase64Binary = self.__add('valueBase64Binary')
        self.valueInstant = self.__add('valueInstant')
        self.valueString = self.__add('valueString')
        self.valueUri = self.__add('valueUri')
        self.valueDate = Date(self.__add('valueDate'))
        self.valueDateTime = DateTime(self.__add('valueDateTime'))
        self.valueTime = Time(self.__add('valueTime'))
        self.valueCode = self.__add('valueCode')
        self.valueOid = self.__add('valueOid')
        self.valueUuid = self.__add('valueUuid')
        self.valueId = self.__add('valueId')
        self.valueUnsignedInt = self.__add('valueUnsignedInt')
        self.valuePositiveInt = self.__add('valuePositiveInt')
        self.valueMarkdown = self.__add('valueMarkdown')
        self.valueAnnotation = Annotation(self.__add('valueAnnotation'))
        self.valueAttachment = Attachment(self.__add('valueAttachment'))
        self.valueIdentifier = Identifier(self.__add('valueIdentifier'))
        self.valueCodeableConcept = CodeableConcept(self.__add('valueCodeableConcept'))
        self.valueCoding = Coding(self.__add('valueCoding'))
        self.valueQuantity = Quantity(self.__add('valueQuantity'))
        self.valueRange = Range(self.__add('valueRange'))
        self.valuePeriod = Period(self.__add('valuePeriod'))
        self.valueRatio = Ratio(self.__add('valueRatio'))
        self.valueReference = Reference(self.__add('valueReference'))
        self.valueSampledData = SampledData(self.__add('valueSampledData'))
        self.valueSignature = Signature(self.__add('valueSignature'))
        self.valueHumanName = HumanName(self.__add('valueHumanName'))
        self.valueAddress = Address(self.__add('valueAddress'))
        self.valueContactPoint = ContactPoint(self.__add('valueContactPoint'))
        self.valueTiming = Timing(self.__add('valueTiming'))
        self.valueMeta = Meta(self.__add('valueMeta'))
        self.valueElementDefinition = ElementDefinition(self.__add('valueElementDefinition'))
        self.valueModuleMetadata = ModuleMetadata(self.__add('valueModuleMetadata'))
        self.valueDataRequirement = DataRequirement(self.__add('valueDataRequirement'))
        self.valueActionDefinition = ActionDefinition(self.__add('valueActionDefinition'))
        self.valueParameterDefinition = ParameterDefinition(self.__add('valueParameterDefinition'))
        self.valueTriggerDefinition = TriggerDefinition(self.__add('valueTriggerDefinition'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.name:
            self.__json['name'] = self.name
        if self.valueBoolean:
            self.__json['valueBoolean'] = self.valueBoolean.json
        if self.valueInteger:
            self.__json['valueInteger'] = self.valueInteger
        if self.valueDecimal:
            self.__json['valueDecimal'] = self.valueDecimal
        if self.valueBase64Binary:
            self.__json['valueBase64Binary'] = self.valueBase64Binary
        if self.valueInstant:
            self.__json['valueInstant'] = self.valueInstant
        if self.valueString:
            self.__json['valueString'] = self.valueString
        if self.valueUri:
            self.__json['valueUri'] = self.valueUri
        if self.valueDate:
            self.__json['valueDate'] = self.valueDate.json
        if self.valueDateTime:
            self.__json['valueDateTime'] = self.valueDateTime.json
        if self.valueTime:
            self.__json['valueTime'] = self.valueTime.json
        if self.valueCode:
            self.__json['valueCode'] = self.valueCode
        if self.valueOid:
            self.__json['valueOid'] = self.valueOid
        if self.valueUuid:
            self.__json['valueUuid'] = self.valueUuid
        if self.valueId:
            self.__json['valueId'] = self.valueId
        if self.valueUnsignedInt:
            self.__json['valueUnsignedInt'] = self.valueUnsignedInt
        if self.valuePositiveInt:
            self.__json['valuePositiveInt'] = self.valuePositiveInt
        if self.valueMarkdown:
            self.__json['valueMarkdown'] = self.valueMarkdown
        if self.valueAnnotation:
            self.__json['valueAnnotation'] = self.valueAnnotation.json
        if self.valueAttachment:
            self.__json['valueAttachment'] = self.valueAttachment.json
        if self.valueIdentifier:
            self.__json['valueIdentifier'] = self.valueIdentifier.json
        if self.valueCodeableConcept:
            self.__json['valueCodeableConcept'] = self.valueCodeableConcept.json
        if self.valueCoding:
            self.__json['valueCoding'] = self.valueCoding.json
        if self.valueQuantity:
            self.__json['valueQuantity'] = self.valueQuantity.json
        if self.valueRange:
            self.__json['valueRange'] = self.valueRange.json
        if self.valuePeriod:
            self.__json['valuePeriod'] = self.valuePeriod.json
        if self.valueRatio:
            self.__json['valueRatio'] = self.valueRatio.json
        if self.valueReference:
            self.__json['valueReference'] = self.valueReference.json
        if self.valueSampledData:
            self.__json['valueSampledData'] = self.valueSampledData.json
        if self.valueSignature:
            self.__json['valueSignature'] = self.valueSignature.json
        if self.valueHumanName:
            self.__json['valueHumanName'] = self.valueHumanName.json
        if self.valueAddress:
            self.__json['valueAddress'] = self.valueAddress.json
        if self.valueContactPoint:
            self.__json['valueContactPoint'] = self.valueContactPoint.json
        if self.valueTiming:
            self.__json['valueTiming'] = self.valueTiming.json
        if self.valueMeta:
            self.__json['valueMeta'] = self.valueMeta.json
        if self.valueElementDefinition:
            self.__json['valueElementDefinition'] = self.valueElementDefinition.json
        if self.valueModuleMetadata:
            self.__json['valueModuleMetadata'] = self.valueModuleMetadata.json
        if self.valueDataRequirement:
            self.__json['valueDataRequirement'] = self.valueDataRequirement.json
        if self.valueActionDefinition:
            self.__json['valueActionDefinition'] = self.valueActionDefinition.json
        if self.valueParameterDefinition:
            self.__json['valueParameterDefinition'] = self.valueParameterDefinition.json
        if self.valueTriggerDefinition:
            self.__json['valueTriggerDefinition'] = self.valueTriggerDefinition.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR TaskInputComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class TaskOutputComponent(BackboneElement):
    '''
    FHIR TaskOutputComponent resource

     Outputs produced by the Task.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR TaskOutputComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(TaskOutputComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR TaskOutputComponent constructor
        '''
        logging.info("FHIR TaskOutputComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.name = self.__add('name')
        self.valueBoolean = Boolean(self.__add('valueBoolean'))
        self.valueInteger = self.__add('valueInteger')
        self.valueDecimal = self.__add('valueDecimal')
        self.valueBase64Binary = self.__add('valueBase64Binary')
        self.valueInstant = self.__add('valueInstant')
        self.valueString = self.__add('valueString')
        self.valueUri = self.__add('valueUri')
        self.valueDate = Date(self.__add('valueDate'))
        self.valueDateTime = DateTime(self.__add('valueDateTime'))
        self.valueTime = Time(self.__add('valueTime'))
        self.valueCode = self.__add('valueCode')
        self.valueOid = self.__add('valueOid')
        self.valueUuid = self.__add('valueUuid')
        self.valueId = self.__add('valueId')
        self.valueUnsignedInt = self.__add('valueUnsignedInt')
        self.valuePositiveInt = self.__add('valuePositiveInt')
        self.valueMarkdown = self.__add('valueMarkdown')
        self.valueAnnotation = Annotation(self.__add('valueAnnotation'))
        self.valueAttachment = Attachment(self.__add('valueAttachment'))
        self.valueIdentifier = Identifier(self.__add('valueIdentifier'))
        self.valueCodeableConcept = CodeableConcept(self.__add('valueCodeableConcept'))
        self.valueCoding = Coding(self.__add('valueCoding'))
        self.valueQuantity = Quantity(self.__add('valueQuantity'))
        self.valueRange = Range(self.__add('valueRange'))
        self.valuePeriod = Period(self.__add('valuePeriod'))
        self.valueRatio = Ratio(self.__add('valueRatio'))
        self.valueReference = Reference(self.__add('valueReference'))
        self.valueSampledData = SampledData(self.__add('valueSampledData'))
        self.valueSignature = Signature(self.__add('valueSignature'))
        self.valueHumanName = HumanName(self.__add('valueHumanName'))
        self.valueAddress = Address(self.__add('valueAddress'))
        self.valueContactPoint = ContactPoint(self.__add('valueContactPoint'))
        self.valueTiming = Timing(self.__add('valueTiming'))
        self.valueMeta = Meta(self.__add('valueMeta'))
        self.valueElementDefinition = ElementDefinition(self.__add('valueElementDefinition'))
        self.valueModuleMetadata = ModuleMetadata(self.__add('valueModuleMetadata'))
        self.valueDataRequirement = DataRequirement(self.__add('valueDataRequirement'))
        self.valueActionDefinition = ActionDefinition(self.__add('valueActionDefinition'))
        self.valueParameterDefinition = ParameterDefinition(self.__add('valueParameterDefinition'))
        self.valueTriggerDefinition = TriggerDefinition(self.__add('valueTriggerDefinition'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.name:
            self.__json['name'] = self.name
        if self.valueBoolean:
            self.__json['valueBoolean'] = self.valueBoolean.json
        if self.valueInteger:
            self.__json['valueInteger'] = self.valueInteger
        if self.valueDecimal:
            self.__json['valueDecimal'] = self.valueDecimal
        if self.valueBase64Binary:
            self.__json['valueBase64Binary'] = self.valueBase64Binary
        if self.valueInstant:
            self.__json['valueInstant'] = self.valueInstant
        if self.valueString:
            self.__json['valueString'] = self.valueString
        if self.valueUri:
            self.__json['valueUri'] = self.valueUri
        if self.valueDate:
            self.__json['valueDate'] = self.valueDate.json
        if self.valueDateTime:
            self.__json['valueDateTime'] = self.valueDateTime.json
        if self.valueTime:
            self.__json['valueTime'] = self.valueTime.json
        if self.valueCode:
            self.__json['valueCode'] = self.valueCode
        if self.valueOid:
            self.__json['valueOid'] = self.valueOid
        if self.valueUuid:
            self.__json['valueUuid'] = self.valueUuid
        if self.valueId:
            self.__json['valueId'] = self.valueId
        if self.valueUnsignedInt:
            self.__json['valueUnsignedInt'] = self.valueUnsignedInt
        if self.valuePositiveInt:
            self.__json['valuePositiveInt'] = self.valuePositiveInt
        if self.valueMarkdown:
            self.__json['valueMarkdown'] = self.valueMarkdown
        if self.valueAnnotation:
            self.__json['valueAnnotation'] = self.valueAnnotation.json
        if self.valueAttachment:
            self.__json['valueAttachment'] = self.valueAttachment.json
        if self.valueIdentifier:
            self.__json['valueIdentifier'] = self.valueIdentifier.json
        if self.valueCodeableConcept:
            self.__json['valueCodeableConcept'] = self.valueCodeableConcept.json
        if self.valueCoding:
            self.__json['valueCoding'] = self.valueCoding.json
        if self.valueQuantity:
            self.__json['valueQuantity'] = self.valueQuantity.json
        if self.valueRange:
            self.__json['valueRange'] = self.valueRange.json
        if self.valuePeriod:
            self.__json['valuePeriod'] = self.valuePeriod.json
        if self.valueRatio:
            self.__json['valueRatio'] = self.valueRatio.json
        if self.valueReference:
            self.__json['valueReference'] = self.valueReference.json
        if self.valueSampledData:
            self.__json['valueSampledData'] = self.valueSampledData.json
        if self.valueSignature:
            self.__json['valueSignature'] = self.valueSignature.json
        if self.valueHumanName:
            self.__json['valueHumanName'] = self.valueHumanName.json
        if self.valueAddress:
            self.__json['valueAddress'] = self.valueAddress.json
        if self.valueContactPoint:
            self.__json['valueContactPoint'] = self.valueContactPoint.json
        if self.valueTiming:
            self.__json['valueTiming'] = self.valueTiming.json
        if self.valueMeta:
            self.__json['valueMeta'] = self.valueMeta.json
        if self.valueElementDefinition:
            self.__json['valueElementDefinition'] = self.valueElementDefinition.json
        if self.valueModuleMetadata:
            self.__json['valueModuleMetadata'] = self.valueModuleMetadata.json
        if self.valueDataRequirement:
            self.__json['valueDataRequirement'] = self.valueDataRequirement.json
        if self.valueActionDefinition:
            self.__json['valueActionDefinition'] = self.valueActionDefinition.json
        if self.valueParameterDefinition:
            self.__json['valueParameterDefinition'] = self.valueParameterDefinition.json
        if self.valueTriggerDefinition:
            self.__json['valueTriggerDefinition'] = self.valueTriggerDefinition.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR TaskOutputComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class Task(DomainResource):
    '''
    FHIR Task resource

     A task to be performed. If the element is present, it must have either a @value, an @id, or extensions

    identifier ->  The business identifier for this task.
    type ->  A name or code (or both) briefly describing what the task involves.
    description ->  A description of this task.
    performerType ->  The type of participant that can execute the task.
    priority ->  The priority of the task among other tasks of the same type. 
    status ->  The current status of the task. 
    failureReason ->  An explaination as to why this task failed.
    subject ->  The subject of the task.
    for_ ->  The entity who benefits from the performance of the service specified in the task (e.g., the patient).
    definition ->  A reference to a formal or informal definition of the task.
    created ->  The date and time this task was created.
    lastModified ->  The date and time of last modification to this task.
    creator ->  The creator of the task.
    owner ->  The owner of this task.  The participant who can execute this task.
    parent ->  Task that this particular task is part of.
    input ->  Inputs to the task.
    output ->  Outputs produced by the Task.

    
    '''
    

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'performerType':
                    list_to_add.append(Coding(obj))
                elif key == 'input':
                    list_to_add.append(TaskInputComponent(obj))
                elif key == 'output':
                    list_to_add.append(TaskOutputComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR Task __new__
        '''
        if json == None:
            return None
        else:
            return super(Task, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR Task constructor
        '''
        logging.info("FHIR Task: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "Task"
        self.identifier = Identifier(self.__add('identifier'))
        self.type = CodeableConcept(self.__add('type'))
        self.description = self.__add('description')
        if 'performerType' in self.__json:
            if isinstance(self.__json['performerType'], list):
                self.performerType = self.__add_list('performerType')
            else:
                self.performerType = Coding(self.__add('performerType'))
        else:
            self.performerType = None
        self.priority = self.__add('priority')
        self.status = self.__add('status')
        self.failureReason = CodeableConcept(self.__add('failureReason'))
        self.subject = Reference(self.__add('subject'))
        self.for_ = Reference(self.__add('for_'))
        self.definition = self.__add('definition')
        self.created = DateTime(self.__add('created'))
        self.lastModified = DateTime(self.__add('lastModified'))
        self.creator = Reference(self.__add('creator'))
        self.owner = Reference(self.__add('owner'))
        self.parent = Reference(self.__add('parent'))
        if 'input' in self.__json:
            if isinstance(self.__json['input'], list):
                self.input = self.__add_list('input')
            else:
                self.input = TaskInputComponent(self.__add('input'))
        else:
            self.input = None
        if 'output' in self.__json:
            if isinstance(self.__json['output'], list):
                self.output = self.__add_list('output')
            else:
                self.output = TaskOutputComponent(self.__add('output'))
        else:
            self.output = None


        # Parent Resource Init
        super(Task, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identifier:
            self.__json['identifier'] = self.identifier.json
        if self.type:
            self.__json['type'] = self.type.json
        if self.description:
            self.__json['description'] = self.description
        if self.performerType:
            self.__json['performerType'] = self.__get_list(self.performerType)
        if self.priority:
            self.__json['priority'] = self.priority
        if self.status:
            self.__json['status'] = self.status
        if self.failureReason:
            self.__json['failureReason'] = self.failureReason.json
        if self.subject:
            self.__json['subject'] = self.subject.json
        if self.for_:
            self.__json['for_'] = self.for_.json
        if self.definition:
            self.__json['definition'] = self.definition
        if self.created:
            self.__json['created'] = self.created.json
        if self.lastModified:
            self.__json['lastModified'] = self.lastModified.json
        if self.creator:
            self.__json['creator'] = self.creator.json
        if self.owner:
            self.__json['owner'] = self.owner.json
        if self.parent:
            self.__json['parent'] = self.parent.json
        if self.input:
            self.__json['input'] = self.__get_list(self.input)
        if self.output:
            self.__json['output'] = self.__get_list(self.output)

        # Add json attributes
        self.__json = super(Task, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR Task string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class TestScriptContactComponent(BackboneElement):
    '''
    FHIR TestScriptContactComponent resource

     Contacts to assist a user in finding and communicating with the publisher.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'telecom':
                    list_to_add.append(ContactPoint(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR TestScriptContactComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(TestScriptContactComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR TestScriptContactComponent constructor
        '''
        logging.info("FHIR TestScriptContactComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.name = self.__add('name')
        if 'telecom' in self.__json:
            if isinstance(self.__json['telecom'], list):
                self.telecom = self.__add_list('telecom')
            else:
                self.telecom = ContactPoint(self.__add('telecom'))
        else:
            self.telecom = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.name:
            self.__json['name'] = self.name
        if self.telecom:
            self.__json['telecom'] = self.__get_list(self.telecom)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR TestScriptContactComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class TestScriptOriginComponent(BackboneElement):
    '''
    FHIR TestScriptOriginComponent resource

     An abstract server used in operations within this test script in the origin element.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR TestScriptOriginComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(TestScriptOriginComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR TestScriptOriginComponent constructor
        '''
        logging.info("FHIR TestScriptOriginComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.index = self.__add('index')
        self.profile = Coding(self.__add('profile'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.index:
            self.__json['index'] = self.index
        if self.profile:
            self.__json['profile'] = self.profile.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR TestScriptOriginComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class TestScriptDestinationComponent(BackboneElement):
    '''
    FHIR TestScriptDestinationComponent resource

     An abstract server used in operations within this test script in the destination element.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR TestScriptDestinationComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(TestScriptDestinationComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR TestScriptDestinationComponent constructor
        '''
        logging.info("FHIR TestScriptDestinationComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.index = self.__add('index')
        self.profile = Coding(self.__add('profile'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.index:
            self.__json['index'] = self.index
        if self.profile:
            self.__json['profile'] = self.profile.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR TestScriptDestinationComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class TestScriptLinkComponent(BackboneElement):
    '''
    FHIR TestScriptLinkComponent resource

     A link to the FHIR specification that this test is covering.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR TestScriptLinkComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(TestScriptLinkComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR TestScriptLinkComponent constructor
        '''
        logging.info("FHIR TestScriptLinkComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType


        return self.__json
        
    def __repr__(self):
        '''
        FHIR TestScriptLinkComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class TestScriptCapabilityComponent(BackboneElement):
    '''
    FHIR TestScriptCapabilityComponent resource

     Capabilities that must exist and are assumed to function correctly on the FHIR server being tested.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR TestScriptCapabilityComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(TestScriptCapabilityComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR TestScriptCapabilityComponent constructor
        '''
        logging.info("FHIR TestScriptCapabilityComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.required = Boolean(self.__add('required'))
        self.validated = Boolean(self.__add('validated'))
        self.description = self.__add('description')
        if 'origin' in self.__json:
            if isinstance(self.__json['origin'], list):
                self.origin = self.__add_list('origin')
            else:
                self.origin = self.__add('origin')
        else:
            self.origin = None
        self.destination = self.__add('destination')
        if 'link' in self.__json:
            if isinstance(self.__json['link'], list):
                self.link = self.__add_list('link')
            else:
                self.link = self.__add('link')
        else:
            self.link = None
        self.conformance = Reference(self.__add('conformance'))
        self.required = Boolean(self.__add('required'))
        self.validated = Boolean(self.__add('validated'))
        self.description = self.__add('description')
        if 'origin' in self.__json:
            if isinstance(self.__json['origin'], list):
                self.origin = self.__add_list('origin')
            else:
                self.origin = self.__add('origin')
        else:
            self.origin = None
        self.destination = self.__add('destination')
        if 'link' in self.__json:
            if isinstance(self.__json['link'], list):
                self.link = self.__add_list('link')
            else:
                self.link = self.__add('link')
        else:
            self.link = None
        self.conformance = Reference(self.__add('conformance'))
        self.required = Boolean(self.__add('required'))
        self.validated = Boolean(self.__add('validated'))
        self.description = self.__add('description')
        if 'origin' in self.__json:
            if isinstance(self.__json['origin'], list):
                self.origin = self.__add_list('origin')
            else:
                self.origin = self.__add('origin')
        else:
            self.origin = None
        self.destination = self.__add('destination')
        if 'link' in self.__json:
            if isinstance(self.__json['link'], list):
                self.link = self.__add_list('link')
            else:
                self.link = self.__add('link')
        else:
            self.link = None
        self.conformance = Reference(self.__add('conformance'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.required:
            self.__json['required'] = self.required.json
        if self.validated:
            self.__json['validated'] = self.validated.json
        if self.description:
            self.__json['description'] = self.description
        if self.origin:
            self.__json['origin'] = self.__get_list(self.origin)
        if self.destination:
            self.__json['destination'] = self.destination
        if self.link:
            self.__json['link'] = self.__get_list(self.link)
        if self.conformance:
            self.__json['conformance'] = self.conformance.json
        if self.required:
            self.__json['required'] = self.required.json
        if self.validated:
            self.__json['validated'] = self.validated.json
        if self.description:
            self.__json['description'] = self.description
        if self.origin:
            self.__json['origin'] = self.__get_list(self.origin)
        if self.destination:
            self.__json['destination'] = self.destination
        if self.link:
            self.__json['link'] = self.__get_list(self.link)
        if self.conformance:
            self.__json['conformance'] = self.conformance.json
        if self.required:
            self.__json['required'] = self.required.json
        if self.validated:
            self.__json['validated'] = self.validated.json
        if self.description:
            self.__json['description'] = self.description
        if self.origin:
            self.__json['origin'] = self.__get_list(self.origin)
        if self.destination:
            self.__json['destination'] = self.destination
        if self.link:
            self.__json['link'] = self.__get_list(self.link)
        if self.conformance:
            self.__json['conformance'] = self.conformance.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR TestScriptCapabilityComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class TestScriptMetadataComponent(BackboneElement):
    '''
    FHIR TestScriptMetadataComponent resource

     The required capability must exist and are assumed to function correctly on the FHIR server being tested.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'link':
                    list_to_add.append(TestScriptLinkComponent(obj))
                elif key == 'capability':
                    list_to_add.append(TestScriptCapabilityComponent(obj))
                elif key == 'link':
                    list_to_add.append(TestScriptLinkComponent(obj))
                elif key == 'capability':
                    list_to_add.append(TestScriptCapabilityComponent(obj))
                elif key == 'link':
                    list_to_add.append(TestScriptLinkComponent(obj))
                elif key == 'capability':
                    list_to_add.append(TestScriptCapabilityComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR TestScriptMetadataComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(TestScriptMetadataComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR TestScriptMetadataComponent constructor
        '''
        logging.info("FHIR TestScriptMetadataComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        if 'link' in self.__json:
            if isinstance(self.__json['link'], list):
                self.link = self.__add_list('link')
            else:
                self.link = TestScriptLinkComponent(self.__add('link'))
        else:
            self.link = None
        if 'capability' in self.__json:
            if isinstance(self.__json['capability'], list):
                self.capability = self.__add_list('capability')
            else:
                self.capability = TestScriptCapabilityComponent(self.__add('capability'))
        else:
            self.capability = None
        if 'link' in self.__json:
            if isinstance(self.__json['link'], list):
                self.link = self.__add_list('link')
            else:
                self.link = TestScriptLinkComponent(self.__add('link'))
        else:
            self.link = None
        if 'capability' in self.__json:
            if isinstance(self.__json['capability'], list):
                self.capability = self.__add_list('capability')
            else:
                self.capability = TestScriptCapabilityComponent(self.__add('capability'))
        else:
            self.capability = None
        if 'link' in self.__json:
            if isinstance(self.__json['link'], list):
                self.link = self.__add_list('link')
            else:
                self.link = TestScriptLinkComponent(self.__add('link'))
        else:
            self.link = None
        if 'capability' in self.__json:
            if isinstance(self.__json['capability'], list):
                self.capability = self.__add_list('capability')
            else:
                self.capability = TestScriptCapabilityComponent(self.__add('capability'))
        else:
            self.capability = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.link:
            self.__json['link'] = self.__get_list(self.link)
        if self.capability:
            self.__json['capability'] = self.__get_list(self.capability)
        if self.link:
            self.__json['link'] = self.__get_list(self.link)
        if self.capability:
            self.__json['capability'] = self.__get_list(self.capability)
        if self.link:
            self.__json['link'] = self.__get_list(self.link)
        if self.capability:
            self.__json['capability'] = self.__get_list(self.capability)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR TestScriptMetadataComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class TestScriptFixtureComponent(BackboneElement):
    '''
    FHIR TestScriptFixtureComponent resource

     Fixture in the test script - by reference (uri). All fixtures are required for the test script to execute.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR TestScriptFixtureComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(TestScriptFixtureComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR TestScriptFixtureComponent constructor
        '''
        logging.info("FHIR TestScriptFixtureComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.autocreate = Boolean(self.__add('autocreate'))
        self.autodelete = Boolean(self.__add('autodelete'))
        self.resource = Reference(self.__add('resource'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.autocreate:
            self.__json['autocreate'] = self.autocreate.json
        if self.autodelete:
            self.__json['autodelete'] = self.autodelete.json
        if self.resource:
            self.__json['resource'] = self.resource.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR TestScriptFixtureComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class TestScriptVariableComponent(BackboneElement):
    '''
    FHIR TestScriptVariableComponent resource

     Variable is set based either on element value in response body or on header field value in the response headers.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR TestScriptVariableComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(TestScriptVariableComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR TestScriptVariableComponent constructor
        '''
        logging.info("FHIR TestScriptVariableComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.name = self.__add('name')
        self.defaultValue = self.__add('defaultValue')
        self.headerField = self.__add('headerField')
        self.path = self.__add('path')
        self.sourceId = self.__add('sourceId')



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.name:
            self.__json['name'] = self.name
        if self.defaultValue:
            self.__json['defaultValue'] = self.defaultValue
        if self.headerField:
            self.__json['headerField'] = self.headerField
        if self.path:
            self.__json['path'] = self.path
        if self.sourceId:
            self.__json['sourceId'] = self.sourceId


        return self.__json
        
    def __repr__(self):
        '''
        FHIR TestScriptVariableComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class TestScriptParamComponent(BackboneElement):
    '''
    FHIR TestScriptParamComponent resource

     Each rule template can take one or more parameters for rule evaluation.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR TestScriptParamComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(TestScriptParamComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR TestScriptParamComponent constructor
        '''
        logging.info("FHIR TestScriptParamComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.name = self.__add('name')
        self.value = self.__add('value')



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.name:
            self.__json['name'] = self.name
        if self.value:
            self.__json['value'] = self.value


        return self.__json
        
    def __repr__(self):
        '''
        FHIR TestScriptParamComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class TestScriptRuleComponent(BackboneElement):
    '''
    FHIR TestScriptRuleComponent resource

     Assert rule to be used in one or more asserts within the test script.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'param':
                    list_to_add.append(TestScriptParamComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR TestScriptRuleComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(TestScriptRuleComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR TestScriptRuleComponent constructor
        '''
        logging.info("FHIR TestScriptRuleComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.resource = Reference(self.__add('resource'))
        if 'param' in self.__json:
            if isinstance(self.__json['param'], list):
                self.param = self.__add_list('param')
            else:
                self.param = TestScriptParamComponent(self.__add('param'))
        else:
            self.param = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.resource:
            self.__json['resource'] = self.resource.json
        if self.param:
            self.__json['param'] = self.__get_list(self.param)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR TestScriptRuleComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class TestScriptRule1Component(BackboneElement):
    '''
    FHIR TestScriptRule1Component resource

     Id of the referenced rule within the external ruleset template.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR TestScriptRule1Component __new__
        '''
        if json == None:
            return None
        else:
            return super(TestScriptRule1Component, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR TestScriptRule1Component constructor
        '''
        logging.info("FHIR TestScriptRule1Component: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType


        return self.__json
        
    def __repr__(self):
        '''
        FHIR TestScriptRule1Component string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class TestScriptRulesetComponent(BackboneElement):
    '''
    FHIR TestScriptRulesetComponent resource

     Contains one or more rules.  Offers a way to group rules so assertions could reference the group of rules and have them all applied.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'rule':
                    list_to_add.append(TestScriptRule1Component(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR TestScriptRulesetComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(TestScriptRulesetComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR TestScriptRulesetComponent constructor
        '''
        logging.info("FHIR TestScriptRulesetComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.resource = Reference(self.__add('resource'))
        if 'rule' in self.__json:
            if isinstance(self.__json['rule'], list):
                self.rule = self.__add_list('rule')
            else:
                self.rule = TestScriptRule1Component(self.__add('rule'))
        else:
            self.rule = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.resource:
            self.__json['resource'] = self.resource.json
        if self.rule:
            self.__json['rule'] = self.__get_list(self.rule)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR TestScriptRulesetComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class TestScriptRequestHeaderComponent(BackboneElement):
    '''
    FHIR TestScriptRequestHeaderComponent resource

     Header elements would be used to set HTTP headers.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR TestScriptRequestHeaderComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(TestScriptRequestHeaderComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR TestScriptRequestHeaderComponent constructor
        '''
        logging.info("FHIR TestScriptRequestHeaderComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.field = self.__add('field')
        self.value = self.__add('value')
        self.field = self.__add('field')
        self.value = self.__add('value')



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.field:
            self.__json['field'] = self.field
        if self.value:
            self.__json['value'] = self.value
        if self.field:
            self.__json['field'] = self.field
        if self.value:
            self.__json['value'] = self.value


        return self.__json
        
    def __repr__(self):
        '''
        FHIR TestScriptRequestHeaderComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class TestScriptOperationComponent(BackboneElement):
    '''
    FHIR TestScriptOperationComponent resource

     The operation to perform.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'requestHeader':
                    list_to_add.append(TestScriptRequestHeaderComponent(obj))
                elif key == 'requestHeader':
                    list_to_add.append(TestScriptRequestHeaderComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR TestScriptOperationComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(TestScriptOperationComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR TestScriptOperationComponent constructor
        '''
        logging.info("FHIR TestScriptOperationComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.type = Coding(self.__add('type'))
        self.resource = self.__add('resource')
        self.label = self.__add('label')
        self.description = self.__add('description')
        self.accept = self.__add('accept')
        self.contentType = self.__add('contentType')
        self.destination = self.__add('destination')
        self.encodeRequestUrl = Boolean(self.__add('encodeRequestUrl'))
        self.origin = self.__add('origin')
        self.params = self.__add('params')
        if 'requestHeader' in self.__json:
            if isinstance(self.__json['requestHeader'], list):
                self.requestHeader = self.__add_list('requestHeader')
            else:
                self.requestHeader = TestScriptRequestHeaderComponent(self.__add('requestHeader'))
        else:
            self.requestHeader = None
        self.responseId = self.__add('responseId')
        self.sourceId = self.__add('sourceId')
        self.targetId = self.__add('targetId')
        self.url = self.__add('url')
        self.type = Coding(self.__add('type'))
        self.resource = self.__add('resource')
        self.label = self.__add('label')
        self.description = self.__add('description')
        self.accept = self.__add('accept')
        self.contentType = self.__add('contentType')
        self.destination = self.__add('destination')
        self.encodeRequestUrl = Boolean(self.__add('encodeRequestUrl'))
        self.origin = self.__add('origin')
        self.params = self.__add('params')
        if 'requestHeader' in self.__json:
            if isinstance(self.__json['requestHeader'], list):
                self.requestHeader = self.__add_list('requestHeader')
            else:
                self.requestHeader = TestScriptRequestHeaderComponent(self.__add('requestHeader'))
        else:
            self.requestHeader = None
        self.responseId = self.__add('responseId')
        self.sourceId = self.__add('sourceId')
        self.targetId = self.__add('targetId')
        self.url = self.__add('url')



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.type:
            self.__json['type'] = self.type.json
        if self.resource:
            self.__json['resource'] = self.resource
        if self.label:
            self.__json['label'] = self.label
        if self.description:
            self.__json['description'] = self.description
        if self.accept:
            self.__json['accept'] = self.accept
        if self.contentType:
            self.__json['contentType'] = self.contentType
        if self.destination:
            self.__json['destination'] = self.destination
        if self.encodeRequestUrl:
            self.__json['encodeRequestUrl'] = self.encodeRequestUrl.json
        if self.origin:
            self.__json['origin'] = self.origin
        if self.params:
            self.__json['params'] = self.params
        if self.requestHeader:
            self.__json['requestHeader'] = self.__get_list(self.requestHeader)
        if self.responseId:
            self.__json['responseId'] = self.responseId
        if self.sourceId:
            self.__json['sourceId'] = self.sourceId
        if self.targetId:
            self.__json['targetId'] = self.targetId
        if self.url:
            self.__json['url'] = self.url
        if self.type:
            self.__json['type'] = self.type.json
        if self.resource:
            self.__json['resource'] = self.resource
        if self.label:
            self.__json['label'] = self.label
        if self.description:
            self.__json['description'] = self.description
        if self.accept:
            self.__json['accept'] = self.accept
        if self.contentType:
            self.__json['contentType'] = self.contentType
        if self.destination:
            self.__json['destination'] = self.destination
        if self.encodeRequestUrl:
            self.__json['encodeRequestUrl'] = self.encodeRequestUrl.json
        if self.origin:
            self.__json['origin'] = self.origin
        if self.params:
            self.__json['params'] = self.params
        if self.requestHeader:
            self.__json['requestHeader'] = self.__get_list(self.requestHeader)
        if self.responseId:
            self.__json['responseId'] = self.responseId
        if self.sourceId:
            self.__json['sourceId'] = self.sourceId
        if self.targetId:
            self.__json['targetId'] = self.targetId
        if self.url:
            self.__json['url'] = self.url


        return self.__json
        
    def __repr__(self):
        '''
        FHIR TestScriptOperationComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class TestScriptAssertComponent(BackboneElement):
    '''
    FHIR TestScriptAssertComponent resource

     Evaluates the results of previous operations to determine if the server under test behaves appropriately.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR TestScriptAssertComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(TestScriptAssertComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR TestScriptAssertComponent constructor
        '''
        logging.info("FHIR TestScriptAssertComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType


        return self.__json
        
    def __repr__(self):
        '''
        FHIR TestScriptAssertComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class TestScriptActionComponent(BackboneElement):
    '''
    FHIR TestScriptActionComponent resource

     Action would contain either an operation or an assertion.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR TestScriptActionComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(TestScriptActionComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR TestScriptActionComponent constructor
        '''
        logging.info("FHIR TestScriptActionComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.operation = TestScriptOperationComponent(self.__add('operation'))
        self.assert_ = TestScriptAssertComponent(self.__add('assert_'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.operation:
            self.__json['operation'] = self.operation.json
        if self.assert_:
            self.__json['assert_'] = self.assert_.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR TestScriptActionComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class TestScriptSetupComponent(BackboneElement):
    '''
    FHIR TestScriptSetupComponent resource

     A series of required setup operations before tests are executed.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'action':
                    list_to_add.append(TestScriptActionComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR TestScriptSetupComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(TestScriptSetupComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR TestScriptSetupComponent constructor
        '''
        logging.info("FHIR TestScriptSetupComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.metadata = TestScriptMetadataComponent(self.__add('metadata'))
        if 'action' in self.__json:
            if isinstance(self.__json['action'], list):
                self.action = self.__add_list('action')
            else:
                self.action = TestScriptActionComponent(self.__add('action'))
        else:
            self.action = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.metadata:
            self.__json['metadata'] = self.metadata.json
        if self.action:
            self.__json['action'] = self.__get_list(self.action)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR TestScriptSetupComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class TestScriptAction1Component(BackboneElement):
    '''
    FHIR TestScriptAction1Component resource

     Action would contain either an operation or an assertion.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR TestScriptAction1Component __new__
        '''
        if json == None:
            return None
        else:
            return super(TestScriptAction1Component, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR TestScriptAction1Component constructor
        '''
        logging.info("FHIR TestScriptAction1Component: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.operation = TestScriptOperationComponent(self.__add('operation'))
        self.assert_ = TestScriptAssertComponent(self.__add('assert_'))



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.operation:
            self.__json['operation'] = self.operation.json
        if self.assert_:
            self.__json['assert_'] = self.assert_.json


        return self.__json
        
    def __repr__(self):
        '''
        FHIR TestScriptAction1Component string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class TestScriptTestComponent(BackboneElement):
    '''
    FHIR TestScriptTestComponent resource

     A test in this script.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'action':
                    list_to_add.append(TestScriptAction1Component(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR TestScriptTestComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(TestScriptTestComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR TestScriptTestComponent constructor
        '''
        logging.info("FHIR TestScriptTestComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.name = self.__add('name')
        self.description = self.__add('description')
        self.metadata = TestScriptMetadataComponent(self.__add('metadata'))
        if 'action' in self.__json:
            if isinstance(self.__json['action'], list):
                self.action = self.__add_list('action')
            else:
                self.action = TestScriptAction1Component(self.__add('action'))
        else:
            self.action = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.name:
            self.__json['name'] = self.name
        if self.description:
            self.__json['description'] = self.description
        if self.metadata:
            self.__json['metadata'] = self.metadata.json
        if self.action:
            self.__json['action'] = self.__get_list(self.action)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR TestScriptTestComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class TestScriptAction2Component(BackboneElement):
    '''
    FHIR TestScriptAction2Component resource

     The teardown action will only contain an operation.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR TestScriptAction2Component __new__
        '''
        if json == None:
            return None
        else:
            return super(TestScriptAction2Component, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR TestScriptAction2Component constructor
        '''
        logging.info("FHIR TestScriptAction2Component: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType


        return self.__json
        
    def __repr__(self):
        '''
        FHIR TestScriptAction2Component string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class TestScriptTeardownComponent(BackboneElement):
    '''
    FHIR TestScriptTeardownComponent resource

     A series of operations required to clean up after the all the tests are executed (successfully or otherwise).

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'action':
                    list_to_add.append(TestScriptAction2Component(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR TestScriptTeardownComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(TestScriptTeardownComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR TestScriptTeardownComponent constructor
        '''
        logging.info("FHIR TestScriptTeardownComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        if 'action' in self.__json:
            if isinstance(self.__json['action'], list):
                self.action = self.__add_list('action')
            else:
                self.action = TestScriptAction2Component(self.__add('action'))
        else:
            self.action = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.action:
            self.__json['action'] = self.__get_list(self.action)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR TestScriptTeardownComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class TestScript(DomainResource):
    '''
    FHIR TestScript resource

     TestScript is a resource that specifies a suite of tests against a FHIR server implementation to determine compliance against the FHIR specification. If the element is present, it must have either a @value, an @id, or extensions

    url ->  An absolute URL that is used to identify this Test Script. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this Test Script is (or will be) published.
    version ->  The identifier that is used to identify this version of the TestScript. This is an arbitrary value managed by the TestScript author manually.
    name ->  A free text natural language name identifying the TestScript.
    status ->  The status of the TestScript. 
    identifier ->  Identifier for the TestScript assigned for external purposes outside the context of FHIR.
    experimental ->  This TestScript was authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
    publisher ->  The name of the individual or organization that published the Test Script.
    contact ->  Contacts to assist a user in finding and communicating with the publisher.
    date ->  The date this version of the test tcript was published. The date must change when the business version changes, if it does, and it must change if the status code changes. In addition, it should change when the substantive content of the test cases change.
    description ->  A free text natural language description of the TestScript and its use.
    useContext ->  The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching of Test Scripts.
    requirements ->  Explains why this Test Script is needed and why it's been constrained as it has.
    copyright ->  A copyright statement relating to the Test Script and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the details of the constraints and mappings.
    origin ->  An abstract server used in operations within this test script in the origin element.
    destination ->  An abstract server used in operations within this test script in the destination element.
    metadata ->  The required capability must exist and are assumed to function correctly on the FHIR server being tested.
    fixture ->  Fixture in the test script - by reference (uri). All fixtures are required for the test script to execute.
    profile ->  Reference to the profile to be used for validation.
    variable ->  Variable is set based either on element value in response body or on header field value in the response headers.
    rule ->  Assert rule to be used in one or more asserts within the test script.
    ruleset ->  Contains one or more rules.  Offers a way to group rules so assertions could reference the group of rules and have them all applied.
    setup ->  A series of required setup operations before tests are executed.
    test ->  A test in this script.
    teardown ->  A series of operations required to clean up after the all the tests are executed (successfully or otherwise).

    # Search parameters
        TestScript.search.description
        TestScript.search.identifier
        TestScript.search.name
        TestScript.search.testscript-capability
        TestScript.search.testscript-setup-capability
        TestScript.search.testscript-test-capability
        TestScript.search.url
    '''
    # search parameters
    par = [("description", "string"),
           ("identifier", "token"),
           ("name", "string"),
           ("testscript-capability", "string"),
           ("testscript-setup-capability", "string"),
           ("testscript-test-capability", "string"),
           ("url", "uri")]

    search = Params(par, "TestScript")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'contact':
                    list_to_add.append(TestScriptContactComponent(obj))
                elif key == 'useContext':
                    list_to_add.append(CodeableConcept(obj))
                elif key == 'origin':
                    list_to_add.append(TestScriptOriginComponent(obj))
                elif key == 'destination':
                    list_to_add.append(TestScriptDestinationComponent(obj))
                elif key == 'fixture':
                    list_to_add.append(TestScriptFixtureComponent(obj))
                elif key == 'profile':
                    list_to_add.append(Reference(obj))
                elif key == 'variable':
                    list_to_add.append(TestScriptVariableComponent(obj))
                elif key == 'rule':
                    list_to_add.append(TestScriptRuleComponent(obj))
                elif key == 'ruleset':
                    list_to_add.append(TestScriptRulesetComponent(obj))
                elif key == 'test':
                    list_to_add.append(TestScriptTestComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR TestScript __new__
        '''
        if json == None:
            return None
        else:
            return super(TestScript, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR TestScript constructor
        '''
        logging.info("FHIR TestScript: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "TestScript"
        self.url = self.__add('url')
        self.version = self.__add('version')
        self.name = self.__add('name')
        self.status = self.__add('status')
        self.identifier = Identifier(self.__add('identifier'))
        self.experimental = Boolean(self.__add('experimental'))
        self.publisher = self.__add('publisher')
        if 'contact' in self.__json:
            if isinstance(self.__json['contact'], list):
                self.contact = self.__add_list('contact')
            else:
                self.contact = TestScriptContactComponent(self.__add('contact'))
        else:
            self.contact = None
        self.date = DateTime(self.__add('date'))
        self.description = self.__add('description')
        if 'useContext' in self.__json:
            if isinstance(self.__json['useContext'], list):
                self.useContext = self.__add_list('useContext')
            else:
                self.useContext = CodeableConcept(self.__add('useContext'))
        else:
            self.useContext = None
        self.requirements = self.__add('requirements')
        self.copyright = self.__add('copyright')
        if 'origin' in self.__json:
            if isinstance(self.__json['origin'], list):
                self.origin = self.__add_list('origin')
            else:
                self.origin = TestScriptOriginComponent(self.__add('origin'))
        else:
            self.origin = None
        if 'destination' in self.__json:
            if isinstance(self.__json['destination'], list):
                self.destination = self.__add_list('destination')
            else:
                self.destination = TestScriptDestinationComponent(self.__add('destination'))
        else:
            self.destination = None
        self.metadata = TestScriptMetadataComponent(self.__add('metadata'))
        if 'fixture' in self.__json:
            if isinstance(self.__json['fixture'], list):
                self.fixture = self.__add_list('fixture')
            else:
                self.fixture = TestScriptFixtureComponent(self.__add('fixture'))
        else:
            self.fixture = None
        if 'profile' in self.__json:
            if isinstance(self.__json['profile'], list):
                self.profile = self.__add_list('profile')
            else:
                self.profile = Reference(self.__add('profile'))
        else:
            self.profile = None
        if 'variable' in self.__json:
            if isinstance(self.__json['variable'], list):
                self.variable = self.__add_list('variable')
            else:
                self.variable = TestScriptVariableComponent(self.__add('variable'))
        else:
            self.variable = None
        if 'rule' in self.__json:
            if isinstance(self.__json['rule'], list):
                self.rule = self.__add_list('rule')
            else:
                self.rule = TestScriptRuleComponent(self.__add('rule'))
        else:
            self.rule = None
        if 'ruleset' in self.__json:
            if isinstance(self.__json['ruleset'], list):
                self.ruleset = self.__add_list('ruleset')
            else:
                self.ruleset = TestScriptRulesetComponent(self.__add('ruleset'))
        else:
            self.ruleset = None
        self.setup = TestScriptSetupComponent(self.__add('setup'))
        if 'test' in self.__json:
            if isinstance(self.__json['test'], list):
                self.test = self.__add_list('test')
            else:
                self.test = TestScriptTestComponent(self.__add('test'))
        else:
            self.test = None
        self.teardown = TestScriptTeardownComponent(self.__add('teardown'))


        # Parent Resource Init
        super(TestScript, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.url:
            self.__json['url'] = self.url
        if self.version:
            self.__json['version'] = self.version
        if self.name:
            self.__json['name'] = self.name
        if self.status:
            self.__json['status'] = self.status
        if self.identifier:
            self.__json['identifier'] = self.identifier.json
        if self.experimental:
            self.__json['experimental'] = self.experimental.json
        if self.publisher:
            self.__json['publisher'] = self.publisher
        if self.contact:
            self.__json['contact'] = self.__get_list(self.contact)
        if self.date:
            self.__json['date'] = self.date.json
        if self.description:
            self.__json['description'] = self.description
        if self.useContext:
            self.__json['useContext'] = self.__get_list(self.useContext)
        if self.requirements:
            self.__json['requirements'] = self.requirements
        if self.copyright:
            self.__json['copyright'] = self.copyright
        if self.origin:
            self.__json['origin'] = self.__get_list(self.origin)
        if self.destination:
            self.__json['destination'] = self.__get_list(self.destination)
        if self.metadata:
            self.__json['metadata'] = self.metadata.json
        if self.fixture:
            self.__json['fixture'] = self.__get_list(self.fixture)
        if self.profile:
            self.__json['profile'] = self.__get_list(self.profile)
        if self.variable:
            self.__json['variable'] = self.__get_list(self.variable)
        if self.rule:
            self.__json['rule'] = self.__get_list(self.rule)
        if self.ruleset:
            self.__json['ruleset'] = self.__get_list(self.ruleset)
        if self.setup:
            self.__json['setup'] = self.setup.json
        if self.test:
            self.__json['test'] = self.__get_list(self.test)
        if self.teardown:
            self.__json['teardown'] = self.teardown.json

        # Add json attributes
        self.__json = super(TestScript, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR TestScript string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ValueSetContactComponent(BackboneElement):
    '''
    FHIR ValueSetContactComponent resource

     Contacts to assist a user in finding and communicating with the publisher.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'telecom':
                    list_to_add.append(ContactPoint(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ValueSetContactComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ValueSetContactComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ValueSetContactComponent constructor
        '''
        logging.info("FHIR ValueSetContactComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.name = self.__add('name')
        if 'telecom' in self.__json:
            if isinstance(self.__json['telecom'], list):
                self.telecom = self.__add_list('telecom')
            else:
                self.telecom = ContactPoint(self.__add('telecom'))
        else:
            self.telecom = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.name:
            self.__json['name'] = self.name
        if self.telecom:
            self.__json['telecom'] = self.__get_list(self.telecom)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ValueSetContactComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ValueSetIncludeComponent(BackboneElement):
    '''
    FHIR ValueSetIncludeComponent resource

     Include one or more codes from a code system.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ValueSetIncludeComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ValueSetIncludeComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ValueSetIncludeComponent constructor
        '''
        logging.info("FHIR ValueSetIncludeComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ValueSetIncludeComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ValueSetComposeComponent(BackboneElement):
    '''
    FHIR ValueSetComposeComponent resource

     A set of criteria that provide the content logical definition of the value set by including or excluding codes from outside this value set.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'include':
                    list_to_add.append(ValueSetIncludeComponent(obj))
                elif key == 'exclude':
                    list_to_add.append(ValueSetIncludeComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ValueSetComposeComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ValueSetComposeComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ValueSetComposeComponent constructor
        '''
        logging.info("FHIR ValueSetComposeComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        if 'import_' in self.__json:
            if isinstance(self.__json['import_'], list):
                self.import_ = self.__add_list('import_')
            else:
                self.import_ = self.__add('import_')
        else:
            self.import_ = None
        if 'include' in self.__json:
            if isinstance(self.__json['include'], list):
                self.include = self.__add_list('include')
            else:
                self.include = ValueSetIncludeComponent(self.__add('include'))
        else:
            self.include = None
        if 'exclude' in self.__json:
            if isinstance(self.__json['exclude'], list):
                self.exclude = self.__add_list('exclude')
            else:
                self.exclude = ValueSetIncludeComponent(self.__add('exclude'))
        else:
            self.exclude = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.import_:
            self.__json['import_'] = self.__get_list(self.import_)
        if self.include:
            self.__json['include'] = self.__get_list(self.include)
        if self.exclude:
            self.__json['exclude'] = self.__get_list(self.exclude)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ValueSetComposeComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ValueSetParameterComponent(BackboneElement):
    '''
    FHIR ValueSetParameterComponent resource

     A parameter that controlled the expansion process. These parameters may be used by users of expanded value sets to check whether the expansion is suitable for a particular purpose, or to pick the correct expansion.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ValueSetParameterComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ValueSetParameterComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ValueSetParameterComponent constructor
        '''
        logging.info("FHIR ValueSetParameterComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ValueSetParameterComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ValueSetContainsComponent(BackboneElement):
    '''
    FHIR ValueSetContainsComponent resource

     The codes that are contained in the value set expansion.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ValueSetContainsComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ValueSetContainsComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ValueSetContainsComponent constructor
        '''
        logging.info("FHIR ValueSetContainsComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ValueSetContainsComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ValueSetExpansionComponent(BackboneElement):
    '''
    FHIR ValueSetExpansionComponent resource

     A value set can also be "expanded", where the value set is turned into a simple collection of enumerated codes. This element holds the expansion, if it has been performed.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'parameter':
                    list_to_add.append(ValueSetParameterComponent(obj))
                elif key == 'contains':
                    list_to_add.append(ValueSetContainsComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ValueSetExpansionComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(ValueSetExpansionComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ValueSetExpansionComponent constructor
        '''
        logging.info("FHIR ValueSetExpansionComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.identifier = self.__add('identifier')
        self.timestamp = DateTime(self.__add('timestamp'))
        self.total = self.__add('total')
        self.offset = self.__add('offset')
        if 'parameter' in self.__json:
            if isinstance(self.__json['parameter'], list):
                self.parameter = self.__add_list('parameter')
            else:
                self.parameter = ValueSetParameterComponent(self.__add('parameter'))
        else:
            self.parameter = None
        if 'contains' in self.__json:
            if isinstance(self.__json['contains'], list):
                self.contains = self.__add_list('contains')
            else:
                self.contains = ValueSetContainsComponent(self.__add('contains'))
        else:
            self.contains = None



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identifier:
            self.__json['identifier'] = self.identifier
        if self.timestamp:
            self.__json['timestamp'] = self.timestamp.json
        if self.total:
            self.__json['total'] = self.total
        if self.offset:
            self.__json['offset'] = self.offset
        if self.parameter:
            self.__json['parameter'] = self.__get_list(self.parameter)
        if self.contains:
            self.__json['contains'] = self.__get_list(self.contains)


        return self.__json
        
    def __repr__(self):
        '''
        FHIR ValueSetExpansionComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class ValueSet(DomainResource):
    '''
    FHIR ValueSet resource

     A value set specifies a set of codes drawn from one or more code systems. If the element is present, it must have either a @value, an @id, or extensions

    url ->  An absolute URL that is used to identify this value set when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this value set is (or will be) published.
    identifier ->  Formal identifier that is used to identify this value set when it is represented in other formats, or referenced in a specification, model, design or an instance.
    version ->  Used to identify this version of the value set when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the profile author manually and the value should be a timestamp.
    name ->  A free text natural language name describing the value set.
    status ->  The status of the value set. 
    experimental ->  This valueset was authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
    publisher ->  The name of the individual or organization that published the value set.
    contact ->  Contacts to assist a user in finding and communicating with the publisher.
    date ->  The date that the value set status was last changed. The date must change when the business version changes, if it does, and it must change if the status code changes. In addition, it should change when the substantive content of the implementation guide changes (e.g. the 'content logical definition').
    lockedDate ->  If a locked date is defined, then the Content Logical Definition must be evaluated using the current version of all referenced code system(s) and value set instances as of the locked date.
    description ->  A free text natural language description of the use of the value set - reason for definition, "the semantic space" to be included in the value set, conditions of use, etc. The description may include a list of expected usages for the value set and can also describe the approach taken to build the value set.
    useContext ->  The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching of value set definitions.
    immutable ->  If this is set to 'true', then no new versions of the content logical definition can be created.  Note: Other metadata might still change.
    requirements ->  Explains why this value set is needed and why it has been constrained as it has.
    copyright ->  A copyright statement relating to the value set and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the value set.
    extensible ->  Whether this is intended to be used with an extensible binding or not.
    compose ->  A set of criteria that provide the content logical definition of the value set by including or excluding codes from outside this value set.
    expansion ->  A value set can also be "expanded", where the value set is turned into a simple collection of enumerated codes. This element holds the expansion, if it has been performed.

    # Search parameters
        ValueSet.search.code
        ValueSet.search.context
        ValueSet.search.date
        ValueSet.search.description
        ValueSet.search.expansion
        ValueSet.search.identifier
        ValueSet.search.name
        ValueSet.search.publisher
        ValueSet.search.reference
        ValueSet.search.status
        ValueSet.search.system
        ValueSet.search.url
        ValueSet.search.version
    '''
    # search parameters
    par = [("code", "token"),
           ("context", "token"),
           ("date", "date"),
           ("description", "string"),
           ("expansion", "uri"),
           ("identifier", "token"),
           ("name", "string"),
           ("publisher", "string"),
           ("reference", "uri"),
           ("status", "token"),
           ("system", "uri"),
           ("url", "uri"),
           ("version", "token")]

    search = Params(par, "ValueSet")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'contact':
                    list_to_add.append(ValueSetContactComponent(obj))
                elif key == 'useContext':
                    list_to_add.append(CodeableConcept(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR ValueSet __new__
        '''
        if json == None:
            return None
        else:
            return super(ValueSet, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR ValueSet constructor
        '''
        logging.info("FHIR ValueSet: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "ValueSet"
        self.url = self.__add('url')
        self.identifier = Identifier(self.__add('identifier'))
        self.version = self.__add('version')
        self.name = self.__add('name')
        self.status = self.__add('status')
        self.experimental = Boolean(self.__add('experimental'))
        self.publisher = self.__add('publisher')
        if 'contact' in self.__json:
            if isinstance(self.__json['contact'], list):
                self.contact = self.__add_list('contact')
            else:
                self.contact = ValueSetContactComponent(self.__add('contact'))
        else:
            self.contact = None
        self.date = DateTime(self.__add('date'))
        self.lockedDate = Date(self.__add('lockedDate'))
        self.description = self.__add('description')
        if 'useContext' in self.__json:
            if isinstance(self.__json['useContext'], list):
                self.useContext = self.__add_list('useContext')
            else:
                self.useContext = CodeableConcept(self.__add('useContext'))
        else:
            self.useContext = None
        self.immutable = Boolean(self.__add('immutable'))
        self.requirements = self.__add('requirements')
        self.copyright = self.__add('copyright')
        self.extensible = Boolean(self.__add('extensible'))
        self.compose = ValueSetComposeComponent(self.__add('compose'))
        self.expansion = ValueSetExpansionComponent(self.__add('expansion'))


        # Parent Resource Init
        super(ValueSet, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.url:
            self.__json['url'] = self.url
        if self.identifier:
            self.__json['identifier'] = self.identifier.json
        if self.version:
            self.__json['version'] = self.version
        if self.name:
            self.__json['name'] = self.name
        if self.status:
            self.__json['status'] = self.status
        if self.experimental:
            self.__json['experimental'] = self.experimental.json
        if self.publisher:
            self.__json['publisher'] = self.publisher
        if self.contact:
            self.__json['contact'] = self.__get_list(self.contact)
        if self.date:
            self.__json['date'] = self.date.json
        if self.lockedDate:
            self.__json['lockedDate'] = self.lockedDate.json
        if self.description:
            self.__json['description'] = self.description
        if self.useContext:
            self.__json['useContext'] = self.__get_list(self.useContext)
        if self.immutable:
            self.__json['immutable'] = self.immutable.json
        if self.requirements:
            self.__json['requirements'] = self.requirements
        if self.copyright:
            self.__json['copyright'] = self.copyright
        if self.extensible:
            self.__json['extensible'] = self.extensible.json
        if self.compose:
            self.__json['compose'] = self.compose.json
        if self.expansion:
            self.__json['expansion'] = self.expansion.json

        # Add json attributes
        self.__json = super(ValueSet, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR ValueSet string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class VisionPrescriptionDispenseComponent(BackboneElement):
    '''
    FHIR VisionPrescriptionDispenseComponent resource

     Deals with details of the dispense part of the supply specification.

    '''

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:

                list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR VisionPrescriptionDispenseComponent __new__
        '''
        if json == None:
            return None
        else:
            return super(VisionPrescriptionDispenseComponent, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR VisionPrescriptionDispenseComponent constructor
        '''
        logging.info("FHIR VisionPrescriptionDispenseComponent: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = None
        self.product = Coding(self.__add('product'))
        self.eye = self.__add('eye')
        self.sphere = self.__add('sphere')
        self.cylinder = self.__add('cylinder')
        self.axis = self.__add('axis')
        self.prism = self.__add('prism')
        self.base = self.__add('base')
        self.add = self.__add('add')
        self.power = self.__add('power')
        self.backCurve = self.__add('backCurve')
        self.diameter = self.__add('diameter')
        self.duration = SimpleQuantity(self.__add('duration'))
        self.color = self.__add('color')
        self.brand = self.__add('brand')
        self.notes = self.__add('notes')



    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.product:
            self.__json['product'] = self.product.json
        if self.eye:
            self.__json['eye'] = self.eye
        if self.sphere:
            self.__json['sphere'] = self.sphere
        if self.cylinder:
            self.__json['cylinder'] = self.cylinder
        if self.axis:
            self.__json['axis'] = self.axis
        if self.prism:
            self.__json['prism'] = self.prism
        if self.base:
            self.__json['base'] = self.base
        if self.add:
            self.__json['add'] = self.add
        if self.power:
            self.__json['power'] = self.power
        if self.backCurve:
            self.__json['backCurve'] = self.backCurve
        if self.diameter:
            self.__json['diameter'] = self.diameter
        if self.duration:
            self.__json['duration'] = self.duration.json
        if self.color:
            self.__json['color'] = self.color
        if self.brand:
            self.__json['brand'] = self.brand
        if self.notes:
            self.__json['notes'] = self.notes


        return self.__json
        
    def __repr__(self):
        '''
        FHIR VisionPrescriptionDispenseComponent string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))

class VisionPrescription(DomainResource):
    '''
    FHIR VisionPrescription resource

     An authorization for the supply of glasses and/or contact lenses to a patient. If the element is present, it must have either a @value, an @id, or extensions

    identifier ->  Business identifier which may be used by other parties to reference or identify the prescription.
    dateWritten ->  The date (and perhaps time) when the prescription was written.
    patient ->  A link to a resource representing the person to whom the vision products will be supplied.
    prescriber ->  The healthcare professional responsible for authorizing the prescription.
    encounter ->  A link to a resource that identifies the particular occurrence of contact between patient and health care provider.
    dispense ->  Deals with details of the dispense part of the supply specification.
    reasonCodeableConcept ->  Can be the reason or the indication for writing the prescription.
    reasonReference ->  Can be the reason or the indication for writing the prescription.

    # Search parameters
        VisionPrescription.search.datewritten
        VisionPrescription.search.encounter
        VisionPrescription.search.identifier
        VisionPrescription.search.patient
        VisionPrescription.search.prescriber
    '''
    # search parameters
    par = [("datewritten", "date"),
           ("encounter", "reference"),
           ("identifier", "token"),
           ("patient", "reference"),
           ("prescriber", "reference")]

    search = Params(par, "VisionPrescription")

    def __add(self, key):
        if key in self.__json:
            return self.__json[key]
        else:
            return None

    def __add_list(self, key):
        if key in self.__json:
            list_to_add = []
            for obj in self.__json[key]:
                if key == 'identifier':
                    list_to_add.append(Identifier(obj))
                elif key == 'dispense':
                    list_to_add.append(VisionPrescriptionDispenseComponent(obj))
                else:
                    list_to_add.append(obj)
            return list_to_add
        else:
            return None

    def __get_list(self, var):
        if var == None:
            return None
        else:
            if isinstance(var, list):
                list_obj = []
                for obj in var:
                    if isinstance(obj, dict) or isinstance(obj, list) or isinstance(obj, basestring):
                        list_obj.append(obj)
                    else:
                        list_obj.append(obj.json)
            else:
                list_obj = []
                if isinstance(var, dict) or isinstance(var, list) or isinstance(var, basestring):
                    list_obj.append(var)
                else:
                    list_obj.append(var.json)
            return list_obj

    def __new__(self, json):
        '''
        FHIR VisionPrescription __new__
        '''
        if json == None:
            return None
        else:
            return super(VisionPrescription, self).__new__(self, json)
            #return object.__new__(self, args, kwargs)

    def __init__(self, json):
        '''
        FHIR VisionPrescription constructor
        '''
        logging.info("FHIR VisionPrescription: input -> {0}".format(str(json)))

        if is_xml(json):
            json = xml2json(json)
            
        self.__json = json
        self.resourceType = "VisionPrescription"
        if 'identifier' in self.__json:
            if isinstance(self.__json['identifier'], list):
                self.identifier = self.__add_list('identifier')
            else:
                self.identifier = Identifier(self.__add('identifier'))
        else:
            self.identifier = None
        self.dateWritten = DateTime(self.__add('dateWritten'))
        self.patient = Reference(self.__add('patient'))
        self.prescriber = Reference(self.__add('prescriber'))
        self.encounter = Reference(self.__add('encounter'))
        if 'dispense' in self.__json:
            if isinstance(self.__json['dispense'], list):
                self.dispense = self.__add_list('dispense')
            else:
                self.dispense = VisionPrescriptionDispenseComponent(self.__add('dispense'))
        else:
            self.dispense = None
        self.reasonCodeableConcept = CodeableConcept(self.__add('reasonCodeableConcept'))
        self.reasonReference = Reference(self.__add('reasonReference'))


        # Parent Resource Init
        super(VisionPrescription, self).__init__(json)

    @property
    def json(self):
        '''
        Json Object representation
        '''
        self.__json = {}
        if self.resourceType:
            self.__json['resourceType'] = self.resourceType
        if self.identifier:
            self.__json['identifier'] = self.__get_list(self.identifier)
        if self.dateWritten:
            self.__json['dateWritten'] = self.dateWritten.json
        if self.patient:
            self.__json['patient'] = self.patient.json
        if self.prescriber:
            self.__json['prescriber'] = self.prescriber.json
        if self.encounter:
            self.__json['encounter'] = self.encounter.json
        if self.dispense:
            self.__json['dispense'] = self.__get_list(self.dispense)
        if self.reasonCodeableConcept:
            self.__json['reasonCodeableConcept'] = self.reasonCodeableConcept.json
        if self.reasonReference:
            self.__json['reasonReference'] = self.reasonReference.json

        # Add json attributes
        self.__json = super(VisionPrescription, self)._add_json(jinput = self.__json)
        return self.__json
        
    def __repr__(self):
        '''
        FHIR VisionPrescription string Representation
        '''
        return json.dumps(self.json, indent=4, separators=(',', ': '))
